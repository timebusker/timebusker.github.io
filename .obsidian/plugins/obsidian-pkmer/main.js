"use strict";const at=require("obsidian");/**
* @vue/shared v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function fs(t,e){const n=new Set(t.split(","));return e?s=>n.has(s.toLowerCase()):s=>n.has(s)}const bt={},Ie=[],Vt=()=>{},xi=()=>!1,Tn=t=>t.charCodeAt(0)===111&&t.charCodeAt(1)===110&&(t.charCodeAt(2)>122||t.charCodeAt(2)<97),hs=t=>t.startsWith("onUpdate:"),Bt=Object.assign,ps=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},ki=Object.prototype.hasOwnProperty,vt=(t,e)=>ki.call(t,e),ct=Array.isArray,Ee=t=>qe(t)==="[object Map]",In=t=>qe(t)==="[object Set]",Bs=t=>qe(t)==="[object Date]",ut=t=>typeof t=="function",zt=t=>typeof t=="string",ne=t=>typeof t=="symbol",Ct=t=>t!==null&&typeof t=="object",ms=t=>(Ct(t)||ut(t))&&ut(t.then)&&ut(t.catch),hr=Object.prototype.toString,qe=t=>hr.call(t),Ci=t=>qe(t).slice(8,-1),pr=t=>qe(t)==="[object Object]",gs=t=>zt(t)&&t!=="NaN"&&t[0]!=="-"&&""+parseInt(t,10)===t,Me=fs(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),En=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},Si=/-(\w)/g,Pe=En(t=>t.replace(Si,(e,n)=>n?n.toUpperCase():"")),Ti=/\B([A-Z])/g,Be=En(t=>t.replace(Ti,"-$1").toLowerCase()),mr=En(t=>t.charAt(0).toUpperCase()+t.slice(1)),Fn=En(t=>t?`on${mr(t)}`:""),he=(t,e)=>!Object.is(t,e),dn=(t,e)=>{for(let n=0;n<t.length;n++)t[n](e)},gr=(t,e,n,s=!1)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:s,value:n})},wr=t=>{const e=parseFloat(t);return isNaN(e)?t:e},Ii=t=>{const e=zt(t)?Number(t):NaN;return isNaN(e)?t:e};let Ds;const vr=()=>Ds||(Ds=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Je(t){if(ct(t)){const e={};for(let n=0;n<t.length;n++){const s=t[n],i=zt(s)?Pi(s):Je(s);if(i)for(const r in i)e[r]=i[r]}return e}else if(zt(t)||Ct(t))return t}const Ei=/;(?![^(]*\))/g,Ai=/:([^]+)/,Oi=/\/\*[^]*?\*\//g;function Pi(t){const e={};return t.replace(Oi,"").split(Ei).forEach(n=>{if(n){const s=n.split(Ai);s.length>1&&(e[s[0].trim()]=s[1].trim())}}),e}function At(t){let e="";if(zt(t))e=t;else if(ct(t))for(let n=0;n<t.length;n++){const s=At(t[n]);s&&(e+=s+" ")}else if(Ct(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const zi="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Li=fs(zi);function _r(t){return!!t||t===""}function Bi(t,e){if(t.length!==e.length)return!1;let n=!0;for(let s=0;n&&s<t.length;s++)n=An(t[s],e[s]);return n}function An(t,e){if(t===e)return!0;let n=Bs(t),s=Bs(e);if(n||s)return n&&s?t.getTime()===e.getTime():!1;if(n=ne(t),s=ne(e),n||s)return t===e;if(n=ct(t),s=ct(e),n||s)return n&&s?Bi(t,e):!1;if(n=Ct(t),s=Ct(e),n||s){if(!n||!s)return!1;const i=Object.keys(t).length,r=Object.keys(e).length;if(i!==r)return!1;for(const a in t){const l=t.hasOwnProperty(a),c=e.hasOwnProperty(a);if(l&&!c||!l&&c||!An(t[a],e[a]))return!1}}return String(t)===String(e)}function Di(t,e){return t.findIndex(n=>An(n,e))}const kt=t=>zt(t)?t:t==null?"":ct(t)||Ct(t)&&(t.toString===hr||!ut(t.toString))?JSON.stringify(t,yr,2):String(t),yr=(t,e)=>e&&e.__v_isRef?yr(t,e.value):Ee(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((n,[s,i],r)=>(n[Nn(s,r)+" =>"]=i,n),{})}:In(e)?{[`Set(${e.size})`]:[...e.values()].map(n=>Nn(n))}:ne(e)?Nn(e):Ct(e)&&!ct(e)&&!pr(e)?String(e):e,Nn=(t,e="")=>{var n;return ne(t)?`Symbol(${(n=t.description)!=null?n:e})`:t};/**
* @vue/reactivity v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let qt;class $i{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=qt,!e&&qt&&(this.index=(qt.scopes||(qt.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const n=qt;try{return qt=this,e()}finally{qt=n}}}on(){qt=this}off(){qt=this.parent}stop(e){if(this._active){let n,s;for(n=0,s=this.effects.length;n<s;n++)this.effects[n].stop();for(n=0,s=this.cleanups.length;n<s;n++)this.cleanups[n]();if(this.scopes)for(n=0,s=this.scopes.length;n<s;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){const i=this.parent.scopes.pop();i&&i!==this&&(this.parent.scopes[this.index]=i,i.index=this.index)}this.parent=void 0,this._active=!1}}}function Ri(t,e=qt){e&&e.active&&e.effects.push(t)}function Ui(){return qt}let be;class ws{constructor(e,n,s,i){this.fn=e,this.trigger=n,this.scheduler=s,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,Ri(this,i)}get dirty(){if(this._dirtyLevel===2||this._dirtyLevel===3){this._dirtyLevel=1,pe();for(let e=0;e<this._depsLength;e++){const n=this.deps[e];if(n.computed&&(Mi(n.computed),this._dirtyLevel>=4))break}this._dirtyLevel===1&&(this._dirtyLevel=0),me()}return this._dirtyLevel>=4}set dirty(e){this._dirtyLevel=e?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let e=de,n=be;try{return de=!0,be=this,this._runnings++,$s(this),this.fn()}finally{Rs(this),this._runnings--,be=n,de=e}}stop(){this.active&&($s(this),Rs(this),this.onStop&&this.onStop(),this.active=!1)}}function Mi(t){return t.value}function $s(t){t._trackId++,t._depsLength=0}function Rs(t){if(t.deps.length>t._depsLength){for(let e=t._depsLength;e<t.deps.length;e++)br(t.deps[e],t);t.deps.length=t._depsLength}}function br(t,e){const n=t.get(e);n!==void 0&&e._trackId!==n&&(t.delete(e),t.size===0&&t.cleanup())}let de=!0,qn=0;const xr=[];function pe(){xr.push(de),de=!1}function me(){const t=xr.pop();de=t===void 0?!0:t}function vs(){qn++}function _s(){for(qn--;!qn&&Jn.length;)Jn.shift()()}function kr(t,e,n){if(e.get(t)!==t._trackId){e.set(t,t._trackId);const s=t.deps[t._depsLength];s!==e?(s&&br(s,t),t.deps[t._depsLength++]=e):t._depsLength++}}const Jn=[];function Cr(t,e,n){vs();for(const s of t.keys()){let i;s._dirtyLevel<e&&(i??(i=t.get(s)===s._trackId))&&(s._shouldSchedule||(s._shouldSchedule=s._dirtyLevel===0),s._dirtyLevel=e),s._shouldSchedule&&(i??(i=t.get(s)===s._trackId))&&(s.trigger(),(!s._runnings||s.allowRecurse)&&s._dirtyLevel!==2&&(s._shouldSchedule=!1,s.scheduler&&Jn.push(s.scheduler)))}_s()}const Sr=(t,e)=>{const n=new Map;return n.cleanup=t,n.computed=e,n},Yn=new WeakMap,xe=Symbol(""),Xn=Symbol("");function Ht(t,e,n){if(de&&be){let s=Yn.get(t);s||Yn.set(t,s=new Map);let i=s.get(n);i||s.set(n,i=Sr(()=>s.delete(n))),kr(be,i)}}function ee(t,e,n,s,i,r){const a=Yn.get(t);if(!a)return;let l=[];if(e==="clear")l=[...a.values()];else if(n==="length"&&ct(t)){const c=Number(s);a.forEach((f,_)=>{(_==="length"||!ne(_)&&_>=c)&&l.push(f)})}else switch(n!==void 0&&l.push(a.get(n)),e){case"add":ct(t)?gs(n)&&l.push(a.get("length")):(l.push(a.get(xe)),Ee(t)&&l.push(a.get(Xn)));break;case"delete":ct(t)||(l.push(a.get(xe)),Ee(t)&&l.push(a.get(Xn)));break;case"set":Ee(t)&&l.push(a.get(xe));break}vs();for(const c of l)c&&Cr(c,4);_s()}const Fi=fs("__proto__,__v_isRef,__isVue"),Tr=new Set(Object.getOwnPropertyNames(Symbol).filter(t=>t!=="arguments"&&t!=="caller").map(t=>Symbol[t]).filter(ne)),Us=Ni();function Ni(){const t={};return["includes","indexOf","lastIndexOf"].forEach(e=>{t[e]=function(...n){const s=_t(this);for(let r=0,a=this.length;r<a;r++)Ht(s,"get",r+"");const i=s[e](...n);return i===-1||i===!1?s[e](...n.map(_t)):i}}),["push","pop","shift","unshift","splice"].forEach(e=>{t[e]=function(...n){pe(),vs();const s=_t(this)[e].apply(this,n);return _s(),me(),s}}),t}function ji(t){ne(t)||(t=String(t));const e=_t(this);return Ht(e,"has",t),e.hasOwnProperty(t)}class Ir{constructor(e=!1,n=!1){this._isReadonly=e,this._isShallow=n}get(e,n,s){const i=this._isReadonly,r=this._isShallow;if(n==="__v_isReactive")return!i;if(n==="__v_isReadonly")return i;if(n==="__v_isShallow")return r;if(n==="__v_raw")return s===(i?r?eo:Pr:r?Or:Ar).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(s)?e:void 0;const a=ct(e);if(!i){if(a&&vt(Us,n))return Reflect.get(Us,n,s);if(n==="hasOwnProperty")return ji}const l=Reflect.get(e,n,s);return(ne(n)?Tr.has(n):Fi(n))||(i||Ht(e,"get",n),r)?l:Wt(l)?a&&gs(n)?l:l.value:Ct(l)?i?zr(l):xs(l):l}}class Er extends Ir{constructor(e=!1){super(!1,e)}set(e,n,s,i){let r=e[n];if(!this._isShallow){const c=We(r);if(!vn(s)&&!We(s)&&(r=_t(r),s=_t(s)),!ct(e)&&Wt(r)&&!Wt(s))return c?!1:(r.value=s,!0)}const a=ct(e)&&gs(n)?Number(n)<e.length:vt(e,n),l=Reflect.set(e,n,s,i);return e===_t(i)&&(a?he(s,r)&&ee(e,"set",n,s):ee(e,"add",n,s)),l}deleteProperty(e,n){const s=vt(e,n);e[n];const i=Reflect.deleteProperty(e,n);return i&&s&&ee(e,"delete",n,void 0),i}has(e,n){const s=Reflect.has(e,n);return(!ne(n)||!Tr.has(n))&&Ht(e,"has",n),s}ownKeys(e){return Ht(e,"iterate",ct(e)?"length":xe),Reflect.ownKeys(e)}}class Hi extends Ir{constructor(e=!1){super(!0,e)}set(e,n){return!0}deleteProperty(e,n){return!0}}const Wi=new Er,Zi=new Hi,Vi=new Er(!0);const ys=t=>t,On=t=>Reflect.getPrototypeOf(t);function nn(t,e,n=!1,s=!1){t=t.__v_raw;const i=_t(t),r=_t(e);n||(he(e,r)&&Ht(i,"get",e),Ht(i,"get",r));const{has:a}=On(i),l=s?ys:n?Cs:Ze;if(a.call(i,e))return l(t.get(e));if(a.call(i,r))return l(t.get(r));t!==i&&t.get(e)}function sn(t,e=!1){const n=this.__v_raw,s=_t(n),i=_t(t);return e||(he(t,i)&&Ht(s,"has",t),Ht(s,"has",i)),t===i?n.has(t):n.has(t)||n.has(i)}function rn(t,e=!1){return t=t.__v_raw,!e&&Ht(_t(t),"iterate",xe),Reflect.get(t,"size",t)}function Ms(t){t=_t(t);const e=_t(this);return On(e).has.call(e,t)||(e.add(t),ee(e,"add",t,t)),this}function Fs(t,e){e=_t(e);const n=_t(this),{has:s,get:i}=On(n);let r=s.call(n,t);r||(t=_t(t),r=s.call(n,t));const a=i.call(n,t);return n.set(t,e),r?he(e,a)&&ee(n,"set",t,e):ee(n,"add",t,e),this}function Ns(t){const e=_t(this),{has:n,get:s}=On(e);let i=n.call(e,t);i||(t=_t(t),i=n.call(e,t)),s&&s.call(e,t);const r=e.delete(t);return i&&ee(e,"delete",t,void 0),r}function js(){const t=_t(this),e=t.size!==0,n=t.clear();return e&&ee(t,"clear",void 0,void 0),n}function on(t,e){return function(s,i){const r=this,a=r.__v_raw,l=_t(a),c=e?ys:t?Cs:Ze;return!t&&Ht(l,"iterate",xe),a.forEach((f,_)=>s.call(i,c(f),c(_),r))}}function an(t,e,n){return function(...s){const i=this.__v_raw,r=_t(i),a=Ee(r),l=t==="entries"||t===Symbol.iterator&&a,c=t==="keys"&&a,f=i[t](...s),_=n?ys:e?Cs:Ze;return!e&&Ht(r,"iterate",c?Xn:xe),{next(){const{value:h,done:w}=f.next();return w?{value:h,done:w}:{value:l?[_(h[0]),_(h[1])]:_(h),done:w}},[Symbol.iterator](){return this}}}}function ie(t){return function(...e){return t==="delete"?!1:t==="clear"?void 0:this}}function Ki(){const t={get(r){return nn(this,r)},get size(){return rn(this)},has:sn,add:Ms,set:Fs,delete:Ns,clear:js,forEach:on(!1,!1)},e={get(r){return nn(this,r,!1,!0)},get size(){return rn(this)},has:sn,add:Ms,set:Fs,delete:Ns,clear:js,forEach:on(!1,!0)},n={get(r){return nn(this,r,!0)},get size(){return rn(this,!0)},has(r){return sn.call(this,r,!0)},add:ie("add"),set:ie("set"),delete:ie("delete"),clear:ie("clear"),forEach:on(!0,!1)},s={get(r){return nn(this,r,!0,!0)},get size(){return rn(this,!0)},has(r){return sn.call(this,r,!0)},add:ie("add"),set:ie("set"),delete:ie("delete"),clear:ie("clear"),forEach:on(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(r=>{t[r]=an(r,!1,!1),n[r]=an(r,!0,!1),e[r]=an(r,!1,!0),s[r]=an(r,!0,!0)}),[t,n,e,s]}const[Gi,qi,Ji,Yi]=Ki();function bs(t,e){const n=e?t?Yi:Ji:t?qi:Gi;return(s,i,r)=>i==="__v_isReactive"?!t:i==="__v_isReadonly"?t:i==="__v_raw"?s:Reflect.get(vt(n,i)&&i in s?n:s,i,r)}const Xi={get:bs(!1,!1)},Qi={get:bs(!1,!0)},to={get:bs(!0,!1)};const Ar=new WeakMap,Or=new WeakMap,Pr=new WeakMap,eo=new WeakMap;function no(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function so(t){return t.__v_skip||!Object.isExtensible(t)?0:no(Ci(t))}function xs(t){return We(t)?t:ks(t,!1,Wi,Xi,Ar)}function ro(t){return ks(t,!1,Vi,Qi,Or)}function zr(t){return ks(t,!0,Zi,to,Pr)}function ks(t,e,n,s,i){if(!Ct(t)||t.__v_raw&&!(e&&t.__v_isReactive))return t;const r=i.get(t);if(r)return r;const a=so(t);if(a===0)return t;const l=new Proxy(t,a===2?s:n);return i.set(t,l),l}function Fe(t){return We(t)?Fe(t.__v_raw):!!(t&&t.__v_isReactive)}function We(t){return!!(t&&t.__v_isReadonly)}function vn(t){return!!(t&&t.__v_isShallow)}function Lr(t){return t?!!t.__v_raw:!1}function _t(t){const e=t&&t.__v_raw;return e?_t(e):t}function io(t){return Object.isExtensible(t)&&gr(t,"__v_skip",!0),t}const Ze=t=>Ct(t)?xs(t):t,Cs=t=>Ct(t)?zr(t):t;class Br{constructor(e,n,s,i){this.getter=e,this._setter=n,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new ws(()=>e(this._value),()=>fn(this,this.effect._dirtyLevel===2?2:3)),this.effect.computed=this,this.effect.active=this._cacheable=!i,this.__v_isReadonly=s}get value(){const e=_t(this);return(!e._cacheable||e.effect.dirty)&&he(e._value,e._value=e.effect.run())&&fn(e,4),Dr(e),e.effect._dirtyLevel>=2&&fn(e,2),e._value}set value(e){this._setter(e)}get _dirty(){return this.effect.dirty}set _dirty(e){this.effect.dirty=e}}function oo(t,e,n=!1){let s,i;const r=ut(t);return r?(s=t,i=Vt):(s=t.get,i=t.set),new Br(s,i,r||!i,n)}function Dr(t){var e;de&&be&&(t=_t(t),kr(be,(e=t.dep)!=null?e:t.dep=Sr(()=>t.dep=void 0,t instanceof Br?t:void 0)))}function fn(t,e=4,n){t=_t(t);const s=t.dep;s&&Cr(s,e)}function Wt(t){return!!(t&&t.__v_isRef===!0)}function ft(t){return ao(t,!1)}function ao(t,e){return Wt(t)?t:new lo(t,e)}class lo{constructor(e,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?e:_t(e),this._value=n?e:Ze(e)}get value(){return Dr(this),this._value}set value(e){const n=this.__v_isShallow||vn(e)||We(e);e=n?e:_t(e),he(e,this._rawValue)&&(this._rawValue=e,this._value=n?e:Ze(e),fn(this,4))}}function Rt(t){return Wt(t)?t.value:t}const co={get:(t,e,n)=>Rt(Reflect.get(t,e,n)),set:(t,e,n,s)=>{const i=t[e];return Wt(i)&&!Wt(n)?(i.value=n,!0):Reflect.set(t,e,n,s)}};function $r(t){return Fe(t)?t:new Proxy(t,co)}/**
* @vue/runtime-core v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function fe(t,e,n,s){try{return s?t(...s):t()}catch(i){Ye(i,e,n)}}function Yt(t,e,n,s){if(ut(t)){const i=fe(t,e,n,s);return i&&ms(i)&&i.catch(r=>{Ye(r,e,n)}),i}if(ct(t)){const i=[];for(let r=0;r<t.length;r++)i.push(Yt(t[r],e,n,s));return i}}function Ye(t,e,n,s=!0){const i=e?e.vnode:null;if(e){let r=e.parent;const a=e.proxy,l=`https://vuejs.org/error-reference/#runtime-${n}`;for(;r;){const f=r.ec;if(f){for(let _=0;_<f.length;_++)if(f[_](t,a,l)===!1)return}r=r.parent}const c=e.appContext.config.errorHandler;if(c){pe(),fe(c,null,10,[t,a,l]),me();return}}uo(t,n,i,s)}function uo(t,e,n,s=!0){console.error(t)}let Ve=!1,Qn=!1;const Ut=[];let te=0;const Ae=[];let ae=null,_e=0;const Rr=Promise.resolve();let Ss=null;function Ur(t){const e=Ss||Rr;return t?e.then(this?t.bind(this):t):e}function fo(t){let e=te+1,n=Ut.length;for(;e<n;){const s=e+n>>>1,i=Ut[s],r=Ke(i);r<t||r===t&&i.pre?e=s+1:n=s}return e}function Ts(t){(!Ut.length||!Ut.includes(t,Ve&&t.allowRecurse?te+1:te))&&(t.id==null?Ut.push(t):Ut.splice(fo(t.id),0,t),Mr())}function Mr(){!Ve&&!Qn&&(Qn=!0,Ss=Rr.then(Nr))}function ho(t){const e=Ut.indexOf(t);e>te&&Ut.splice(e,1)}function ts(t){ct(t)?Ae.push(...t):(!ae||!ae.includes(t,t.allowRecurse?_e+1:_e))&&Ae.push(t),Mr()}function Hs(t,e,n=Ve?te+1:0){for(;n<Ut.length;n++){const s=Ut[n];if(s&&s.pre){if(t&&s.id!==t.uid)continue;Ut.splice(n,1),n--,s()}}}function Fr(t){if(Ae.length){const e=[...new Set(Ae)].sort((n,s)=>Ke(n)-Ke(s));if(Ae.length=0,ae){ae.push(...e);return}for(ae=e,_e=0;_e<ae.length;_e++)ae[_e]();ae=null,_e=0}}const Ke=t=>t.id==null?1/0:t.id,po=(t,e)=>{const n=Ke(t)-Ke(e);if(n===0){if(t.pre&&!e.pre)return-1;if(e.pre&&!t.pre)return 1}return n};function Nr(t){Qn=!1,Ve=!0,Ut.sort(po);const e=Vt;try{for(te=0;te<Ut.length;te++){const n=Ut[te];n&&n.active!==!1&&fe(n,null,14)}}finally{te=0,Ut.length=0,Fr(),Ve=!1,Ss=null,(Ut.length||Ae.length)&&Nr()}}function mo(t,e,...n){if(t.isUnmounted)return;const s=t.vnode.props||bt;let i=n;const r=e.startsWith("update:"),a=r&&e.slice(7);if(a&&a in s){const _=`${a==="modelValue"?"model":a}Modifiers`,{number:h,trim:w}=s[_]||bt;w&&(i=n.map(d=>zt(d)?d.trim():d)),h&&(i=n.map(wr))}let l,c=s[l=Fn(e)]||s[l=Fn(Pe(e))];!c&&r&&(c=s[l=Fn(Be(e))]),c&&Yt(c,t,6,i);const f=s[l+"Once"];if(f){if(!t.emitted)t.emitted={};else if(t.emitted[l])return;t.emitted[l]=!0,Yt(f,t,6,i)}}function jr(t,e,n=!1){const s=e.emitsCache,i=s.get(t);if(i!==void 0)return i;const r=t.emits;let a={},l=!1;if(!ut(t)){const c=f=>{const _=jr(f,e,!0);_&&(l=!0,Bt(a,_))};!n&&e.mixins.length&&e.mixins.forEach(c),t.extends&&c(t.extends),t.mixins&&t.mixins.forEach(c)}return!r&&!l?(Ct(t)&&s.set(t,null),null):(ct(r)?r.forEach(c=>a[c]=null):Bt(a,r),Ct(t)&&s.set(t,a),a)}function Pn(t,e){return!t||!Tn(e)?!1:(e=e.slice(2).replace(/Once$/,""),vt(t,e[0].toLowerCase()+e.slice(1))||vt(t,Be(e))||vt(t,e))}let jt=null,zn=null;function _n(t){const e=jt;return jt=t,zn=t&&t.type.__scopeId||null,e}function Hr(t){zn=t}function Wr(){zn=null}function es(t,e=jt,n){if(!e||t._n)return t;const s=(...i)=>{s._d&&tr(-1);const r=_n(e);let a;try{a=t(...i)}finally{_n(r),s._d&&tr(1)}return a};return s._n=!0,s._c=!0,s._d=!0,s}function jn(t){const{type:e,vnode:n,proxy:s,withProxy:i,propsOptions:[r],slots:a,attrs:l,emit:c,render:f,renderCache:_,props:h,data:w,setupState:d,ctx:x,inheritAttrs:p}=t,v=_n(t);let y,k;try{if(n.shapeFlag&4){const L=i||s,P=L;y=Jt(f.call(P,L,_,h,d,w,x)),k=l}else{const L=e;y=Jt(L.length>1?L(h,{attrs:l,slots:a,emit:c}):L(h,null)),k=e.props?l:wo(l)}}catch(L){He.length=0,Ye(L,t,1),y=Lt(se)}let A=y;if(k&&p!==!1){const L=Object.keys(k),{shapeFlag:P}=A;L.length&&P&7&&(r&&L.some(hs)&&(k=vo(k,r)),A=Le(A,k,!1,!0))}return n.dirs&&(A=Le(A,null,!1,!0),A.dirs=A.dirs?A.dirs.concat(n.dirs):n.dirs),n.transition&&(A.transition=n.transition),y=A,_n(v),y}function go(t,e=!0){let n;for(let s=0;s<t.length;s++){const i=t[s];if(ui(i)){if(i.type!==se||i.children==="v-if"){if(n)return;n=i}}else return}return n}const wo=t=>{let e;for(const n in t)(n==="class"||n==="style"||Tn(n))&&((e||(e={}))[n]=t[n]);return e},vo=(t,e)=>{const n={};for(const s in t)(!hs(s)||!(s.slice(9)in e))&&(n[s]=t[s]);return n};function _o(t,e,n){const{props:s,children:i,component:r}=t,{props:a,children:l,patchFlag:c}=e,f=r.emitsOptions;if(e.dirs||e.transition)return!0;if(n&&c>=0){if(c&1024)return!0;if(c&16)return s?Ws(s,a,f):!!a;if(c&8){const _=e.dynamicProps;for(let h=0;h<_.length;h++){const w=_[h];if(a[w]!==s[w]&&!Pn(f,w))return!0}}}else return(i||l)&&(!l||!l.$stable)?!0:s===a?!1:s?a?Ws(s,a,f):!0:!!a;return!1}function Ws(t,e,n){const s=Object.keys(e);if(s.length!==Object.keys(t).length)return!0;for(let i=0;i<s.length;i++){const r=s[i];if(e[r]!==t[r]&&!Pn(n,r))return!0}return!1}function Is({vnode:t,parent:e},n){for(;e;){const s=e.subTree;if(s.suspense&&s.suspense.activeBranch===t&&(s.el=t.el),s===t)(t=e.vnode).el=n,e=e.parent;else break}}const yo=Symbol.for("v-ndc"),bo=t=>t.__isSuspense;let ns=0;const xo={name:"Suspense",__isSuspense:!0,process(t,e,n,s,i,r,a,l,c,f){if(t==null)Co(e,n,s,i,r,a,l,c,f);else{if(r&&r.deps>0&&!t.suspense.isInFallback){e.suspense=t.suspense,e.suspense.vnode=e,e.el=t.el;return}So(t,e,n,s,i,a,l,c,f)}},hydrate:To,create:Es,normalize:Io},ko=xo;function Ge(t,e){const n=t.props&&t.props[e];ut(n)&&n()}function Co(t,e,n,s,i,r,a,l,c){const{p:f,o:{createElement:_}}=c,h=_("div"),w=t.suspense=Es(t,i,s,e,h,n,r,a,l,c);f(null,w.pendingBranch=t.ssContent,h,null,s,w,r,a),w.deps>0?(Ge(t,"onPending"),Ge(t,"onFallback"),f(null,t.ssFallback,e,n,s,null,r,a),Oe(w,t.ssFallback)):w.resolve(!1,!0)}function So(t,e,n,s,i,r,a,l,{p:c,um:f,o:{createElement:_}}){const h=e.suspense=t.suspense;h.vnode=e,e.el=t.el;const w=e.ssContent,d=e.ssFallback,{activeBranch:x,pendingBranch:p,isInFallback:v,isHydrating:y}=h;if(p)h.pendingBranch=w,ue(w,p)?(c(p,w,h.hiddenContainer,null,i,h,r,a,l),h.deps<=0?h.resolve():v&&(y||(c(x,d,n,s,i,null,r,a,l),Oe(h,d)))):(h.pendingId=ns++,y?(h.isHydrating=!1,h.activeBranch=p):f(p,i,h),h.deps=0,h.effects.length=0,h.hiddenContainer=_("div"),v?(c(null,w,h.hiddenContainer,null,i,h,r,a,l),h.deps<=0?h.resolve():(c(x,d,n,s,i,null,r,a,l),Oe(h,d))):x&&ue(w,x)?(c(x,w,n,s,i,h,r,a,l),h.resolve(!0)):(c(null,w,h.hiddenContainer,null,i,h,r,a,l),h.deps<=0&&h.resolve()));else if(x&&ue(w,x))c(x,w,n,s,i,h,r,a,l),Oe(h,w);else if(Ge(e,"onPending"),h.pendingBranch=w,w.shapeFlag&512?h.pendingId=w.component.suspenseId:h.pendingId=ns++,c(null,w,h.hiddenContainer,null,i,h,r,a,l),h.deps<=0)h.resolve();else{const{timeout:k,pendingId:A}=h;k>0?setTimeout(()=>{h.pendingId===A&&h.fallback(d)},k):k===0&&h.fallback(d)}}function Es(t,e,n,s,i,r,a,l,c,f,_=!1){const{p:h,m:w,um:d,n:x,o:{parentNode:p,remove:v}}=f;let y;const k=Ao(t);k&&e&&e.pendingBranch&&(y=e.pendingId,e.deps++);const A=t.props?Ii(t.props.timeout):void 0,L=r,P={vnode:t,parent:e,parentComponent:n,namespace:a,container:s,hiddenContainer:i,deps:0,pendingId:ns++,timeout:typeof A=="number"?A:-1,activeBranch:null,pendingBranch:null,isInFallback:!_,isHydrating:_,isUnmounted:!1,effects:[],resolve($=!1,j=!1){const{vnode:q,activeBranch:M,pendingBranch:J,pendingId:rt,effects:O,parentComponent:V,container:u}=P;let K=!1;P.isHydrating?P.isHydrating=!1:$||(K=M&&J.transition&&J.transition.mode==="out-in",K&&(M.transition.afterLeave=()=>{rt===P.pendingId&&(w(J,u,r===L?x(M):r,0),ts(O))}),M&&(p(M.el)!==P.hiddenContainer&&(r=x(M)),d(M,V,P,!0)),K||w(J,u,r,0)),Oe(P,J),P.pendingBranch=null,P.isInFallback=!1;let st=P.parent,Z=!1;for(;st;){if(st.pendingBranch){st.effects.push(...O),Z=!0;break}st=st.parent}!Z&&!K&&ts(O),P.effects=[],k&&e&&e.pendingBranch&&y===e.pendingId&&(e.deps--,e.deps===0&&!j&&e.resolve()),Ge(q,"onResolve")},fallback($){if(!P.pendingBranch)return;const{vnode:j,activeBranch:q,parentComponent:M,container:J,namespace:rt}=P;Ge(j,"onFallback");const O=x(q),V=()=>{P.isInFallback&&(h(null,$,J,O,M,null,rt,l,c),Oe(P,$))},u=$.transition&&$.transition.mode==="out-in";u&&(q.transition.afterLeave=V),P.isInFallback=!0,d(q,M,null,!0),u||V()},move($,j,q){P.activeBranch&&w(P.activeBranch,$,j,q),P.container=$},next(){return P.activeBranch&&x(P.activeBranch)},registerDep($,j){const q=!!P.pendingBranch;q&&P.deps++;const M=$.vnode.el;$.asyncDep.catch(J=>{Ye(J,$,0)}).then(J=>{if($.isUnmounted||P.isUnmounted||P.pendingId!==$.suspenseId)return;$.asyncResolved=!0;const{vnode:rt}=$;us($,J,!1),M&&(rt.el=M);const O=!M&&$.subTree.el;j($,rt,p(M||$.subTree.el),M?null:x($.subTree),P,a,c),O&&v(O),Is($,rt.el),q&&--P.deps===0&&P.resolve()})},unmount($,j){P.isUnmounted=!0,P.activeBranch&&d(P.activeBranch,n,$,j),P.pendingBranch&&d(P.pendingBranch,n,$,j)}};return P}function To(t,e,n,s,i,r,a,l,c){const f=e.suspense=Es(e,s,n,t.parentNode,document.createElement("div"),null,i,r,a,l,!0),_=c(t,f.pendingBranch=e.ssContent,n,f,r,a);return f.deps===0&&f.resolve(!1,!0),_}function Io(t){const{shapeFlag:e,children:n}=t,s=e&32;t.ssContent=Zs(s?n.default:n),t.ssFallback=s?Zs(n.fallback):Lt(se)}function Zs(t){let e;if(ut(t)){const n=ze&&t._c;n&&(t._d=!1,gt()),t=t(),n&&(t._d=!0,e=Gt,ai())}return ct(t)&&(t=go(t)),t=Jt(t),e&&!t.dynamicChildren&&(t.dynamicChildren=e.filter(n=>n!==t)),t}function Eo(t,e){e&&e.pendingBranch?ct(t)?e.effects.push(...t):e.effects.push(t):ts(t)}function Oe(t,e){t.activeBranch=e;const{vnode:n,parentComponent:s}=t;let i=e.el;for(;!i&&e.component;)e=e.component.subTree,i=e.el;n.el=i,s&&s.subTree===n&&(s.vnode.el=i,Is(s,i))}function Ao(t){const e=t.props&&t.props.suspensible;return e!=null&&e!==!1}const Oo=Symbol.for("v-scx"),Po=()=>pn(Oo),ln={};function Hn(t,e,n){return Zr(t,e,n)}function Zr(t,e,{immediate:n,deep:s,flush:i,once:r,onTrack:a,onTrigger:l}=bt){if(e&&r){const $=e;e=(...j)=>{$(...j),P()}}const c=Mt,f=$=>s===!0?$:ye($,s===!1?1:void 0);let _,h=!1,w=!1;if(Wt(t)?(_=()=>t.value,h=vn(t)):Fe(t)?(_=()=>f(t),h=!0):ct(t)?(w=!0,h=t.some($=>Fe($)||vn($)),_=()=>t.map($=>{if(Wt($))return $.value;if(Fe($))return f($);if(ut($))return fe($,c,2)})):ut(t)?e?_=()=>fe(t,c,2):_=()=>(d&&d(),Yt(t,c,3,[x])):_=Vt,e&&s){const $=_;_=()=>ye($())}let d,x=$=>{d=A.onStop=()=>{fe($,c,4),d=A.onStop=void 0}},p;if(Rn)if(x=Vt,e?n&&Yt(e,c,3,[_(),w?[]:void 0,x]):_(),i==="sync"){const $=Po();p=$.__watcherHandles||($.__watcherHandles=[])}else return Vt;let v=w?new Array(t.length).fill(ln):ln;const y=()=>{if(!(!A.active||!A.dirty))if(e){const $=A.run();(s||h||(w?$.some((j,q)=>he(j,v[q])):he($,v)))&&(d&&d(),Yt(e,c,3,[$,v===ln?void 0:w&&v[0]===ln?[]:v,x]),v=$)}else A.run()};y.allowRecurse=!!e;let k;i==="sync"?k=y:i==="post"?k=()=>Nt(y,c&&c.suspense):(y.pre=!0,c&&(y.id=c.uid),k=()=>Ts(y));const A=new ws(_,Vt,k),L=Ui(),P=()=>{A.stop(),L&&ps(L.effects,A)};return e?n?y():v=A.run():i==="post"?Nt(A.run.bind(A),c&&c.suspense):A.run(),p&&p.push(P),P}function zo(t,e,n){const s=this.proxy,i=zt(t)?t.includes(".")?Vr(s,t):()=>s[t]:t.bind(s,s);let r;ut(e)?r=e:(r=e.handler,n=e);const a=ke(this),l=Zr(i,r.bind(s),n);return a(),l}function Vr(t,e){const n=e.split(".");return()=>{let s=t;for(let i=0;i<n.length&&s;i++)s=s[n[i]];return s}}function ye(t,e=1/0,n){if(e<=0||!Ct(t)||t.__v_skip||(n=n||new Set,n.has(t)))return t;if(n.add(t),e--,Wt(t))ye(t.value,e,n);else if(ct(t))for(let s=0;s<t.length;s++)ye(t[s],e,n);else if(In(t)||Ee(t))t.forEach(s=>{ye(s,e,n)});else if(pr(t))for(const s in t)ye(t[s],e,n);return t}function xt(t,e){if(jt===null)return t;const n=Un(jt)||jt.proxy,s=t.dirs||(t.dirs=[]);for(let i=0;i<e.length;i++){let[r,a,l,c=bt]=e[i];r&&(ut(r)&&(r={mounted:r,updated:r}),r.deep&&ye(a),s.push({dir:r,instance:n,value:a,oldValue:void 0,arg:l,modifiers:c}))}return t}function we(t,e,n,s){const i=t.dirs,r=e&&e.dirs;for(let a=0;a<i.length;a++){const l=i[a];r&&(l.oldValue=r[a].value);let c=l.dir[s];c&&(pe(),Yt(c,n,8,[t.el,l,t,e]),me())}}/*! #__NO_SIDE_EFFECTS__ */function ge(t,e){return ut(t)?(()=>Bt({name:t.name},e,{setup:t}))():t}const hn=t=>!!t.type.__asyncLoader,Kr=t=>t.type.__isKeepAlive;function Lo(t,e){Gr(t,"a",e)}function Bo(t,e){Gr(t,"da",e)}function Gr(t,e,n=Mt){const s=t.__wdc||(t.__wdc=()=>{let i=n;for(;i;){if(i.isDeactivated)return;i=i.parent}return t()});if(Ln(e,s,n),n){let i=n.parent;for(;i&&i.parent;)Kr(i.parent.vnode)&&Do(s,e,n,i),i=i.parent}}function Do(t,e,n,s){const i=Ln(e,t,s,!0);Xe(()=>{ps(s[e],i)},n)}function Ln(t,e,n=Mt,s=!1){if(n){const i=n[t]||(n[t]=[]),r=e.__weh||(e.__weh=(...a)=>{if(n.isUnmounted)return;pe();const l=ke(n),c=Yt(e,n,t,a);return l(),me(),c});return s?i.unshift(r):i.push(r),r}}const re=t=>(e,n=Mt)=>(!Rn||t==="sp")&&Ln(t,(...s)=>e(...s),n),$o=re("bm"),Bn=re("m"),Ro=re("bu"),Uo=re("u"),Mo=re("bum"),Xe=re("um"),Fo=re("sp"),No=re("rtg"),jo=re("rtc");function Ho(t,e=Mt){Ln("ec",t,e)}function Dn(t,e,n,s){let i;const r=n&&n[s];if(ct(t)||zt(t)){i=new Array(t.length);for(let a=0,l=t.length;a<l;a++)i[a]=e(t[a],a,void 0,r&&r[a])}else if(typeof t=="number"){i=new Array(t);for(let a=0;a<t;a++)i[a]=e(a+1,a,void 0,r&&r[a])}else if(Ct(t))if(t[Symbol.iterator])i=Array.from(t,(a,l)=>e(a,l,void 0,r&&r[l]));else{const a=Object.keys(t);i=new Array(a.length);for(let l=0,c=a.length;l<c;l++){const f=a[l];i[l]=e(t[f],f,l,r&&r[l])}}else i=[];return n&&(n[s]=i),i}const ss=t=>t?fi(t)?Un(t)||t.proxy:ss(t.parent):null,Ne=Bt(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>ss(t.parent),$root:t=>ss(t.root),$emit:t=>t.emit,$options:t=>As(t),$forceUpdate:t=>t.f||(t.f=()=>{t.effect.dirty=!0,Ts(t.update)}),$nextTick:t=>t.n||(t.n=Ur.bind(t.proxy)),$watch:t=>zo.bind(t)}),Wn=(t,e)=>t!==bt&&!t.__isScriptSetup&&vt(t,e),Wo={get({_:t},e){if(e==="__v_skip")return!0;const{ctx:n,setupState:s,data:i,props:r,accessCache:a,type:l,appContext:c}=t;let f;if(e[0]!=="$"){const d=a[e];if(d!==void 0)switch(d){case 1:return s[e];case 2:return i[e];case 4:return n[e];case 3:return r[e]}else{if(Wn(s,e))return a[e]=1,s[e];if(i!==bt&&vt(i,e))return a[e]=2,i[e];if((f=t.propsOptions[0])&&vt(f,e))return a[e]=3,r[e];if(n!==bt&&vt(n,e))return a[e]=4,n[e];rs&&(a[e]=0)}}const _=Ne[e];let h,w;if(_)return e==="$attrs"&&Ht(t.attrs,"get",""),_(t);if((h=l.__cssModules)&&(h=h[e]))return h;if(n!==bt&&vt(n,e))return a[e]=4,n[e];if(w=c.config.globalProperties,vt(w,e))return w[e]},set({_:t},e,n){const{data:s,setupState:i,ctx:r}=t;return Wn(i,e)?(i[e]=n,!0):s!==bt&&vt(s,e)?(s[e]=n,!0):vt(t.props,e)||e[0]==="$"&&e.slice(1)in t?!1:(r[e]=n,!0)},has({_:{data:t,setupState:e,accessCache:n,ctx:s,appContext:i,propsOptions:r}},a){let l;return!!n[a]||t!==bt&&vt(t,a)||Wn(e,a)||(l=r[0])&&vt(l,a)||vt(s,a)||vt(Ne,a)||vt(i.config.globalProperties,a)},defineProperty(t,e,n){return n.get!=null?t._.accessCache[e]=0:vt(n,"value")&&this.set(t,e,n.value,null),Reflect.defineProperty(t,e,n)}};function Vs(t){return ct(t)?t.reduce((e,n)=>(e[n]=null,e),{}):t}function yn(t){const e=ga();let n=t();return cs(),ms(n)&&(n=n.catch(s=>{throw ke(e),s})),[n,()=>ke(e)]}let rs=!0;function Zo(t){const e=As(t),n=t.proxy,s=t.ctx;rs=!1,e.beforeCreate&&Ks(e.beforeCreate,t,"bc");const{data:i,computed:r,methods:a,watch:l,provide:c,inject:f,created:_,beforeMount:h,mounted:w,beforeUpdate:d,updated:x,activated:p,deactivated:v,beforeDestroy:y,beforeUnmount:k,destroyed:A,unmounted:L,render:P,renderTracked:$,renderTriggered:j,errorCaptured:q,serverPrefetch:M,expose:J,inheritAttrs:rt,components:O,directives:V,filters:u}=e;if(f&&Vo(f,s,null),a)for(const Z in a){const tt=a[Z];ut(tt)&&(s[Z]=tt.bind(n))}if(i){const Z=i.call(n,n);Ct(Z)&&(t.data=xs(Z))}if(rs=!0,r)for(const Z in r){const tt=r[Z],Y=ut(tt)?tt.bind(n,n):ut(tt.get)?tt.get.bind(n,n):Vt,et=!ut(tt)&&ut(tt.set)?tt.set.bind(n):Vt,F=Pt({get:Y,set:et});Object.defineProperty(s,Z,{enumerable:!0,configurable:!0,get:()=>F.value,set:R=>F.value=R})}if(l)for(const Z in l)qr(l[Z],s,n,Z);if(c){const Z=ut(c)?c.call(n):c;Reflect.ownKeys(Z).forEach(tt=>{Xo(tt,Z[tt])})}_&&Ks(_,t,"c");function st(Z,tt){ct(tt)?tt.forEach(Y=>Z(Y.bind(n))):tt&&Z(tt.bind(n))}if(st($o,h),st(Bn,w),st(Ro,d),st(Uo,x),st(Lo,p),st(Bo,v),st(Ho,q),st(jo,$),st(No,j),st(Mo,k),st(Xe,L),st(Fo,M),ct(J))if(J.length){const Z=t.exposed||(t.exposed={});J.forEach(tt=>{Object.defineProperty(Z,tt,{get:()=>n[tt],set:Y=>n[tt]=Y})})}else t.exposed||(t.exposed={});P&&t.render===Vt&&(t.render=P),rt!=null&&(t.inheritAttrs=rt),O&&(t.components=O),V&&(t.directives=V)}function Vo(t,e,n=Vt){ct(t)&&(t=is(t));for(const s in t){const i=t[s];let r;Ct(i)?"default"in i?r=pn(i.from||s,i.default,!0):r=pn(i.from||s):r=pn(i),Wt(r)?Object.defineProperty(e,s,{enumerable:!0,configurable:!0,get:()=>r.value,set:a=>r.value=a}):e[s]=r}}function Ks(t,e,n){Yt(ct(t)?t.map(s=>s.bind(e.proxy)):t.bind(e.proxy),e,n)}function qr(t,e,n,s){const i=s.includes(".")?Vr(n,s):()=>n[s];if(zt(t)){const r=e[t];ut(r)&&Hn(i,r)}else if(ut(t))Hn(i,t.bind(n));else if(Ct(t))if(ct(t))t.forEach(r=>qr(r,e,n,s));else{const r=ut(t.handler)?t.handler.bind(n):e[t.handler];ut(r)&&Hn(i,r,t)}}function As(t){const e=t.type,{mixins:n,extends:s}=e,{mixins:i,optionsCache:r,config:{optionMergeStrategies:a}}=t.appContext,l=r.get(e);let c;return l?c=l:!i.length&&!n&&!s?c=e:(c={},i.length&&i.forEach(f=>bn(c,f,a,!0)),bn(c,e,a)),Ct(e)&&r.set(e,c),c}function bn(t,e,n,s=!1){const{mixins:i,extends:r}=e;r&&bn(t,r,n,!0),i&&i.forEach(a=>bn(t,a,n,!0));for(const a in e)if(!(s&&a==="expose")){const l=Ko[a]||n&&n[a];t[a]=l?l(t[a],e[a]):e[a]}return t}const Ko={data:Gs,props:qs,emits:qs,methods:Ue,computed:Ue,beforeCreate:Ft,created:Ft,beforeMount:Ft,mounted:Ft,beforeUpdate:Ft,updated:Ft,beforeDestroy:Ft,beforeUnmount:Ft,destroyed:Ft,unmounted:Ft,activated:Ft,deactivated:Ft,errorCaptured:Ft,serverPrefetch:Ft,components:Ue,directives:Ue,watch:qo,provide:Gs,inject:Go};function Gs(t,e){return e?t?function(){return Bt(ut(t)?t.call(this,this):t,ut(e)?e.call(this,this):e)}:e:t}function Go(t,e){return Ue(is(t),is(e))}function is(t){if(ct(t)){const e={};for(let n=0;n<t.length;n++)e[t[n]]=t[n];return e}return t}function Ft(t,e){return t?[...new Set([].concat(t,e))]:e}function Ue(t,e){return t?Bt(Object.create(null),t,e):e}function qs(t,e){return t?ct(t)&&ct(e)?[...new Set([...t,...e])]:Bt(Object.create(null),Vs(t),Vs(e??{})):e}function qo(t,e){if(!t)return e;if(!e)return t;const n=Bt(Object.create(null),t);for(const s in e)n[s]=Ft(t[s],e[s]);return n}function Jr(){return{app:null,config:{isNativeTag:xi,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Jo=0;function Yo(t,e){return function(s,i=null){ut(s)||(s=Bt({},s)),i!=null&&!Ct(i)&&(i=null);const r=Jr(),a=new WeakSet;let l=!1;const c=r.app={_uid:Jo++,_component:s,_props:i,_container:null,_context:r,_instance:null,version:xa,get config(){return r.config},set config(f){},use(f,..._){return a.has(f)||(f&&ut(f.install)?(a.add(f),f.install(c,..._)):ut(f)&&(a.add(f),f(c,..._))),c},mixin(f){return r.mixins.includes(f)||r.mixins.push(f),c},component(f,_){return _?(r.components[f]=_,c):r.components[f]},directive(f,_){return _?(r.directives[f]=_,c):r.directives[f]},mount(f,_,h){if(!l){const w=Lt(s,i);return w.appContext=r,h===!0?h="svg":h===!1&&(h=void 0),_&&e?e(w,f):t(w,f,h),l=!0,c._container=f,f.__vue_app__=c,Un(w.component)||w.component.proxy}},unmount(){l&&(t(null,c._container),delete c._container.__vue_app__)},provide(f,_){return r.provides[f]=_,c},runWithContext(f){const _=je;je=c;try{return f()}finally{je=_}}};return c}}let je=null;function Xo(t,e){if(Mt){let n=Mt.provides;const s=Mt.parent&&Mt.parent.provides;s===n&&(n=Mt.provides=Object.create(s)),n[t]=e}}function pn(t,e,n=!1){const s=Mt||jt;if(s||je){const i=s?s.parent==null?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides:je._context.provides;if(i&&t in i)return i[t];if(arguments.length>1)return n&&ut(e)?e.call(s&&s.proxy):e}}const Yr={},Xr=()=>Object.create(Yr),Qr=t=>Object.getPrototypeOf(t)===Yr;function Qo(t,e,n,s=!1){const i={},r=Xr();t.propsDefaults=Object.create(null),ti(t,e,i,r);for(const a in t.propsOptions[0])a in i||(i[a]=void 0);n?t.props=s?i:ro(i):t.type.props?t.props=i:t.props=r,t.attrs=r}function ta(t,e,n,s){const{props:i,attrs:r,vnode:{patchFlag:a}}=t,l=_t(i),[c]=t.propsOptions;let f=!1;if((s||a>0)&&!(a&16)){if(a&8){const _=t.vnode.dynamicProps;for(let h=0;h<_.length;h++){let w=_[h];if(Pn(t.emitsOptions,w))continue;const d=e[w];if(c)if(vt(r,w))d!==r[w]&&(r[w]=d,f=!0);else{const x=Pe(w);i[x]=os(c,l,x,d,t,!1)}else d!==r[w]&&(r[w]=d,f=!0)}}}else{ti(t,e,i,r)&&(f=!0);let _;for(const h in l)(!e||!vt(e,h)&&((_=Be(h))===h||!vt(e,_)))&&(c?n&&(n[h]!==void 0||n[_]!==void 0)&&(i[h]=os(c,l,h,void 0,t,!0)):delete i[h]);if(r!==l)for(const h in r)(!e||!vt(e,h))&&(delete r[h],f=!0)}f&&ee(t.attrs,"set","")}function ti(t,e,n,s){const[i,r]=t.propsOptions;let a=!1,l;if(e)for(let c in e){if(Me(c))continue;const f=e[c];let _;i&&vt(i,_=Pe(c))?!r||!r.includes(_)?n[_]=f:(l||(l={}))[_]=f:Pn(t.emitsOptions,c)||(!(c in s)||f!==s[c])&&(s[c]=f,a=!0)}if(r){const c=_t(n),f=l||bt;for(let _=0;_<r.length;_++){const h=r[_];n[h]=os(i,c,h,f[h],t,!vt(f,h))}}return a}function os(t,e,n,s,i,r){const a=t[n];if(a!=null){const l=vt(a,"default");if(l&&s===void 0){const c=a.default;if(a.type!==Function&&!a.skipFactory&&ut(c)){const{propsDefaults:f}=i;if(n in f)s=f[n];else{const _=ke(i);s=f[n]=c.call(null,e),_()}}else s=c}a[0]&&(r&&!l?s=!1:a[1]&&(s===""||s===Be(n))&&(s=!0))}return s}function ei(t,e,n=!1){const s=e.propsCache,i=s.get(t);if(i)return i;const r=t.props,a={},l=[];let c=!1;if(!ut(t)){const _=h=>{c=!0;const[w,d]=ei(h,e,!0);Bt(a,w),d&&l.push(...d)};!n&&e.mixins.length&&e.mixins.forEach(_),t.extends&&_(t.extends),t.mixins&&t.mixins.forEach(_)}if(!r&&!c)return Ct(t)&&s.set(t,Ie),Ie;if(ct(r))for(let _=0;_<r.length;_++){const h=Pe(r[_]);Js(h)&&(a[h]=bt)}else if(r)for(const _ in r){const h=Pe(_);if(Js(h)){const w=r[_],d=a[h]=ct(w)||ut(w)?{type:w}:Bt({},w);if(d){const x=Qs(Boolean,d.type),p=Qs(String,d.type);d[0]=x>-1,d[1]=p<0||x<p,(x>-1||vt(d,"default"))&&l.push(h)}}}const f=[a,l];return Ct(t)&&s.set(t,f),f}function Js(t){return t[0]!=="$"&&!Me(t)}function Ys(t){return t===null?"null":typeof t=="function"?t.name||"":typeof t=="object"&&t.constructor&&t.constructor.name||""}function Xs(t,e){return Ys(t)===Ys(e)}function Qs(t,e){return ct(e)?e.findIndex(n=>Xs(n,t)):ut(e)&&Xs(e,t)?0:-1}const ni=t=>t[0]==="_"||t==="$stable",Os=t=>ct(t)?t.map(Jt):[Jt(t)],ea=(t,e,n)=>{if(e._n)return e;const s=es((...i)=>Os(e(...i)),n);return s._c=!1,s},si=(t,e,n)=>{const s=t._ctx;for(const i in t){if(ni(i))continue;const r=t[i];if(ut(r))e[i]=ea(i,r,s);else if(r!=null){const a=Os(r);e[i]=()=>a}}},ri=(t,e)=>{const n=Os(e);t.slots.default=()=>n},na=(t,e)=>{const n=t.slots=Xr();if(t.vnode.shapeFlag&32){const s=e._;s?(Bt(n,e),gr(n,"_",s,!0)):si(e,n)}else e&&ri(t,e)},sa=(t,e,n)=>{const{vnode:s,slots:i}=t;let r=!0,a=bt;if(s.shapeFlag&32){const l=e._;l?n&&l===1?r=!1:(Bt(i,e),!n&&l===1&&delete i._):(r=!e.$stable,si(e,i)),a=e}else e&&(ri(t,e),a={default:1});if(r)for(const l in i)!ni(l)&&a[l]==null&&delete i[l]};function as(t,e,n,s,i=!1){if(ct(t)){t.forEach((w,d)=>as(w,e&&(ct(e)?e[d]:e),n,s,i));return}if(hn(s)&&!i)return;const r=s.shapeFlag&4?Un(s.component)||s.component.proxy:s.el,a=i?null:r,{i:l,r:c}=t,f=e&&e.r,_=l.refs===bt?l.refs={}:l.refs,h=l.setupState;if(f!=null&&f!==c&&(zt(f)?(_[f]=null,vt(h,f)&&(h[f]=null)):Wt(f)&&(f.value=null)),ut(c))fe(c,l,12,[a,_]);else{const w=zt(c),d=Wt(c);if(w||d){const x=()=>{if(t.f){const p=w?vt(h,c)?h[c]:_[c]:c.value;i?ct(p)&&ps(p,r):ct(p)?p.includes(r)||p.push(r):w?(_[c]=[r],vt(h,c)&&(h[c]=_[c])):(c.value=[r],t.k&&(_[t.k]=c.value))}else w?(_[c]=a,vt(h,c)&&(h[c]=a)):d&&(c.value=a,t.k&&(_[t.k]=a))};a?(x.id=-1,Nt(x,n)):x()}}}const Nt=Eo;function ra(t){return ia(t)}function ia(t,e){const n=vr();n.__VUE__=!0;const{insert:s,remove:i,patchProp:r,createElement:a,createText:l,createComment:c,setText:f,setElementText:_,parentNode:h,nextSibling:w,setScopeId:d=Vt,insertStaticContent:x}=t,p=(S,o,I,E=null,g=null,m=null,C=void 0,B=null,D=!!o.dynamicChildren)=>{if(S===o)return;S&&!ue(S,o)&&(E=yt(S),R(S,g,m,!0),S=null),o.patchFlag===-2&&(D=!1,o.dynamicChildren=null);const{type:T,ref:U,shapeFlag:G}=o;switch(T){case $n:v(S,o,I,E);break;case se:y(S,o,I,E);break;case mn:S==null&&k(o,I,E,C);break;case Dt:O(S,o,I,E,g,m,C,B,D);break;default:G&1?P(S,o,I,E,g,m,C,B,D):G&6?V(S,o,I,E,g,m,C,B,D):(G&64||G&128)&&T.process(S,o,I,E,g,m,C,B,D,N)}U!=null&&g&&as(U,S&&S.ref,m,o||S,!o)},v=(S,o,I,E)=>{if(S==null)s(o.el=l(o.children),I,E);else{const g=o.el=S.el;o.children!==S.children&&f(g,o.children)}},y=(S,o,I,E)=>{S==null?s(o.el=c(o.children||""),I,E):o.el=S.el},k=(S,o,I,E)=>{[S.el,S.anchor]=x(S.children,o,I,E,S.el,S.anchor)},A=({el:S,anchor:o},I,E)=>{let g;for(;S&&S!==o;)g=w(S),s(S,I,E),S=g;s(o,I,E)},L=({el:S,anchor:o})=>{let I;for(;S&&S!==o;)I=w(S),i(S),S=I;i(o)},P=(S,o,I,E,g,m,C,B,D)=>{o.type==="svg"?C="svg":o.type==="math"&&(C="mathml"),S==null?$(o,I,E,g,m,C,B,D):M(S,o,g,m,C,B,D)},$=(S,o,I,E,g,m,C,B)=>{let D,T;const{props:U,shapeFlag:G,transition:W,dirs:X}=S;if(D=S.el=a(S.type,m,U&&U.is,U),G&8?_(D,S.children):G&16&&q(S.children,D,null,E,g,Zn(S,m),C,B),X&&we(S,null,E,"created"),j(D,S,S.scopeId,C,E),U){for(const ot in U)ot!=="value"&&!Me(ot)&&r(D,ot,null,U[ot],m,S.children,E,g,ht);"value"in U&&r(D,"value",null,U.value,m),(T=U.onVnodeBeforeMount)&&Qt(T,E,S)}X&&we(S,null,E,"beforeMount");const it=oa(g,W);it&&W.beforeEnter(D),s(D,o,I),((T=U&&U.onVnodeMounted)||it||X)&&Nt(()=>{T&&Qt(T,E,S),it&&W.enter(D),X&&we(S,null,E,"mounted")},g)},j=(S,o,I,E,g)=>{if(I&&d(S,I),E)for(let m=0;m<E.length;m++)d(S,E[m]);if(g){let m=g.subTree;if(o===m){const C=g.vnode;j(S,C,C.scopeId,C.slotScopeIds,g.parent)}}},q=(S,o,I,E,g,m,C,B,D=0)=>{for(let T=D;T<S.length;T++){const U=S[T]=B?le(S[T]):Jt(S[T]);p(null,U,o,I,E,g,m,C,B)}},M=(S,o,I,E,g,m,C)=>{const B=o.el=S.el;let{patchFlag:D,dynamicChildren:T,dirs:U}=o;D|=S.patchFlag&16;const G=S.props||bt,W=o.props||bt;let X;if(I&&ve(I,!1),(X=W.onVnodeBeforeUpdate)&&Qt(X,I,o,S),U&&we(o,S,I,"beforeUpdate"),I&&ve(I,!0),T?J(S.dynamicChildren,T,B,I,E,Zn(o,g),m):C||tt(S,o,B,null,I,E,Zn(o,g),m,!1),D>0){if(D&16)rt(B,o,G,W,I,E,g);else if(D&2&&G.class!==W.class&&r(B,"class",null,W.class,g),D&4&&r(B,"style",G.style,W.style,g),D&8){const it=o.dynamicProps;for(let ot=0;ot<it.length;ot++){const mt=it[ot],St=G[mt],Ot=W[mt];(Ot!==St||mt==="value")&&r(B,mt,St,Ot,g,S.children,I,E,ht)}}D&1&&S.children!==o.children&&_(B,o.children)}else!C&&T==null&&rt(B,o,G,W,I,E,g);((X=W.onVnodeUpdated)||U)&&Nt(()=>{X&&Qt(X,I,o,S),U&&we(o,S,I,"updated")},E)},J=(S,o,I,E,g,m,C)=>{for(let B=0;B<o.length;B++){const D=S[B],T=o[B],U=D.el&&(D.type===Dt||!ue(D,T)||D.shapeFlag&70)?h(D.el):I;p(D,T,U,null,E,g,m,C,!0)}},rt=(S,o,I,E,g,m,C)=>{if(I!==E){if(I!==bt)for(const B in I)!Me(B)&&!(B in E)&&r(S,B,I[B],null,C,o.children,g,m,ht);for(const B in E){if(Me(B))continue;const D=E[B],T=I[B];D!==T&&B!=="value"&&r(S,B,T,D,C,o.children,g,m,ht)}"value"in E&&r(S,"value",I.value,E.value,C)}},O=(S,o,I,E,g,m,C,B,D)=>{const T=o.el=S?S.el:l(""),U=o.anchor=S?S.anchor:l("");let{patchFlag:G,dynamicChildren:W,slotScopeIds:X}=o;X&&(B=B?B.concat(X):X),S==null?(s(T,I,E),s(U,I,E),q(o.children||[],I,U,g,m,C,B,D)):G>0&&G&64&&W&&S.dynamicChildren?(J(S.dynamicChildren,W,I,g,m,C,B),(o.key!=null||g&&o===g.subTree)&&ii(S,o,!0)):tt(S,o,I,U,g,m,C,B,D)},V=(S,o,I,E,g,m,C,B,D)=>{o.slotScopeIds=B,S==null?o.shapeFlag&512?g.ctx.activate(o,I,E,C,D):u(o,I,E,g,m,C,D):K(S,o,D)},u=(S,o,I,E,g,m,C)=>{const B=S.component=ma(S,E,g);if(Kr(S)&&(B.ctx.renderer=N),wa(B),B.asyncDep){if(g&&g.registerDep(B,st),!S.el){const D=B.subTree=Lt(se);y(null,D,o,I)}}else st(B,S,o,I,g,m,C)},K=(S,o,I)=>{const E=o.component=S.component;if(_o(S,o,I))if(E.asyncDep&&!E.asyncResolved){Z(E,o,I);return}else E.next=o,ho(E.update),E.effect.dirty=!0,E.update();else o.el=S.el,E.vnode=o},st=(S,o,I,E,g,m,C)=>{const B=()=>{if(S.isMounted){let{next:U,bu:G,u:W,parent:X,vnode:it}=S;{const Kt=oi(S);if(Kt){U&&(U.el=it.el,Z(S,U,C)),Kt.asyncDep.then(()=>{S.isUnmounted||B()});return}}let ot=U,mt;ve(S,!1),U?(U.el=it.el,Z(S,U,C)):U=it,G&&dn(G),(mt=U.props&&U.props.onVnodeBeforeUpdate)&&Qt(mt,X,U,it),ve(S,!0);const St=jn(S),Ot=S.subTree;S.subTree=St,p(Ot,St,h(Ot.el),yt(Ot),S,g,m),U.el=St.el,ot===null&&Is(S,St.el),W&&Nt(W,g),(mt=U.props&&U.props.onVnodeUpdated)&&Nt(()=>Qt(mt,X,U,it),g)}else{let U;const{el:G,props:W}=o,{bm:X,m:it,parent:ot}=S,mt=hn(o);if(ve(S,!1),X&&dn(X),!mt&&(U=W&&W.onVnodeBeforeMount)&&Qt(U,ot,o),ve(S,!0),G&&H){const St=()=>{S.subTree=jn(S),H(G,S.subTree,S,g,null)};mt?o.type.__asyncLoader().then(()=>!S.isUnmounted&&St()):St()}else{const St=S.subTree=jn(S);p(null,St,I,E,S,g,m),o.el=St.el}if(it&&Nt(it,g),!mt&&(U=W&&W.onVnodeMounted)){const St=o;Nt(()=>Qt(U,ot,St),g)}(o.shapeFlag&256||ot&&hn(ot.vnode)&&ot.vnode.shapeFlag&256)&&S.a&&Nt(S.a,g),S.isMounted=!0,o=I=E=null}},D=S.effect=new ws(B,Vt,()=>Ts(T),S.scope),T=S.update=()=>{D.dirty&&D.run()};T.id=S.uid,ve(S,!0),T()},Z=(S,o,I)=>{o.component=S;const E=S.vnode.props;S.vnode=o,S.next=null,ta(S,o.props,E,I),sa(S,o.children,I),pe(),Hs(S),me()},tt=(S,o,I,E,g,m,C,B,D=!1)=>{const T=S&&S.children,U=S?S.shapeFlag:0,G=o.children,{patchFlag:W,shapeFlag:X}=o;if(W>0){if(W&128){et(T,G,I,E,g,m,C,B,D);return}else if(W&256){Y(T,G,I,E,g,m,C,B,D);return}}X&8?(U&16&&ht(T,g,m),G!==T&&_(I,G)):U&16?X&16?et(T,G,I,E,g,m,C,B,D):ht(T,g,m,!0):(U&8&&_(I,""),X&16&&q(G,I,E,g,m,C,B,D))},Y=(S,o,I,E,g,m,C,B,D)=>{S=S||Ie,o=o||Ie;const T=S.length,U=o.length,G=Math.min(T,U);let W;for(W=0;W<G;W++){const X=o[W]=D?le(o[W]):Jt(o[W]);p(S[W],X,I,null,g,m,C,B,D)}T>U?ht(S,g,m,!0,!1,G):q(o,I,E,g,m,C,B,D,G)},et=(S,o,I,E,g,m,C,B,D)=>{let T=0;const U=o.length;let G=S.length-1,W=U-1;for(;T<=G&&T<=W;){const X=S[T],it=o[T]=D?le(o[T]):Jt(o[T]);if(ue(X,it))p(X,it,I,null,g,m,C,B,D);else break;T++}for(;T<=G&&T<=W;){const X=S[G],it=o[W]=D?le(o[W]):Jt(o[W]);if(ue(X,it))p(X,it,I,null,g,m,C,B,D);else break;G--,W--}if(T>G){if(T<=W){const X=W+1,it=X<U?o[X].el:E;for(;T<=W;)p(null,o[T]=D?le(o[T]):Jt(o[T]),I,it,g,m,C,B,D),T++}}else if(T>W)for(;T<=G;)R(S[T],g,m,!0),T++;else{const X=T,it=T,ot=new Map;for(T=it;T<=W;T++){const Et=o[T]=D?le(o[T]):Jt(o[T]);Et.key!=null&&ot.set(Et.key,T)}let mt,St=0;const Ot=W-it+1;let Kt=!1,Tt=0;const Xt=new Array(Ot);for(T=0;T<Ot;T++)Xt[T]=0;for(T=X;T<=G;T++){const Et=S[T];if(St>=Ot){R(Et,g,m,!0);continue}let Zt;if(Et.key!=null)Zt=ot.get(Et.key);else for(mt=it;mt<=W;mt++)if(Xt[mt-it]===0&&ue(Et,o[mt])){Zt=mt;break}Zt===void 0?R(Et,g,m,!0):(Xt[Zt-it]=T+1,Zt>=Tt?Tt=Zt:Kt=!0,p(Et,o[Zt],I,null,g,m,C,B,D),St++)}const Te=Kt?aa(Xt):Ie;for(mt=Te.length-1,T=Ot-1;T>=0;T--){const Et=it+T,Zt=o[Et],tn=Et+1<U?o[Et+1].el:E;Xt[T]===0?p(null,Zt,I,tn,g,m,C,B,D):Kt&&(mt<0||T!==Te[mt]?F(Zt,I,tn,2):mt--)}}},F=(S,o,I,E,g=null)=>{const{el:m,type:C,transition:B,children:D,shapeFlag:T}=S;if(T&6){F(S.component.subTree,o,I,E);return}if(T&128){S.suspense.move(o,I,E);return}if(T&64){C.move(S,o,I,N);return}if(C===Dt){s(m,o,I);for(let G=0;G<D.length;G++)F(D[G],o,I,E);s(S.anchor,o,I);return}if(C===mn){A(S,o,I);return}if(E!==2&&T&1&&B)if(E===0)B.beforeEnter(m),s(m,o,I),Nt(()=>B.enter(m),g);else{const{leave:G,delayLeave:W,afterLeave:X}=B,it=()=>s(m,o,I),ot=()=>{G(m,()=>{it(),X&&X()})};W?W(m,it,ot):ot()}else s(m,o,I)},R=(S,o,I,E=!1,g=!1)=>{const{type:m,props:C,ref:B,children:D,dynamicChildren:T,shapeFlag:U,patchFlag:G,dirs:W}=S;if(B!=null&&as(B,null,I,S,!0),U&256){o.ctx.deactivate(S);return}const X=U&1&&W,it=!hn(S);let ot;if(it&&(ot=C&&C.onVnodeBeforeUnmount)&&Qt(ot,o,S),U&6)Q(S.component,I,E);else{if(U&128){S.suspense.unmount(I,E);return}X&&we(S,null,o,"beforeUnmount"),U&64?S.type.remove(S,o,I,g,N,E):T&&(m!==Dt||G>0&&G&64)?ht(T,o,I,!1,!0):(m===Dt&&G&384||!g&&U&16)&&ht(D,o,I),E&&lt(S)}(it&&(ot=C&&C.onVnodeUnmounted)||X)&&Nt(()=>{ot&&Qt(ot,o,S),X&&we(S,null,o,"unmounted")},I)},lt=S=>{const{type:o,el:I,anchor:E,transition:g}=S;if(o===Dt){nt(I,E);return}if(o===mn){L(S);return}const m=()=>{i(I),g&&!g.persisted&&g.afterLeave&&g.afterLeave()};if(S.shapeFlag&1&&g&&!g.persisted){const{leave:C,delayLeave:B}=g,D=()=>C(I,m);B?B(S.el,m,D):D()}else m()},nt=(S,o)=>{let I;for(;S!==o;)I=w(S),i(S),S=I;i(o)},Q=(S,o,I)=>{const{bum:E,scope:g,update:m,subTree:C,um:B}=S;E&&dn(E),g.stop(),m&&(m.active=!1,R(C,S,o,I)),B&&Nt(B,o),Nt(()=>{S.isUnmounted=!0},o),o&&o.pendingBranch&&!o.isUnmounted&&S.asyncDep&&!S.asyncResolved&&S.suspenseId===o.pendingId&&(o.deps--,o.deps===0&&o.resolve())},ht=(S,o,I,E=!1,g=!1,m=0)=>{for(let C=m;C<S.length;C++)R(S[C],o,I,E,g)},yt=S=>S.shapeFlag&6?yt(S.component.subTree):S.shapeFlag&128?S.suspense.next():w(S.anchor||S.el);let dt=!1;const pt=(S,o,I)=>{S==null?o._vnode&&R(o._vnode,null,null,!0):p(o._vnode||null,S,o,null,null,null,I),dt||(dt=!0,Hs(),Fr(),dt=!1),o._vnode=S},N={p,um:R,m:F,r:lt,mt:u,mc:q,pc:tt,pbc:J,n:yt,o:t};let z,H;return e&&([z,H]=e(N)),{render:pt,hydrate:z,createApp:Yo(pt,z)}}function Zn({type:t,props:e},n){return n==="svg"&&t==="foreignObject"||n==="mathml"&&t==="annotation-xml"&&e&&e.encoding&&e.encoding.includes("html")?void 0:n}function ve({effect:t,update:e},n){t.allowRecurse=e.allowRecurse=n}function oa(t,e){return(!t||t&&!t.pendingBranch)&&e&&!e.persisted}function ii(t,e,n=!1){const s=t.children,i=e.children;if(ct(s)&&ct(i))for(let r=0;r<s.length;r++){const a=s[r];let l=i[r];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=i[r]=le(i[r]),l.el=a.el),n||ii(a,l)),l.type===$n&&(l.el=a.el)}}function aa(t){const e=t.slice(),n=[0];let s,i,r,a,l;const c=t.length;for(s=0;s<c;s++){const f=t[s];if(f!==0){if(i=n[n.length-1],t[i]<f){e[s]=i,n.push(s);continue}for(r=0,a=n.length-1;r<a;)l=r+a>>1,t[n[l]]<f?r=l+1:a=l;f<t[n[r]]&&(r>0&&(e[s]=n[r-1]),n[r]=s)}}for(r=n.length,a=n[r-1];r-- >0;)n[r]=a,a=e[a];return n}function oi(t){const e=t.subTree.component;if(e)return e.asyncDep&&!e.asyncResolved?e:oi(e)}const la=t=>t.__isTeleport,Dt=Symbol.for("v-fgt"),$n=Symbol.for("v-txt"),se=Symbol.for("v-cmt"),mn=Symbol.for("v-stc"),He=[];let Gt=null;function gt(t=!1){He.push(Gt=t?null:[])}function ai(){He.pop(),Gt=He[He.length-1]||null}let ze=1;function tr(t){ze+=t}function li(t){return t.dynamicChildren=ze>0?Gt||Ie:null,ai(),ze>0&&Gt&&Gt.push(t),t}function wt(t,e,n,s,i,r){return li(b(t,e,n,s,i,r,!0))}function ci(t,e,n,s,i){return li(Lt(t,e,n,s,i,!0))}function ui(t){return t?t.__v_isVNode===!0:!1}function ue(t,e){return t.type===e.type&&t.key===e.key}const di=({key:t})=>t??null,gn=({ref:t,ref_key:e,ref_for:n})=>(typeof t=="number"&&(t=""+t),t!=null?zt(t)||Wt(t)||ut(t)?{i:jt,r:t,k:e,f:!!n}:t:null);function b(t,e=null,n=null,s=0,i=null,r=t===Dt?0:1,a=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:t,props:e,key:e&&di(e),ref:e&&gn(e),scopeId:zn,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:s,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:jt};return l?(Ps(c,n),r&128&&t.normalize(c)):n&&(c.shapeFlag|=zt(n)?8:16),ze>0&&!a&&Gt&&(c.patchFlag>0||r&6)&&c.patchFlag!==32&&Gt.push(c),c}const Lt=ca;function ca(t,e=null,n=null,s=0,i=null,r=!1){if((!t||t===yo)&&(t=se),ui(t)){const l=Le(t,e,!0);return n&&Ps(l,n),ze>0&&!r&&Gt&&(l.shapeFlag&6?Gt[Gt.indexOf(t)]=l:Gt.push(l)),l.patchFlag|=-2,l}if(ba(t)&&(t=t.__vccOpts),e){e=ua(e);let{class:l,style:c}=e;l&&!zt(l)&&(e.class=At(l)),Ct(c)&&(Lr(c)&&!ct(c)&&(c=Bt({},c)),e.style=Je(c))}const a=zt(t)?1:bo(t)?128:la(t)?64:Ct(t)?4:ut(t)?2:0;return b(t,e,n,s,i,a,r,!0)}function ua(t){return t?Lr(t)||Qr(t)?Bt({},t):t:null}function Le(t,e,n=!1,s=!1){const{props:i,ref:r,patchFlag:a,children:l,transition:c}=t,f=e?fa(i||{},e):i,_={__v_isVNode:!0,__v_skip:!0,type:t.type,props:f,key:f&&di(f),ref:e&&e.ref?n&&r?ct(r)?r.concat(gn(e)):[r,gn(e)]:gn(e):r,scopeId:t.scopeId,slotScopeIds:t.slotScopeIds,children:l,target:t.target,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==Dt?a===-1?16:a|16:a,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:c,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&Le(t.ssContent),ssFallback:t.ssFallback&&Le(t.ssFallback),el:t.el,anchor:t.anchor,ctx:t.ctx,ce:t.ce};return c&&s&&(_.transition=c.clone(_)),_}function $t(t=" ",e=0){return Lt($n,null,t,e)}function da(t,e){const n=Lt(mn,null,t);return n.staticCount=e,n}function Qe(t="",e=!1){return e?(gt(),ci(se,null,t)):Lt(se,null,t)}function Jt(t){return t==null||typeof t=="boolean"?Lt(se):ct(t)?Lt(Dt,null,t.slice()):typeof t=="object"?le(t):Lt($n,null,String(t))}function le(t){return t.el===null&&t.patchFlag!==-1||t.memo?t:Le(t)}function Ps(t,e){let n=0;const{shapeFlag:s}=t;if(e==null)e=null;else if(ct(e))n=16;else if(typeof e=="object")if(s&65){const i=e.default;i&&(i._c&&(i._d=!1),Ps(t,i()),i._c&&(i._d=!0));return}else{n=32;const i=e._;!i&&!Qr(e)?e._ctx=jt:i===3&&jt&&(jt.slots._===1?e._=1:(e._=2,t.patchFlag|=1024))}else ut(e)?(e={default:e,_ctx:jt},n=32):(e=String(e),s&64?(n=16,e=[$t(e)]):n=8);t.children=e,t.shapeFlag|=n}function fa(...t){const e={};for(let n=0;n<t.length;n++){const s=t[n];for(const i in s)if(i==="class")e.class!==s.class&&(e.class=At([e.class,s.class]));else if(i==="style")e.style=Je([e.style,s.style]);else if(Tn(i)){const r=e[i],a=s[i];a&&r!==a&&!(ct(r)&&r.includes(a))&&(e[i]=r?[].concat(r,a):a)}else i!==""&&(e[i]=s[i])}return e}function Qt(t,e,n,s=null){Yt(t,e,7,[n,s])}const ha=Jr();let pa=0;function ma(t,e,n){const s=t.type,i=(e?e.appContext:t.appContext)||ha,r={uid:pa++,vnode:t,type:s,parent:e,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,scope:new $i(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:ei(s,i),emitsOptions:jr(s,i),emit:null,emitted:null,propsDefaults:bt,inheritAttrs:s.inheritAttrs,ctx:bt,data:bt,props:bt,attrs:bt,slots:bt,refs:bt,setupState:bt,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return r.ctx={_:r},r.root=e?e.root:r,r.emit=mo.bind(null,r),t.ce&&t.ce(r),r}let Mt=null;const ga=()=>Mt||jt;let xn,ls;{const t=vr(),e=(n,s)=>{let i;return(i=t[n])||(i=t[n]=[]),i.push(s),r=>{i.length>1?i.forEach(a=>a(r)):i[0](r)}};xn=e("__VUE_INSTANCE_SETTERS__",n=>Mt=n),ls=e("__VUE_SSR_SETTERS__",n=>Rn=n)}const ke=t=>{const e=Mt;return xn(t),t.scope.on(),()=>{t.scope.off(),xn(e)}},cs=()=>{Mt&&Mt.scope.off(),xn(null)};function fi(t){return t.vnode.shapeFlag&4}let Rn=!1;function wa(t,e=!1){e&&ls(e);const{props:n,children:s}=t.vnode,i=fi(t);Qo(t,n,i,e),na(t,s);const r=i?va(t,e):void 0;return e&&ls(!1),r}function va(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=new Proxy(t.ctx,Wo);const{setup:s}=n;if(s){const i=t.setupContext=s.length>1?ya(t):null,r=ke(t);pe();const a=fe(s,t,0,[t.props,i]);if(me(),r(),ms(a)){if(a.then(cs,cs),e)return a.then(l=>{us(t,l,e)}).catch(l=>{Ye(l,t,0)});t.asyncDep=a}else us(t,a,e)}else hi(t,e)}function us(t,e,n){ut(e)?t.type.__ssrInlineRender?t.ssrRender=e:t.render=e:Ct(e)&&(t.setupState=$r(e)),hi(t,n)}let er;function hi(t,e,n){const s=t.type;if(!t.render){if(!e&&er&&!s.render){const i=s.template||As(t).template;if(i){const{isCustomElement:r,compilerOptions:a}=t.appContext.config,{delimiters:l,compilerOptions:c}=s,f=Bt(Bt({isCustomElement:r,delimiters:l},a),c);s.render=er(i,f)}}t.render=s.render||Vt}{const i=ke(t);pe();try{Zo(t)}finally{me(),i()}}}const _a={get(t,e){return Ht(t,"get",""),t[e]}};function ya(t){const e=n=>{t.exposed=n||{}};return{attrs:new Proxy(t.attrs,_a),slots:t.slots,emit:t.emit,expose:e}}function Un(t){if(t.exposed)return t.exposeProxy||(t.exposeProxy=new Proxy($r(io(t.exposed)),{get(e,n){if(n in e)return e[n];if(n in Ne)return Ne[n](t)},has(e,n){return n in e||n in Ne}}))}function ba(t){return ut(t)&&"__vccOpts"in t}const Pt=(t,e)=>oo(t,e,Rn),xa="3.4.27";/**
* @vue/runtime-dom v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const ka="http://www.w3.org/2000/svg",Ca="http://www.w3.org/1998/Math/MathML",ce=typeof document<"u"?document:null,nr=ce&&ce.createElement("template"),Sa={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,s)=>{const i=e==="svg"?ce.createElementNS(ka,t):e==="mathml"?ce.createElementNS(Ca,t):ce.createElement(t,n?{is:n}:void 0);return t==="select"&&s&&s.multiple!=null&&i.setAttribute("multiple",s.multiple),i},createText:t=>ce.createTextNode(t),createComment:t=>ce.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>ce.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},insertStaticContent(t,e,n,s,i,r){const a=n?n.previousSibling:e.lastChild;if(i&&(i===r||i.nextSibling))for(;e.insertBefore(i.cloneNode(!0),n),!(i===r||!(i=i.nextSibling)););else{nr.innerHTML=s==="svg"?`<svg>${t}</svg>`:s==="mathml"?`<math>${t}</math>`:t;const l=nr.content;if(s==="svg"||s==="mathml"){const c=l.firstChild;for(;c.firstChild;)l.appendChild(c.firstChild);l.removeChild(c)}e.insertBefore(l,n)}return[a?a.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}},Ta=Symbol("_vtc");function Ia(t,e,n){const s=t[Ta];s&&(e=(e?[e,...s]:[...s]).join(" ")),e==null?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}const kn=Symbol("_vod"),pi=Symbol("_vsh"),It={beforeMount(t,{value:e},{transition:n}){t[kn]=t.style.display==="none"?"":t.style.display,n&&e?n.beforeEnter(t):Re(t,e)},mounted(t,{value:e},{transition:n}){n&&e&&n.enter(t)},updated(t,{value:e,oldValue:n},{transition:s}){!e!=!n&&(s?e?(s.beforeEnter(t),Re(t,!0),s.enter(t)):s.leave(t,()=>{Re(t,!1)}):Re(t,e))},beforeUnmount(t,{value:e}){Re(t,e)}};function Re(t,e){t.style.display=e?t[kn]:"none",t[pi]=!e}const Ea=Symbol(""),Aa=/(^|;)\s*display\s*:/;function Oa(t,e,n){const s=t.style,i=zt(n);let r=!1;if(n&&!i){if(e)if(zt(e))for(const a of e.split(";")){const l=a.slice(0,a.indexOf(":")).trim();n[l]==null&&wn(s,l,"")}else for(const a in e)n[a]==null&&wn(s,a,"");for(const a in n)a==="display"&&(r=!0),wn(s,a,n[a])}else if(i){if(e!==n){const a=s[Ea];a&&(n+=";"+a),s.cssText=n,r=Aa.test(n)}}else e&&t.removeAttribute("style");kn in t&&(t[kn]=r?s.display:"",t[pi]&&(s.display="none"))}const sr=/\s*!important$/;function wn(t,e,n){if(ct(n))n.forEach(s=>wn(t,e,s));else if(n==null&&(n=""),e.startsWith("--"))t.setProperty(e,n);else{const s=Pa(t,e);sr.test(n)?t.setProperty(Be(s),n.replace(sr,""),"important"):t[s]=n}}const rr=["Webkit","Moz","ms"],Vn={};function Pa(t,e){const n=Vn[e];if(n)return n;let s=Pe(e);if(s!=="filter"&&s in t)return Vn[e]=s;s=mr(s);for(let i=0;i<rr.length;i++){const r=rr[i]+s;if(r in t)return Vn[e]=r}return e}const ir="http://www.w3.org/1999/xlink";function za(t,e,n,s,i){if(s&&e.startsWith("xlink:"))n==null?t.removeAttributeNS(ir,e.slice(6,e.length)):t.setAttributeNS(ir,e,n);else{const r=Li(e);n==null||r&&!_r(n)?t.removeAttribute(e):t.setAttribute(e,r?"":n)}}function La(t,e,n,s,i,r,a){if(e==="innerHTML"||e==="textContent"){s&&a(s,i,r),t[e]=n??"";return}const l=t.tagName;if(e==="value"&&l!=="PROGRESS"&&!l.includes("-")){const f=l==="OPTION"?t.getAttribute("value")||"":t.value,_=n??"";(f!==_||!("_value"in t))&&(t.value=_),n==null&&t.removeAttribute(e),t._value=n;return}let c=!1;if(n===""||n==null){const f=typeof t[e];f==="boolean"?n=_r(n):n==null&&f==="string"?(n="",c=!0):f==="number"&&(n=0,c=!0)}try{t[e]=n}catch{}c&&t.removeAttribute(e)}function mi(t,e,n,s){t.addEventListener(e,n,s)}function Ba(t,e,n,s){t.removeEventListener(e,n,s)}const or=Symbol("_vei");function Da(t,e,n,s,i=null){const r=t[or]||(t[or]={}),a=r[e];if(s&&a)a.value=s;else{const[l,c]=$a(e);if(s){const f=r[e]=Ma(s,i);mi(t,l,f,c)}else a&&(Ba(t,l,a,c),r[e]=void 0)}}const ar=/(?:Once|Passive|Capture)$/;function $a(t){let e;if(ar.test(t)){e={};let s;for(;s=t.match(ar);)t=t.slice(0,t.length-s[0].length),e[s[0].toLowerCase()]=!0}return[t[2]===":"?t.slice(3):Be(t.slice(2)),e]}let Kn=0;const Ra=Promise.resolve(),Ua=()=>Kn||(Ra.then(()=>Kn=0),Kn=Date.now());function Ma(t,e){const n=s=>{if(!s._vts)s._vts=Date.now();else if(s._vts<=n.attached)return;Yt(Fa(s,n.value),e,5,[s])};return n.value=t,n.attached=Ua(),n}function Fa(t,e){if(ct(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map(s=>i=>!i._stopped&&s&&s(i))}else return e}const lr=t=>t.charCodeAt(0)===111&&t.charCodeAt(1)===110&&t.charCodeAt(2)>96&&t.charCodeAt(2)<123,Na=(t,e,n,s,i,r,a,l,c)=>{const f=i==="svg";e==="class"?Ia(t,s,f):e==="style"?Oa(t,n,s):Tn(e)?hs(e)||Da(t,e,n,s,a):(e[0]==="."?(e=e.slice(1),!0):e[0]==="^"?(e=e.slice(1),!1):ja(t,e,s,f))?La(t,e,s,r,a,l,c):(e==="true-value"?t._trueValue=s:e==="false-value"&&(t._falseValue=s),za(t,e,s,f))};function ja(t,e,n,s){if(s)return!!(e==="innerHTML"||e==="textContent"||e in t&&lr(e)&&ut(n));if(e==="spellcheck"||e==="draggable"||e==="translate"||e==="form"||e==="list"&&t.tagName==="INPUT"||e==="type"&&t.tagName==="TEXTAREA")return!1;if(e==="width"||e==="height"){const i=t.tagName;if(i==="IMG"||i==="VIDEO"||i==="CANVAS"||i==="SOURCE")return!1}return lr(e)&&zt(n)?!1:e in t}const cr=t=>{const e=t.props["onUpdate:modelValue"]||!1;return ct(e)?n=>dn(e,n):e},Gn=Symbol("_assign"),Ha={deep:!0,created(t,{value:e,modifiers:{number:n}},s){const i=In(e);mi(t,"change",()=>{const r=Array.prototype.filter.call(t.options,a=>a.selected).map(a=>n?wr(Cn(a)):Cn(a));t[Gn](t.multiple?i?new Set(r):r:r[0]),t._assigning=!0,Ur(()=>{t._assigning=!1})}),t[Gn]=cr(s)},mounted(t,{value:e,modifiers:{number:n}}){ur(t,e)},beforeUpdate(t,e,n){t[Gn]=cr(n)},updated(t,{value:e,modifiers:{number:n}}){t._assigning||ur(t,e)}};function ur(t,e,n){const s=t.multiple,i=ct(e);if(!(s&&!i&&!In(e))){for(let r=0,a=t.options.length;r<a;r++){const l=t.options[r],c=Cn(l);if(s)if(i){const f=typeof c;f==="string"||f==="number"?l.selected=e.some(_=>String(_)===String(c)):l.selected=Di(e,c)>-1}else l.selected=e.has(c);else if(An(Cn(l),e)){t.selectedIndex!==r&&(t.selectedIndex=r);return}}!s&&t.selectedIndex!==-1&&(t.selectedIndex=-1)}}function Cn(t){return"_value"in t?t._value:t.value}const Wa=["ctrl","shift","alt","meta"],Za={stop:t=>t.stopPropagation(),prevent:t=>t.preventDefault(),self:t=>t.target!==t.currentTarget,ctrl:t=>!t.ctrlKey,shift:t=>!t.shiftKey,alt:t=>!t.altKey,meta:t=>!t.metaKey,left:t=>"button"in t&&t.button!==0,middle:t=>"button"in t&&t.button!==1,right:t=>"button"in t&&t.button!==2,exact:(t,e)=>Wa.some(n=>t[`${n}Key`]&&!e.includes(n))},Mn=(t,e)=>{const n=t._withMods||(t._withMods={}),s=e.join(".");return n[s]||(n[s]=(i,...r)=>{for(let a=0;a<e.length;a++){const l=Za[e[a]];if(l&&l(i,e))return}return t(i,...r)})},Va=Bt({patchProp:Na},Sa);let dr;function Ka(){return dr||(dr=ra(Va))}const Ga=(...t)=>{const e=Ka().createApp(...t),{mount:n}=e;return e.mount=s=>{const i=Ja(s);if(!i)return;const r=e._component;!ut(r)&&!r.render&&!r.template&&(r.template=i.innerHTML),i.innerHTML="";const a=n(i,!1,qa(i));return i instanceof Element&&(i.removeAttribute("v-cloak"),i.setAttribute("data-v-app","")),a},e};function qa(t){if(t instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&t instanceof MathMLElement)return"mathml"}function Ja(t){return zt(t)?document.querySelector(t):t}const Ya={class:"relative flex flex-wrap justify-center w-full gap-2"},Xa={class:"relative flex flex-wrap justify-center w-full gap-2"},Qa=["onClick"],tl=ge({__name:"Toolbar",props:{pluginList:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t,n=ft(!1),s=Pt(()=>{let a=[];return Array.isArray(e.pluginList)&&e.pluginList.forEach(l=>{if(l.tags&&typeof l.tags=="string"){let c=l.tags.split(",").map(f=>f.trim());c=c.filter(f=>f!==""),c.length>0&&a.push(c[0])}}),a}),i=Pt(()=>Array.from(new Set(s.value))),r=()=>{n.value=!n.value};return(a,l)=>(gt(),wt("div",Ya,[b("button",{class:At(["inline-flex items-center border-2 shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",a.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:l[0]||(l[0]=c=>a.$emit("update-active-category","all"))}," All ",2),b("button",{class:"inline-flex w-full items-center shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",onClick:r}," 按分类筛选 ⇣ "),xt(b("div",Xa,[(gt(!0),wt(Dt,null,Dn(i.value,c=>(gt(),wt("div",{class:"plugin-item",key:c},[b("button",{class:At(["h-6 inline-flex items-center border-2 shadow-md justify-center flex-1 px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",a.activeCategory===c?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{a.$emit("update-active-category",c)}},kt(c),11,Qa)]))),128))],512),[[It,n.value]])]))}}),Ce=t=>(Hr("data-v-ca352705"),t=t(),Wr(),t),el={class:"relative"},nl={class:"flex flex-col items-start h-full gap-4 p-6"},sl={class:"relative w-full space-y-2"},rl={class:"relative"},il={class:"absolute z-1 top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},ol={tooltip:"官方商城插件",class:"text-white absolute right-2 top-2 z-10"},al=Ce(()=>b("svg",{class:"fill-current w-5 h-5",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 48 48","data-v-fc8a1590":"","data-icon":"arcticons:obsidian"},[b("path",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round",d:"M17.133 40.912c3.155-6.394 3.071-10.982 1.722-14.24c-1.229-3.014-3.527-4.913-5.333-6.095a2.3 2.3 0 0 1-.167.503L9.11 30.526c-.44.975-.237 2.12.512 2.885l6.784 6.98c.214.213.466.39.726.52Zm8.581-12.973c.847.083 1.675.27 2.494.567c2.587.968 4.942 3.146 6.887 7.343c.14-.242.279-.474.428-.698a114 114 0 0 0 3.415-5.388a1.3 1.3 0 0 0-.093-1.461a28.2 28.2 0 0 1-3.322-5.445c-.894-2.14-1.024-5.481-1.033-7.1c0-.615-.196-1.22-.577-1.704l-6.747-8.561l-.112-.14c.493 1.629.465 2.931.158 4.113c-.28 1.099-.8 2.094-1.35 3.146c-.185.354-.372.717-.548 1.089a13 13 0 0 0-1.47 5.398c-.094 2.252.362 5.072 1.86 8.84z"}),b("path",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round",d:"M25.704 27.939c-1.498-3.77-1.954-6.59-1.86-8.841c.092-2.234.744-3.91 1.47-5.398l.558-1.09c.54-1.05 1.052-2.047 1.34-3.145a7.3 7.3 0 0 0-.158-4.113a2.606 2.606 0 0 0-3.667-.186l-8.022 7.212c-.45.403-.746.949-.838 1.545L13.55 20.4c0 .065-.019.121-.028.186c1.806 1.173 4.095 3.072 5.333 6.078c.242.595.447 1.219.595 1.898a18.6 18.6 0 0 1 6.254-.633z"}),b("path",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round",d:"M29.91 43.406c1.732.475 3.472-.912 3.714-2.699c.198-1.695.7-3.34 1.48-4.858c-1.954-4.197-4.309-6.375-6.887-7.343c-2.745-1.023-5.733-.68-8.767.056c.68 3.08.28 7.11-2.308 12.35c.289.149.615.232.94.26l4.086.307c2.215.159 5.519 1.303 7.743 1.927Z"})],-1)),ll=[al],cl={tooltip:"社区专供插件",class:"absolute right-2 top-2 z-10"},ul=Ce(()=>b("svg",{class:"fill-current w-5 h-5",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs",viewBox:"0 0 512 512","xml:space":"preserve"},[b("g",null,[b("path",{d:"M395.631 98.837C358.783 45.867 309.195 16.696 256 16.696S153.217 45.867 116.369 98.837c-35.565 51.124-55.151 118.797-55.151 190.554 0 113.54 87.379 205.913 194.783 205.913s194.783-92.373 194.783-205.913c-.001-71.756-19.588-139.43-55.153-190.554z",style:{},fill:"#ffc170",class:""}),b("path",{d:"M256 495.304c107.403 0 194.783-92.373 194.783-205.913 0-71.757-19.586-139.43-55.151-190.554C358.783 45.867 309.195 16.696 256 16.696",style:{},fill:"#e1a05a","data-original":"#ffd6a0",class:""}),b("path",{d:"M0 128h55.652v33.391H0z",style:{},fill:"#a0bdd4",class:""}),b("path",{d:"M13.053 51.94h55.65v33.391h-55.65z",style:{},transform:"rotate(-160.527 40.878 68.636)",fill:"#a0bdd4",class:""}),b("path",{d:"M456.348 128H512v33.391h-55.652z",style:{},fill:"#a0bdd4",class:""}),b("path",{d:"M454.411 40.807h33.391v55.65h-33.391z",style:{},transform:"rotate(-109.469 471.111 68.636)",fill:"#a0bdd4",class:""}),b("path",{d:"m187.719 277.315 14.949-29.896-47.598-21.154-93.659 51.085c-.124 4-.194 8.013-.194 12.041 0 8.564.505 17.005 1.471 25.298l93.892-51.214 31.139 13.84zM450.63 278.997l-105.587-52.794-89.463 44.731-22.369-9.942-14.948 29.896 38.155 16.958 88.625-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228c.001-3.476-.059-6.938-.152-10.394z",style:{},fill:"#f8f8f8",class:""}),b("path",{d:"m450.63 278.997-105.587-52.794-89.463 44.731.839 36.913 88.624-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228 382.07 382.07 0 0 0-.152-10.395z",style:{},fill:"#fef5ea",class:""})])],-1)),dl=[ul],fl=["data-name"],hl=["data-name","alt","src"],pl=["src"],ml={class:"relative flex items-center h-10 overflow-hidden plugin_name"},gl={"data-pagefind-meta":"title",class:"flex items-center text-lg font-medium leading-6 plugin_name font-heading text-muted-800 dark:text-white"},wl=["href"],vl={class:"-mt-2 ml-2 px-2 rounded text-muted-100 bg-green-600 text-xs"},_l={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},yl=Ce(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[b("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),bl={class:"flex flex-wrap items-center leading-6 text-muted-600 dark:text-muted-400"},xl=["src"],kl=["src"],Cl=["href"],Sl=Ce(()=>b("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),Tl=[Sl],Il=["href"],El=Ce(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 32 32","data-v-5df2a037":"","data-icon":"la:readme",class:"text-green-500 block mx-auto iconify w-6 h-6 iconify--la"},[b("path",{fill:"currentColor",d:"M5 6C3.346 6 2 7.346 2 9v12c0 1.654 1.346 3 3 3l6.184-.02c.99 0 1.949.31 2.773.86L16 26.2l2.043-1.361a4.988 4.988 0 0 1 2.773-.84H27c1.654 0 3-1.346 3-3V9c0-1.654-1.346-3-3-3h-6.184c-1.386 0-2.73.408-3.882 1.176L16 7.799l-.934-.623A6.978 6.978 0 0 0 11.184 6H5zm0 2h6.184c.99 0 1.949.29 2.773.84L16 10.2l2.043-1.361A4.988 4.988 0 0 1 20.816 8H27c.552 0 1 .449 1 1v12c0 .551-.448 1-1 1h-6.184c-1.386 0-2.73.408-3.882 1.176l-.934.623l-.934-.623A6.978 6.978 0 0 0 11.184 22H5c-.552 0-1-.449-1-1V9c0-.551.448-1 1-1zm1 4v2h8v-2H6zm12 0v2h8v-2h-8zM6 16v2h8v-2H6zm12 0v2h8v-2h-8z"})],-1)),Al=[El],Ol={class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},Pl={class:"w-full mt-auto space-y-6"},zl={class:"relative flex items-center justify-start w-full"},Ll=["src","onerror"],Bl=["href"],Dl={class:"pl-2"},$l=["tooltip"],Rl={class:"font-sans text-sm text-muted-400"},Ul={class:"block ml-auto font-sans text-sm text-muted-400"},Ml=Ce(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[b("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),b("polyline",{points:"7 10 12 15 17 10"}),b("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),Fl=Ce(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[b("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),Nl=["tooltip"],jl={xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Hl=["fill"],Wl=ge({__name:"PluginCard",props:{app:{},pluginInfo:{},isLogin:{type:Boolean}},emits:["download-update-plugin"],setup(t){const e=t,n=e.isLogin,s=ft(!1),i=ft(""),r=ft("rgba(255, 51, 68, 0.8)");function a(){return e.pluginInfo.authorAvatar&&e.pluginInfo.authorAvatar.length>0?e.pluginInfo.authorAvatar:d(e.pluginInfo.author)}let l=[];e.pluginInfo.tags&&e.pluginInfo.tags.length>0&&(l=e.pluginInfo.tags.split(","));function c(v){return v>=1e6?(v/1e6).toFixed(0)+"M":v>=1e3?(v/1e3).toFixed(0)+"K":v.toString()}function f(v){if(v){const y=new Date(v),k=new Date,A=24*60*60*1e3,L=Math.round(Math.abs((k.getTime()-y.getTime())/A)),P=Math.round(L/30),$=Math.round(L/365);return L<=30?`${L}天前`:P<=12?`${P}月前`:`${$}年前`}else return"未知"}const _=()=>i.value=="未启用"?"当前插件未启用，点击启用":i.value=="已启用"?"当前插件已启动，点击禁用":"未成功启用。请查看控制台错误信息。",h=async v=>{i.value=="已启用"?(await e.app.plugins.disablePluginAndSave(v),i.value="未启用",r.value="rgba(255, 51, 68, 0.8)"):await e.app.plugins.enablePluginAndSave(v)?(i.value="已启用",r.value="#2aa330"):i.value="未成功"};Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)!=-1&&e.pluginInfo.isInstalled&&(i.value="已启用",r.value="#2aa330"),Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)==-1&&e.pluginInfo.isInstalled&&(i.value="未启用",r.value="rgba(255, 51, 68, 0.8)");function w(v){return(v.match(/\b\w/g)||[]).join("").toUpperCase()}function d(v){let y="";if(v){const k=w(v);/^[a-zA-Z]+$/.test(k)?y=`https://dummyimage.com/100x100/555/fff&text=${k.toUpperCase()}`:y=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(k)}`}else y="https://cdn.pkmer.cn/covers/logo.png!nomark";return y}const x=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,p=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(v,y)=>(gt(),wt("div",el,[b("div",nl,[b("div",sl,[b("div",rl,[b("span",il,kt(Rt(l)[0]),1),xt(b("view",ol,ll,512),[[It,v.pluginInfo.source=="official"]]),xt(b("view",cl,dl,512),[[It,v.pluginInfo.source=="community"]]),b("span",{"data-name":v.pluginInfo.banner?"":v.pluginInfo.name,class:"noimg h-40 md:h-52",style:Je(x())},[b("img",{"data-name":v.pluginInfo.name,alt:v.pluginInfo.name,class:"border-0 absolute rounded-lg w-[200px] md:w-[300px] max-h-[148px] object-contain cursor-pointer",width:"348",height:"208",src:v.pluginInfo.banner?v.pluginInfo.banner.replace("!pkmer","!nomark"):"",loading:"lazy",decoding:"async",onClick:y[0]||(y[0]=k=>s.value=!0)},null,8,hl)],12,fl),s.value?(gt(),wt("div",{key:0,class:"overlay",onClick:y[2]||(y[2]=k=>s.value=!1)},[b("img",{src:v.pluginInfo.banner?.replace("!nomark","!pkmer").replace("gif!pkmer","gif"),alt:"原图",onClick:y[1]||(y[1]=Mn(()=>{},["stop"]))},null,8,pl)])):Qe("",!0)]),b("div",ml,[b("h3",gl,[b("a",{href:v.pluginInfo.contentUrl?v.pluginInfo.contentUrl:v.pluginInfo.readme_zh?v.pluginInfo.readme_zh:"#"},kt(v.pluginInfo.name),9,wl),b("span",vl,kt(v.pluginInfo.version),1),b("span",_l,kt(c(v.pluginInfo.pkmerDownloadCount)),1),yl])]),b("p",bl,[b("img",{class:"h-full",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${v.pluginInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,xl),b("img",{class:"h-full ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${c(v.pluginInfo.downloadCount)}-yellow`},null,8,kl),xt(b("a",{class:"ml-2",href:v.pluginInfo.contentUrl?v.pluginInfo.contentUrl:"javascript:void(0)"},Tl,8,Cl),[[It,v.pluginInfo.contentUrl]]),xt(b("a",{class:"ml-2",href:v.pluginInfo.readme_zh?v.pluginInfo.readme_zh:"javascript:void(0)",tooltip:"Readme文档"},Al,8,Il),[[It,v.pluginInfo.readme_zh]])]),b("p",Ol,kt(v.pluginInfo.chineseDescription?.replace("【机翻】","")||v.pluginInfo.description),1)]),b("div",Pl,[b("div",zl,[b("img",{class:"w-12 mask mask-blob",src:a(),onerror:`javascript:this.src='${d(v.pluginInfo.author)}'`,alt:"avatar"},null,8,Ll),b("a",{href:"https://github.com/"+v.pluginInfo.repo},[b("div",Dl,[b("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:v.pluginInfo.author},kt(v.pluginInfo.author),9,$l),b("p",Rl,kt(f(v.pluginInfo.pluginUpdatedTime)),1)])],8,Bl),b("div",Ul,[xt(b("button",{onClick:p,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[It,!Rt(n)]]),xt(b("div",null,[v.pluginInfo.isInstalled?v.pluginInfo.isInstalled&&v.pluginInfo.isOutdated?(gt(),wt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:y[4]||(y[4]=k=>v.$emit("download-update-plugin","update",v.pluginInfo.id,v.pluginInfo.version,v.pluginInfo.source))},[Fl,$t(" 更新 ")])):(gt(),wt("button",{key:2,onClick:y[5]||(y[5]=k=>h(v.pluginInfo.id)),tooltip:_(),class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[(gt(),wt("svg",jl,[b("path",{fill:r.value,d:"M8 4c.367 0 .721.048 1.063.145a3.943 3.943 0 0 1 1.762 1.031a3.944 3.944 0 0 1 1.03 1.762c.097.34.145.695.145 1.062c0 .367-.048.721-.145 1.063a3.94 3.94 0 0 1-1.03 1.765a4.017 4.017 0 0 1-1.762 1.031C8.72 11.953 8.367 12 8 12s-.721-.047-1.063-.14a4.056 4.056 0 0 1-1.765-1.032A4.055 4.055 0 0 1 4.14 9.062A3.992 3.992 0 0 1 4 8c0-.367.047-.721.14-1.063a4.02 4.02 0 0 1 .407-.953A4.089 4.089 0 0 1 5.98 4.546a3.94 3.94 0 0 1 .957-.401A3.89 3.89 0 0 1 8 4z"},null,8,Hl)])),$t(" 已安装 ")],8,Nl)):xt((gt(),wt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:y[3]||(y[3]=k=>v.$emit("download-update-plugin","download",v.pluginInfo.id,v.pluginInfo.version,v.pluginInfo.source))},[Ml,$t(" 下载 ")],512)),[[It,Rt(n)]])],512),[[It,Rt(n)]])])])])])]))}});const gi=(t,e)=>{const n=t.__vccOpts||t;for(const[s,i]of e)n[s]=i;return n},Zl=gi(Wl,[["__scopeId","data-v-ca352705"]]),oe="https://api.pkmer.cn/api/v1/download/obsidian";class Se{token;constructor(e){this.token=e}fetchWithToken(e,n){return fetch(e,{...n,headers:{Authorization:"Bearer "+this.token}})}isTokenExpired(e){return Math.floor(Date.now()/1e3)>e.exp}async isUserLogin(){const e=this.token;if(e){const n=e.split("."),s=JSON.parse(decodeURIComponent(escape(window.atob(n[1].replace(/-/g,"+").replace(/_/g,"/")))));return this.isTokenExpired(s)?(console.log("Pkmer Token has expired. Please log in again to get a new token."),!1):!0}else return!1}async getPkmerDocs(){const e=await at.requestUrl("https://pkmer.cn/getPost.json");return JSON.parse(e.text).map(s=>({slug:s.slug.split("/").pop(),uid:s.uid,authorAvatar:s.authorAvatar,description:s.description,tags:Array.isArray(s.tags)?s.tags.join(", "):s.tags}))}async getDownloadUrl(e,n){return e=="obsidian-pkmer"?`https://pkmer.cn/_release/obsidian-pkmer.zip?v=${n}`:await(await this.fetchWithToken(oe+"/getPluginDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getDownloadCount(){const e=await this.fetchWithToken(oe+"/getPluginDownloadCount");return parseInt(await e.text())+1}async getTop20Plugins(){const e=localStorage.getItem("top20Plugins"),n=localStorage.getItem("top20PluginsExpiry"),s=new Date().getTime();if(e&&n&&s<+n)return JSON.parse(e);{const r=await(await this.fetchWithToken(oe+"/getTop20Plugins")).json();return localStorage.setItem("top20Plugins",JSON.stringify(r)),localStorage.setItem("top20PluginsExpiry",String(s+8*60*60*1e3)),r}}async searchPlugins(e){return await(await this.fetchWithToken(oe+"/searchPlugins?keyword="+e+"&limit=10",{method:"GET"})).json()}async getPluginList(e=1*60*60*1e3){const n=localStorage.getItem("pluginList"),s=localStorage.getItem("pluginListExpiry"),i=new Date().getTime();if(n&&s){const r=parseInt(s);if(i<r)return JSON.parse(n)}try{const a=await(await this.fetchWithToken(oe+"/getAllPlugins",{method:"GET"})).json();return localStorage.setItem("pluginList",JSON.stringify(a)),localStorage.setItem("pluginListExpiry",String(i+e)),a}catch(r){throw console.error("Error fetching plugin list:",r),r}}async getTop20Themes(){const e=localStorage.getItem("top20Themes"),n=localStorage.getItem("top20ThemesExpiry"),s=new Date().getTime();if(e&&n&&s<+n)return JSON.parse(e);{const r=await(await this.fetchWithToken(oe+"/getTop20Themes")).json();return localStorage.setItem("top20Themes",JSON.stringify(r)),localStorage.setItem("top20ThemesExpiry",String(s+8*60*60*1e3)),r}}async getThemeList(e=1*60*60*1e3){const n=localStorage.getItem("themeList"),s=localStorage.getItem("themeListExpiry"),i=new Date().getTime();if(n&&s&&i<+s)return JSON.parse(n);try{const a=await(await this.fetchWithToken(oe+"/getAllThemes",{method:"GET"})).json();return localStorage.setItem("themeList",JSON.stringify(a)),localStorage.setItem("themeListExpiry",String(i+e)),a}catch(r){throw console.error("Error fetching theme list:",r),r}}async getThemeDownloadUrl(e,n){return await(await this.fetchWithToken(oe+"/getThemeDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getPkmerVersion(){const e=Math.random(),n=await at.requestUrl(`https://pkmer.cn/_release/manifest.json?_=${e}`);return JSON.parse(n.text).version}}var cn=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function un(t){throw new Error('Could not dynamically require "'+t+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var wi={exports:{}};/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/(function(t,e){(function(n){t.exports=n()})(function(){return function n(s,i,r){function a(f,_){if(!i[f]){if(!s[f]){var h=typeof un=="function"&&un;if(!_&&h)return h(f,!0);if(l)return l(f,!0);var w=new Error("Cannot find module '"+f+"'");throw w.code="MODULE_NOT_FOUND",w}var d=i[f]={exports:{}};s[f][0].call(d.exports,function(x){var p=s[f][1][x];return a(p||x)},d,d.exports,n,s,i,r)}return i[f].exports}for(var l=typeof un=="function"&&un,c=0;c<r.length;c++)a(r[c]);return a}({1:[function(n,s,i){var r=n("./utils"),a=n("./support"),l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";i.encode=function(c){for(var f,_,h,w,d,x,p,v=[],y=0,k=c.length,A=k,L=r.getTypeOf(c)!=="string";y<c.length;)A=k-y,h=L?(f=c[y++],_=y<k?c[y++]:0,y<k?c[y++]:0):(f=c.charCodeAt(y++),_=y<k?c.charCodeAt(y++):0,y<k?c.charCodeAt(y++):0),w=f>>2,d=(3&f)<<4|_>>4,x=1<A?(15&_)<<2|h>>6:64,p=2<A?63&h:64,v.push(l.charAt(w)+l.charAt(d)+l.charAt(x)+l.charAt(p));return v.join("")},i.decode=function(c){var f,_,h,w,d,x,p=0,v=0,y="data:";if(c.substr(0,y.length)===y)throw new Error("Invalid base64 input, it looks like a data url.");var k,A=3*(c=c.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(c.charAt(c.length-1)===l.charAt(64)&&A--,c.charAt(c.length-2)===l.charAt(64)&&A--,A%1!=0)throw new Error("Invalid base64 input, bad content length.");for(k=a.uint8array?new Uint8Array(0|A):new Array(0|A);p<c.length;)f=l.indexOf(c.charAt(p++))<<2|(w=l.indexOf(c.charAt(p++)))>>4,_=(15&w)<<4|(d=l.indexOf(c.charAt(p++)))>>2,h=(3&d)<<6|(x=l.indexOf(c.charAt(p++))),k[v++]=f,d!==64&&(k[v++]=_),x!==64&&(k[v++]=h);return k}},{"./support":30,"./utils":32}],2:[function(n,s,i){var r=n("./external"),a=n("./stream/DataWorker"),l=n("./stream/Crc32Probe"),c=n("./stream/DataLengthProbe");function f(_,h,w,d,x){this.compressedSize=_,this.uncompressedSize=h,this.crc32=w,this.compression=d,this.compressedContent=x}f.prototype={getContentWorker:function(){var _=new a(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new c("data_length")),h=this;return _.on("end",function(){if(this.streamInfo.data_length!==h.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),_},getCompressedWorker:function(){return new a(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},f.createWorkerFrom=function(_,h,w){return _.pipe(new l).pipe(new c("uncompressedSize")).pipe(h.compressWorker(w)).pipe(new c("compressedSize")).withStreamInfo("compression",h)},s.exports=f},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(n,s,i){var r=n("./stream/GenericWorker");i.STORE={magic:"\0\0",compressWorker:function(){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},i.DEFLATE=n("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(n,s,i){var r=n("./utils"),a=function(){for(var l,c=[],f=0;f<256;f++){l=f;for(var _=0;_<8;_++)l=1&l?3988292384^l>>>1:l>>>1;c[f]=l}return c}();s.exports=function(l,c){return l!==void 0&&l.length?r.getTypeOf(l)!=="string"?function(f,_,h,w){var d=a,x=w+h;f^=-1;for(var p=w;p<x;p++)f=f>>>8^d[255&(f^_[p])];return-1^f}(0|c,l,l.length,0):function(f,_,h,w){var d=a,x=w+h;f^=-1;for(var p=w;p<x;p++)f=f>>>8^d[255&(f^_.charCodeAt(p))];return-1^f}(0|c,l,l.length,0):0}},{"./utils":32}],5:[function(n,s,i){i.base64=!1,i.binary=!1,i.dir=!1,i.createFolders=!0,i.date=null,i.compression=null,i.compressionOptions=null,i.comment=null,i.unixPermissions=null,i.dosPermissions=null},{}],6:[function(n,s,i){var r=null;r=typeof Promise<"u"?Promise:n("lie"),s.exports={Promise:r}},{lie:37}],7:[function(n,s,i){var r=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Uint32Array<"u",a=n("pako"),l=n("./utils"),c=n("./stream/GenericWorker"),f=r?"uint8array":"array";function _(h,w){c.call(this,"FlateWorker/"+h),this._pako=null,this._pakoAction=h,this._pakoOptions=w,this.meta={}}i.magic="\b\0",l.inherits(_,c),_.prototype.processChunk=function(h){this.meta=h.meta,this._pako===null&&this._createPako(),this._pako.push(l.transformTo(f,h.data),!1)},_.prototype.flush=function(){c.prototype.flush.call(this),this._pako===null&&this._createPako(),this._pako.push([],!0)},_.prototype.cleanUp=function(){c.prototype.cleanUp.call(this),this._pako=null},_.prototype._createPako=function(){this._pako=new a[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var h=this;this._pako.onData=function(w){h.push({data:w,meta:h.meta})}},i.compressWorker=function(h){return new _("Deflate",h)},i.uncompressWorker=function(){return new _("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(n,s,i){function r(d,x){var p,v="";for(p=0;p<x;p++)v+=String.fromCharCode(255&d),d>>>=8;return v}function a(d,x,p,v,y,k){var A,L,P=d.file,$=d.compression,j=k!==f.utf8encode,q=l.transformTo("string",k(P.name)),M=l.transformTo("string",f.utf8encode(P.name)),J=P.comment,rt=l.transformTo("string",k(J)),O=l.transformTo("string",f.utf8encode(J)),V=M.length!==P.name.length,u=O.length!==J.length,K="",st="",Z="",tt=P.dir,Y=P.date,et={crc32:0,compressedSize:0,uncompressedSize:0};x&&!p||(et.crc32=d.crc32,et.compressedSize=d.compressedSize,et.uncompressedSize=d.uncompressedSize);var F=0;x&&(F|=8),j||!V&&!u||(F|=2048);var R=0,lt=0;tt&&(R|=16),y==="UNIX"?(lt=798,R|=function(Q,ht){var yt=Q;return Q||(yt=ht?16893:33204),(65535&yt)<<16}(P.unixPermissions,tt)):(lt=20,R|=function(Q){return 63&(Q||0)}(P.dosPermissions)),A=Y.getUTCHours(),A<<=6,A|=Y.getUTCMinutes(),A<<=5,A|=Y.getUTCSeconds()/2,L=Y.getUTCFullYear()-1980,L<<=4,L|=Y.getUTCMonth()+1,L<<=5,L|=Y.getUTCDate(),V&&(st=r(1,1)+r(_(q),4)+M,K+="up"+r(st.length,2)+st),u&&(Z=r(1,1)+r(_(rt),4)+O,K+="uc"+r(Z.length,2)+Z);var nt="";return nt+=`
\0`,nt+=r(F,2),nt+=$.magic,nt+=r(A,2),nt+=r(L,2),nt+=r(et.crc32,4),nt+=r(et.compressedSize,4),nt+=r(et.uncompressedSize,4),nt+=r(q.length,2),nt+=r(K.length,2),{fileRecord:h.LOCAL_FILE_HEADER+nt+q+K,dirRecord:h.CENTRAL_FILE_HEADER+r(lt,2)+nt+r(rt.length,2)+"\0\0\0\0"+r(R,4)+r(v,4)+q+K+rt}}var l=n("../utils"),c=n("../stream/GenericWorker"),f=n("../utf8"),_=n("../crc32"),h=n("../signature");function w(d,x,p,v){c.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=x,this.zipPlatform=p,this.encodeFileName=v,this.streamFiles=d,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}l.inherits(w,c),w.prototype.push=function(d){var x=d.meta.percent||0,p=this.entriesCount,v=this._sources.length;this.accumulate?this.contentBuffer.push(d):(this.bytesWritten+=d.data.length,c.prototype.push.call(this,{data:d.data,meta:{currentFile:this.currentFile,percent:p?(x+100*(p-v-1))/p:100}}))},w.prototype.openedSource=function(d){this.currentSourceOffset=this.bytesWritten,this.currentFile=d.file.name;var x=this.streamFiles&&!d.file.dir;if(x){var p=a(d,x,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:p.fileRecord,meta:{percent:0}})}else this.accumulate=!0},w.prototype.closedSource=function(d){this.accumulate=!1;var x=this.streamFiles&&!d.file.dir,p=a(d,x,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(p.dirRecord),x)this.push({data:function(v){return h.DATA_DESCRIPTOR+r(v.crc32,4)+r(v.compressedSize,4)+r(v.uncompressedSize,4)}(d),meta:{percent:100}});else for(this.push({data:p.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},w.prototype.flush=function(){for(var d=this.bytesWritten,x=0;x<this.dirRecords.length;x++)this.push({data:this.dirRecords[x],meta:{percent:100}});var p=this.bytesWritten-d,v=function(y,k,A,L,P){var $=l.transformTo("string",P(L));return h.CENTRAL_DIRECTORY_END+"\0\0\0\0"+r(y,2)+r(y,2)+r(k,4)+r(A,4)+r($.length,2)+$}(this.dirRecords.length,p,d,this.zipComment,this.encodeFileName);this.push({data:v,meta:{percent:100}})},w.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},w.prototype.registerPrevious=function(d){this._sources.push(d);var x=this;return d.on("data",function(p){x.processChunk(p)}),d.on("end",function(){x.closedSource(x.previous.streamInfo),x._sources.length?x.prepareNextSource():x.end()}),d.on("error",function(p){x.error(p)}),this},w.prototype.resume=function(){return!!c.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},w.prototype.error=function(d){var x=this._sources;if(!c.prototype.error.call(this,d))return!1;for(var p=0;p<x.length;p++)try{x[p].error(d)}catch{}return!0},w.prototype.lock=function(){c.prototype.lock.call(this);for(var d=this._sources,x=0;x<d.length;x++)d[x].lock()},s.exports=w},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(n,s,i){var r=n("../compressions"),a=n("./ZipFileWorker");i.generateWorker=function(l,c,f){var _=new a(c.streamFiles,f,c.platform,c.encodeFileName),h=0;try{l.forEach(function(w,d){h++;var x=function(k,A){var L=k||A,P=r[L];if(!P)throw new Error(L+" is not a valid compression method !");return P}(d.options.compression,c.compression),p=d.options.compressionOptions||c.compressionOptions||{},v=d.dir,y=d.date;d._compressWorker(x,p).withStreamInfo("file",{name:w,dir:v,date:y,comment:d.comment||"",unixPermissions:d.unixPermissions,dosPermissions:d.dosPermissions}).pipe(_)}),_.entriesCount=h}catch(w){_.error(w)}return _}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(n,s,i){function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var a=new r;for(var l in this)typeof this[l]!="function"&&(a[l]=this[l]);return a}}(r.prototype=n("./object")).loadAsync=n("./load"),r.support=n("./support"),r.defaults=n("./defaults"),r.version="3.10.1",r.loadAsync=function(a,l){return new r().loadAsync(a,l)},r.external=n("./external"),s.exports=r},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(n,s,i){var r=n("./utils"),a=n("./external"),l=n("./utf8"),c=n("./zipEntries"),f=n("./stream/Crc32Probe"),_=n("./nodejsUtils");function h(w){return new a.Promise(function(d,x){var p=w.decompressed.getContentWorker().pipe(new f);p.on("error",function(v){x(v)}).on("end",function(){p.streamInfo.crc32!==w.decompressed.crc32?x(new Error("Corrupted zip : CRC32 mismatch")):d()}).resume()})}s.exports=function(w,d){var x=this;return d=r.extend(d||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:l.utf8decode}),_.isNode&&_.isStream(w)?a.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",w,!0,d.optimizedBinaryString,d.base64).then(function(p){var v=new c(d);return v.load(p),v}).then(function(p){var v=[a.Promise.resolve(p)],y=p.files;if(d.checkCRC32)for(var k=0;k<y.length;k++)v.push(h(y[k]));return a.Promise.all(v)}).then(function(p){for(var v=p.shift(),y=v.files,k=0;k<y.length;k++){var A=y[k],L=A.fileNameStr,P=r.resolve(A.fileNameStr);x.file(P,A.decompressed,{binary:!0,optimizedBinaryString:!0,date:A.date,dir:A.dir,comment:A.fileCommentStr.length?A.fileCommentStr:null,unixPermissions:A.unixPermissions,dosPermissions:A.dosPermissions,createFolders:d.createFolders}),A.dir||(x.file(P).unsafeOriginalName=L)}return v.zipComment.length&&(x.comment=v.zipComment),x})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(n,s,i){var r=n("../utils"),a=n("../stream/GenericWorker");function l(c,f){a.call(this,"Nodejs stream input adapter for "+c),this._upstreamEnded=!1,this._bindStream(f)}r.inherits(l,a),l.prototype._bindStream=function(c){var f=this;(this._stream=c).pause(),c.on("data",function(_){f.push({data:_,meta:{percent:0}})}).on("error",function(_){f.isPaused?this.generatedError=_:f.error(_)}).on("end",function(){f.isPaused?f._upstreamEnded=!0:f.end()})},l.prototype.pause=function(){return!!a.prototype.pause.call(this)&&(this._stream.pause(),!0)},l.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},s.exports=l},{"../stream/GenericWorker":28,"../utils":32}],13:[function(n,s,i){var r=n("readable-stream").Readable;function a(l,c,f){r.call(this,c),this._helper=l;var _=this;l.on("data",function(h,w){_.push(h)||_._helper.pause(),f&&f(w)}).on("error",function(h){_.emit("error",h)}).on("end",function(){_.push(null)})}n("../utils").inherits(a,r),a.prototype._read=function(){this._helper.resume()},s.exports=a},{"../utils":32,"readable-stream":16}],14:[function(n,s,i){s.exports={isNode:typeof Buffer<"u",newBufferFrom:function(r,a){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(r,a);if(typeof r=="number")throw new Error('The "data" argument must not be a number');return new Buffer(r,a)},allocBuffer:function(r){if(Buffer.alloc)return Buffer.alloc(r);var a=new Buffer(r);return a.fill(0),a},isBuffer:function(r){return Buffer.isBuffer(r)},isStream:function(r){return r&&typeof r.on=="function"&&typeof r.pause=="function"&&typeof r.resume=="function"}}},{}],15:[function(n,s,i){function r(P,$,j){var q,M=l.getTypeOf($),J=l.extend(j||{},_);J.date=J.date||new Date,J.compression!==null&&(J.compression=J.compression.toUpperCase()),typeof J.unixPermissions=="string"&&(J.unixPermissions=parseInt(J.unixPermissions,8)),J.unixPermissions&&16384&J.unixPermissions&&(J.dir=!0),J.dosPermissions&&16&J.dosPermissions&&(J.dir=!0),J.dir&&(P=y(P)),J.createFolders&&(q=v(P))&&k.call(this,q,!0);var rt=M==="string"&&J.binary===!1&&J.base64===!1;j&&j.binary!==void 0||(J.binary=!rt),($ instanceof h&&$.uncompressedSize===0||J.dir||!$||$.length===0)&&(J.base64=!1,J.binary=!0,$="",J.compression="STORE",M="string");var O=null;O=$ instanceof h||$ instanceof c?$:x.isNode&&x.isStream($)?new p(P,$):l.prepareContent(P,$,J.binary,J.optimizedBinaryString,J.base64);var V=new w(P,O,J);this.files[P]=V}var a=n("./utf8"),l=n("./utils"),c=n("./stream/GenericWorker"),f=n("./stream/StreamHelper"),_=n("./defaults"),h=n("./compressedObject"),w=n("./zipObject"),d=n("./generate"),x=n("./nodejsUtils"),p=n("./nodejs/NodejsStreamInputAdapter"),v=function(P){P.slice(-1)==="/"&&(P=P.substring(0,P.length-1));var $=P.lastIndexOf("/");return 0<$?P.substring(0,$):""},y=function(P){return P.slice(-1)!=="/"&&(P+="/"),P},k=function(P,$){return $=$!==void 0?$:_.createFolders,P=y(P),this.files[P]||r.call(this,P,null,{dir:!0,createFolders:$}),this.files[P]};function A(P){return Object.prototype.toString.call(P)==="[object RegExp]"}var L={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(P){var $,j,q;for($ in this.files)q=this.files[$],(j=$.slice(this.root.length,$.length))&&$.slice(0,this.root.length)===this.root&&P(j,q)},filter:function(P){var $=[];return this.forEach(function(j,q){P(j,q)&&$.push(q)}),$},file:function(P,$,j){if(arguments.length!==1)return P=this.root+P,r.call(this,P,$,j),this;if(A(P)){var q=P;return this.filter(function(J,rt){return!rt.dir&&q.test(J)})}var M=this.files[this.root+P];return M&&!M.dir?M:null},folder:function(P){if(!P)return this;if(A(P))return this.filter(function(M,J){return J.dir&&P.test(M)});var $=this.root+P,j=k.call(this,$),q=this.clone();return q.root=j.name,q},remove:function(P){P=this.root+P;var $=this.files[P];if($||(P.slice(-1)!=="/"&&(P+="/"),$=this.files[P]),$&&!$.dir)delete this.files[P];else for(var j=this.filter(function(M,J){return J.name.slice(0,P.length)===P}),q=0;q<j.length;q++)delete this.files[j[q].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(P){var $,j={};try{if((j=l.extend(P||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:a.utf8encode})).type=j.type.toLowerCase(),j.compression=j.compression.toUpperCase(),j.type==="binarystring"&&(j.type="string"),!j.type)throw new Error("No output type specified.");l.checkSupport(j.type),j.platform!=="darwin"&&j.platform!=="freebsd"&&j.platform!=="linux"&&j.platform!=="sunos"||(j.platform="UNIX"),j.platform==="win32"&&(j.platform="DOS");var q=j.comment||this.comment||"";$=d.generateWorker(this,j,q)}catch(M){($=new c("error")).error(M)}return new f($,j.type||"string",j.mimeType)},generateAsync:function(P,$){return this.generateInternalStream(P).accumulate($)},generateNodeStream:function(P,$){return(P=P||{}).type||(P.type="nodebuffer"),this.generateInternalStream(P).toNodejsStream($)}};s.exports=L},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(n,s,i){s.exports=n("stream")},{stream:void 0}],17:[function(n,s,i){var r=n("./DataReader");function a(l){r.call(this,l);for(var c=0;c<this.data.length;c++)l[c]=255&l[c]}n("../utils").inherits(a,r),a.prototype.byteAt=function(l){return this.data[this.zero+l]},a.prototype.lastIndexOfSignature=function(l){for(var c=l.charCodeAt(0),f=l.charCodeAt(1),_=l.charCodeAt(2),h=l.charCodeAt(3),w=this.length-4;0<=w;--w)if(this.data[w]===c&&this.data[w+1]===f&&this.data[w+2]===_&&this.data[w+3]===h)return w-this.zero;return-1},a.prototype.readAndCheckSignature=function(l){var c=l.charCodeAt(0),f=l.charCodeAt(1),_=l.charCodeAt(2),h=l.charCodeAt(3),w=this.readData(4);return c===w[0]&&f===w[1]&&_===w[2]&&h===w[3]},a.prototype.readData=function(l){if(this.checkOffset(l),l===0)return[];var c=this.data.slice(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./DataReader":18}],18:[function(n,s,i){var r=n("../utils");function a(l){this.data=l,this.length=l.length,this.index=0,this.zero=0}a.prototype={checkOffset:function(l){this.checkIndex(this.index+l)},checkIndex:function(l){if(this.length<this.zero+l||l<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+l+"). Corrupted zip ?")},setIndex:function(l){this.checkIndex(l),this.index=l},skip:function(l){this.setIndex(this.index+l)},byteAt:function(){},readInt:function(l){var c,f=0;for(this.checkOffset(l),c=this.index+l-1;c>=this.index;c--)f=(f<<8)+this.byteAt(c);return this.index+=l,f},readString:function(l){return r.transformTo("string",this.readData(l))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var l=this.readInt(4);return new Date(Date.UTC(1980+(l>>25&127),(l>>21&15)-1,l>>16&31,l>>11&31,l>>5&63,(31&l)<<1))}},s.exports=a},{"../utils":32}],19:[function(n,s,i){var r=n("./Uint8ArrayReader");function a(l){r.call(this,l)}n("../utils").inherits(a,r),a.prototype.readData=function(l){this.checkOffset(l);var c=this.data.slice(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(n,s,i){var r=n("./DataReader");function a(l){r.call(this,l)}n("../utils").inherits(a,r),a.prototype.byteAt=function(l){return this.data.charCodeAt(this.zero+l)},a.prototype.lastIndexOfSignature=function(l){return this.data.lastIndexOf(l)-this.zero},a.prototype.readAndCheckSignature=function(l){return l===this.readData(4)},a.prototype.readData=function(l){this.checkOffset(l);var c=this.data.slice(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./DataReader":18}],21:[function(n,s,i){var r=n("./ArrayReader");function a(l){r.call(this,l)}n("../utils").inherits(a,r),a.prototype.readData=function(l){if(this.checkOffset(l),l===0)return new Uint8Array(0);var c=this.data.subarray(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./ArrayReader":17}],22:[function(n,s,i){var r=n("../utils"),a=n("../support"),l=n("./ArrayReader"),c=n("./StringReader"),f=n("./NodeBufferReader"),_=n("./Uint8ArrayReader");s.exports=function(h){var w=r.getTypeOf(h);return r.checkSupport(w),w!=="string"||a.uint8array?w==="nodebuffer"?new f(h):a.uint8array?new _(r.transformTo("uint8array",h)):new l(r.transformTo("array",h)):new c(h)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(n,s,i){i.LOCAL_FILE_HEADER="PK",i.CENTRAL_FILE_HEADER="PK",i.CENTRAL_DIRECTORY_END="PK",i.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK\x07",i.ZIP64_CENTRAL_DIRECTORY_END="PK",i.DATA_DESCRIPTOR="PK\x07\b"},{}],24:[function(n,s,i){var r=n("./GenericWorker"),a=n("../utils");function l(c){r.call(this,"ConvertWorker to "+c),this.destType=c}a.inherits(l,r),l.prototype.processChunk=function(c){this.push({data:a.transformTo(this.destType,c.data),meta:c.meta})},s.exports=l},{"../utils":32,"./GenericWorker":28}],25:[function(n,s,i){var r=n("./GenericWorker"),a=n("../crc32");function l(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}n("../utils").inherits(l,r),l.prototype.processChunk=function(c){this.streamInfo.crc32=a(c.data,this.streamInfo.crc32||0),this.push(c)},s.exports=l},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(n,s,i){var r=n("../utils"),a=n("./GenericWorker");function l(c){a.call(this,"DataLengthProbe for "+c),this.propName=c,this.withStreamInfo(c,0)}r.inherits(l,a),l.prototype.processChunk=function(c){if(c){var f=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=f+c.data.length}a.prototype.processChunk.call(this,c)},s.exports=l},{"../utils":32,"./GenericWorker":28}],27:[function(n,s,i){var r=n("../utils"),a=n("./GenericWorker");function l(c){a.call(this,"DataWorker");var f=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,c.then(function(_){f.dataIsReady=!0,f.data=_,f.max=_&&_.length||0,f.type=r.getTypeOf(_),f.isPaused||f._tickAndRepeat()},function(_){f.error(_)})}r.inherits(l,a),l.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this.data=null},l.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},l.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},l.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var c=null,f=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":c=this.data.substring(this.index,f);break;case"uint8array":c=this.data.subarray(this.index,f);break;case"array":case"nodebuffer":c=this.data.slice(this.index,f)}return this.index=f,this.push({data:c,meta:{percent:this.max?this.index/this.max*100:0}})},s.exports=l},{"../utils":32,"./GenericWorker":28}],28:[function(n,s,i){function r(a){this.name=a||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(a){this.emit("data",a)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(a){this.emit("error",a)}return!0},error:function(a){return!this.isFinished&&(this.isPaused?this.generatedError=a:(this.isFinished=!0,this.emit("error",a),this.previous&&this.previous.error(a),this.cleanUp()),!0)},on:function(a,l){return this._listeners[a].push(l),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(a,l){if(this._listeners[a])for(var c=0;c<this._listeners[a].length;c++)this._listeners[a][c].call(this,l)},pipe:function(a){return a.registerPrevious(this)},registerPrevious:function(a){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=a.streamInfo,this.mergeStreamInfo(),this.previous=a;var l=this;return a.on("data",function(c){l.processChunk(c)}),a.on("end",function(){l.end()}),a.on("error",function(c){l.error(c)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var a=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),a=!0),this.previous&&this.previous.resume(),!a},flush:function(){},processChunk:function(a){this.push(a)},withStreamInfo:function(a,l){return this.extraStreamInfo[a]=l,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var a in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,a)&&(this.streamInfo[a]=this.extraStreamInfo[a])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var a="Worker "+this.name;return this.previous?this.previous+" -> "+a:a}},s.exports=r},{}],29:[function(n,s,i){var r=n("../utils"),a=n("./ConvertWorker"),l=n("./GenericWorker"),c=n("../base64"),f=n("../support"),_=n("../external"),h=null;if(f.nodestream)try{h=n("../nodejs/NodejsStreamOutputAdapter")}catch{}function w(x,p){return new _.Promise(function(v,y){var k=[],A=x._internalType,L=x._outputType,P=x._mimeType;x.on("data",function($,j){k.push($),p&&p(j)}).on("error",function($){k=[],y($)}).on("end",function(){try{var $=function(j,q,M){switch(j){case"blob":return r.newBlob(r.transformTo("arraybuffer",q),M);case"base64":return c.encode(q);default:return r.transformTo(j,q)}}(L,function(j,q){var M,J=0,rt=null,O=0;for(M=0;M<q.length;M++)O+=q[M].length;switch(j){case"string":return q.join("");case"array":return Array.prototype.concat.apply([],q);case"uint8array":for(rt=new Uint8Array(O),M=0;M<q.length;M++)rt.set(q[M],J),J+=q[M].length;return rt;case"nodebuffer":return Buffer.concat(q);default:throw new Error("concat : unsupported type '"+j+"'")}}(A,k),P);v($)}catch(j){y(j)}k=[]}).resume()})}function d(x,p,v){var y=p;switch(p){case"blob":case"arraybuffer":y="uint8array";break;case"base64":y="string"}try{this._internalType=y,this._outputType=p,this._mimeType=v,r.checkSupport(y),this._worker=x.pipe(new a(y)),x.lock()}catch(k){this._worker=new l("error"),this._worker.error(k)}}d.prototype={accumulate:function(x){return w(this,x)},on:function(x,p){var v=this;return x==="data"?this._worker.on(x,function(y){p.call(v,y.data,y.meta)}):this._worker.on(x,function(){r.delay(p,arguments,v)}),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(x){if(r.checkSupport("nodestream"),this._outputType!=="nodebuffer")throw new Error(this._outputType+" is not supported by this method");return new h(this,{objectMode:this._outputType!=="nodebuffer"},x)}},s.exports=d},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(n,s,i){if(i.base64=!0,i.array=!0,i.string=!0,i.arraybuffer=typeof ArrayBuffer<"u"&&typeof Uint8Array<"u",i.nodebuffer=typeof Buffer<"u",i.uint8array=typeof Uint8Array<"u",typeof ArrayBuffer>"u")i.blob=!1;else{var r=new ArrayBuffer(0);try{i.blob=new Blob([r],{type:"application/zip"}).size===0}catch{try{var a=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);a.append(r),i.blob=a.getBlob("application/zip").size===0}catch{i.blob=!1}}}try{i.nodestream=!!n("readable-stream").Readable}catch{i.nodestream=!1}},{"readable-stream":16}],31:[function(n,s,i){for(var r=n("./utils"),a=n("./support"),l=n("./nodejsUtils"),c=n("./stream/GenericWorker"),f=new Array(256),_=0;_<256;_++)f[_]=252<=_?6:248<=_?5:240<=_?4:224<=_?3:192<=_?2:1;f[254]=f[254]=1;function h(){c.call(this,"utf-8 decode"),this.leftOver=null}function w(){c.call(this,"utf-8 encode")}i.utf8encode=function(d){return a.nodebuffer?l.newBufferFrom(d,"utf-8"):function(x){var p,v,y,k,A,L=x.length,P=0;for(k=0;k<L;k++)(64512&(v=x.charCodeAt(k)))==55296&&k+1<L&&(64512&(y=x.charCodeAt(k+1)))==56320&&(v=65536+(v-55296<<10)+(y-56320),k++),P+=v<128?1:v<2048?2:v<65536?3:4;for(p=a.uint8array?new Uint8Array(P):new Array(P),k=A=0;A<P;k++)(64512&(v=x.charCodeAt(k)))==55296&&k+1<L&&(64512&(y=x.charCodeAt(k+1)))==56320&&(v=65536+(v-55296<<10)+(y-56320),k++),v<128?p[A++]=v:(v<2048?p[A++]=192|v>>>6:(v<65536?p[A++]=224|v>>>12:(p[A++]=240|v>>>18,p[A++]=128|v>>>12&63),p[A++]=128|v>>>6&63),p[A++]=128|63&v);return p}(d)},i.utf8decode=function(d){return a.nodebuffer?r.transformTo("nodebuffer",d).toString("utf-8"):function(x){var p,v,y,k,A=x.length,L=new Array(2*A);for(p=v=0;p<A;)if((y=x[p++])<128)L[v++]=y;else if(4<(k=f[y]))L[v++]=65533,p+=k-1;else{for(y&=k===2?31:k===3?15:7;1<k&&p<A;)y=y<<6|63&x[p++],k--;1<k?L[v++]=65533:y<65536?L[v++]=y:(y-=65536,L[v++]=55296|y>>10&1023,L[v++]=56320|1023&y)}return L.length!==v&&(L.subarray?L=L.subarray(0,v):L.length=v),r.applyFromCharCode(L)}(d=r.transformTo(a.uint8array?"uint8array":"array",d))},r.inherits(h,c),h.prototype.processChunk=function(d){var x=r.transformTo(a.uint8array?"uint8array":"array",d.data);if(this.leftOver&&this.leftOver.length){if(a.uint8array){var p=x;(x=new Uint8Array(p.length+this.leftOver.length)).set(this.leftOver,0),x.set(p,this.leftOver.length)}else x=this.leftOver.concat(x);this.leftOver=null}var v=function(k,A){var L;for((A=A||k.length)>k.length&&(A=k.length),L=A-1;0<=L&&(192&k[L])==128;)L--;return L<0||L===0?A:L+f[k[L]]>A?L:A}(x),y=x;v!==x.length&&(a.uint8array?(y=x.subarray(0,v),this.leftOver=x.subarray(v,x.length)):(y=x.slice(0,v),this.leftOver=x.slice(v,x.length))),this.push({data:i.utf8decode(y),meta:d.meta})},h.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:i.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},i.Utf8DecodeWorker=h,r.inherits(w,c),w.prototype.processChunk=function(d){this.push({data:i.utf8encode(d.data),meta:d.meta})},i.Utf8EncodeWorker=w},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(n,s,i){var r=n("./support"),a=n("./base64"),l=n("./nodejsUtils"),c=n("./external");function f(p){return p}function _(p,v){for(var y=0;y<p.length;++y)v[y]=255&p.charCodeAt(y);return v}n("setimmediate"),i.newBlob=function(p,v){i.checkSupport("blob");try{return new Blob([p],{type:v})}catch{try{var y=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return y.append(p),y.getBlob(v)}catch{throw new Error("Bug : can't construct the Blob.")}}};var h={stringifyByChunk:function(p,v,y){var k=[],A=0,L=p.length;if(L<=y)return String.fromCharCode.apply(null,p);for(;A<L;)v==="array"||v==="nodebuffer"?k.push(String.fromCharCode.apply(null,p.slice(A,Math.min(A+y,L)))):k.push(String.fromCharCode.apply(null,p.subarray(A,Math.min(A+y,L)))),A+=y;return k.join("")},stringifyByChar:function(p){for(var v="",y=0;y<p.length;y++)v+=String.fromCharCode(p[y]);return v},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&String.fromCharCode.apply(null,new Uint8Array(1)).length===1}catch{return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&String.fromCharCode.apply(null,l.allocBuffer(1)).length===1}catch{return!1}}()}};function w(p){var v=65536,y=i.getTypeOf(p),k=!0;if(y==="uint8array"?k=h.applyCanBeUsed.uint8array:y==="nodebuffer"&&(k=h.applyCanBeUsed.nodebuffer),k)for(;1<v;)try{return h.stringifyByChunk(p,y,v)}catch{v=Math.floor(v/2)}return h.stringifyByChar(p)}function d(p,v){for(var y=0;y<p.length;y++)v[y]=p[y];return v}i.applyFromCharCode=w;var x={};x.string={string:f,array:function(p){return _(p,new Array(p.length))},arraybuffer:function(p){return x.string.uint8array(p).buffer},uint8array:function(p){return _(p,new Uint8Array(p.length))},nodebuffer:function(p){return _(p,l.allocBuffer(p.length))}},x.array={string:w,array:f,arraybuffer:function(p){return new Uint8Array(p).buffer},uint8array:function(p){return new Uint8Array(p)},nodebuffer:function(p){return l.newBufferFrom(p)}},x.arraybuffer={string:function(p){return w(new Uint8Array(p))},array:function(p){return d(new Uint8Array(p),new Array(p.byteLength))},arraybuffer:f,uint8array:function(p){return new Uint8Array(p)},nodebuffer:function(p){return l.newBufferFrom(new Uint8Array(p))}},x.uint8array={string:w,array:function(p){return d(p,new Array(p.length))},arraybuffer:function(p){return p.buffer},uint8array:f,nodebuffer:function(p){return l.newBufferFrom(p)}},x.nodebuffer={string:w,array:function(p){return d(p,new Array(p.length))},arraybuffer:function(p){return x.nodebuffer.uint8array(p).buffer},uint8array:function(p){return d(p,new Uint8Array(p.length))},nodebuffer:f},i.transformTo=function(p,v){if(v=v||"",!p)return v;i.checkSupport(p);var y=i.getTypeOf(v);return x[y][p](v)},i.resolve=function(p){for(var v=p.split("/"),y=[],k=0;k<v.length;k++){var A=v[k];A==="."||A===""&&k!==0&&k!==v.length-1||(A===".."?y.pop():y.push(A))}return y.join("/")},i.getTypeOf=function(p){return typeof p=="string"?"string":Object.prototype.toString.call(p)==="[object Array]"?"array":r.nodebuffer&&l.isBuffer(p)?"nodebuffer":r.uint8array&&p instanceof Uint8Array?"uint8array":r.arraybuffer&&p instanceof ArrayBuffer?"arraybuffer":void 0},i.checkSupport=function(p){if(!r[p.toLowerCase()])throw new Error(p+" is not supported by this platform")},i.MAX_VALUE_16BITS=65535,i.MAX_VALUE_32BITS=-1,i.pretty=function(p){var v,y,k="";for(y=0;y<(p||"").length;y++)k+="\\x"+((v=p.charCodeAt(y))<16?"0":"")+v.toString(16).toUpperCase();return k},i.delay=function(p,v,y){setImmediate(function(){p.apply(y||null,v||[])})},i.inherits=function(p,v){function y(){}y.prototype=v.prototype,p.prototype=new y},i.extend=function(){var p,v,y={};for(p=0;p<arguments.length;p++)for(v in arguments[p])Object.prototype.hasOwnProperty.call(arguments[p],v)&&y[v]===void 0&&(y[v]=arguments[p][v]);return y},i.prepareContent=function(p,v,y,k,A){return c.Promise.resolve(v).then(function(L){return r.blob&&(L instanceof Blob||["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(L))!==-1)&&typeof FileReader<"u"?new c.Promise(function(P,$){var j=new FileReader;j.onload=function(q){P(q.target.result)},j.onerror=function(q){$(q.target.error)},j.readAsArrayBuffer(L)}):L}).then(function(L){var P=i.getTypeOf(L);return P?(P==="arraybuffer"?L=i.transformTo("uint8array",L):P==="string"&&(A?L=a.decode(L):y&&k!==!0&&(L=function($){return _($,r.uint8array?new Uint8Array($.length):new Array($.length))}(L))),L):c.Promise.reject(new Error("Can't read the data of '"+p+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(n,s,i){var r=n("./reader/readerFor"),a=n("./utils"),l=n("./signature"),c=n("./zipEntry"),f=n("./support");function _(h){this.files=[],this.loadOptions=h}_.prototype={checkSignature:function(h){if(!this.reader.readAndCheckSignature(h)){this.reader.index-=4;var w=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+a.pretty(w)+", expected "+a.pretty(h)+")")}},isSignature:function(h,w){var d=this.reader.index;this.reader.setIndex(h);var x=this.reader.readString(4)===w;return this.reader.setIndex(d),x},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var h=this.reader.readData(this.zipCommentLength),w=f.uint8array?"uint8array":"array",d=a.transformTo(w,h);this.zipComment=this.loadOptions.decodeFileName(d)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var h,w,d,x=this.zip64EndOfCentralSize-44;0<x;)h=this.reader.readInt(2),w=this.reader.readInt(4),d=this.reader.readData(w),this.zip64ExtensibleData[h]={id:h,length:w,value:d}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var h,w;for(h=0;h<this.files.length;h++)w=this.files[h],this.reader.setIndex(w.localHeaderOffset),this.checkSignature(l.LOCAL_FILE_HEADER),w.readLocalPart(this.reader),w.handleUTF8(),w.processAttributes()},readCentralDir:function(){var h;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(l.CENTRAL_FILE_HEADER);)(h=new c({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(h);if(this.centralDirRecords!==this.files.length&&this.centralDirRecords!==0&&this.files.length===0)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var h=this.reader.lastIndexOfSignature(l.CENTRAL_DIRECTORY_END);if(h<0)throw this.isSignature(0,l.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(h);var w=h;if(this.checkSignature(l.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===a.MAX_VALUE_16BITS||this.diskWithCentralDirStart===a.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===a.MAX_VALUE_16BITS||this.centralDirRecords===a.MAX_VALUE_16BITS||this.centralDirSize===a.MAX_VALUE_32BITS||this.centralDirOffset===a.MAX_VALUE_32BITS){if(this.zip64=!0,(h=this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(h),this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,l.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var d=this.centralDirOffset+this.centralDirSize;this.zip64&&(d+=20,d+=12+this.zip64EndOfCentralSize);var x=w-d;if(0<x)this.isSignature(w,l.CENTRAL_FILE_HEADER)||(this.reader.zero=x);else if(x<0)throw new Error("Corrupted zip: missing "+Math.abs(x)+" bytes.")},prepareReader:function(h){this.reader=r(h)},load:function(h){this.prepareReader(h),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},s.exports=_},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(n,s,i){var r=n("./reader/readerFor"),a=n("./utils"),l=n("./compressedObject"),c=n("./crc32"),f=n("./utf8"),_=n("./compressions"),h=n("./support");function w(d,x){this.options=d,this.loadOptions=x}w.prototype={isEncrypted:function(){return(1&this.bitFlag)==1},useUTF8:function(){return(2048&this.bitFlag)==2048},readLocalPart:function(d){var x,p;if(d.skip(22),this.fileNameLength=d.readInt(2),p=d.readInt(2),this.fileName=d.readData(this.fileNameLength),d.skip(p),this.compressedSize===-1||this.uncompressedSize===-1)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if((x=function(v){for(var y in _)if(Object.prototype.hasOwnProperty.call(_,y)&&_[y].magic===v)return _[y];return null}(this.compressionMethod))===null)throw new Error("Corrupted zip : compression "+a.pretty(this.compressionMethod)+" unknown (inner file : "+a.transformTo("string",this.fileName)+")");this.decompressed=new l(this.compressedSize,this.uncompressedSize,this.crc32,x,d.readData(this.compressedSize))},readCentralPart:function(d){this.versionMadeBy=d.readInt(2),d.skip(2),this.bitFlag=d.readInt(2),this.compressionMethod=d.readString(2),this.date=d.readDate(),this.crc32=d.readInt(4),this.compressedSize=d.readInt(4),this.uncompressedSize=d.readInt(4);var x=d.readInt(2);if(this.extraFieldsLength=d.readInt(2),this.fileCommentLength=d.readInt(2),this.diskNumberStart=d.readInt(2),this.internalFileAttributes=d.readInt(2),this.externalFileAttributes=d.readInt(4),this.localHeaderOffset=d.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");d.skip(x),this.readExtraFields(d),this.parseZIP64ExtraField(d),this.fileComment=d.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var d=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),d==0&&(this.dosPermissions=63&this.externalFileAttributes),d==3&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||this.fileNameStr.slice(-1)!=="/"||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var d=r(this.extraFields[1].value);this.uncompressedSize===a.MAX_VALUE_32BITS&&(this.uncompressedSize=d.readInt(8)),this.compressedSize===a.MAX_VALUE_32BITS&&(this.compressedSize=d.readInt(8)),this.localHeaderOffset===a.MAX_VALUE_32BITS&&(this.localHeaderOffset=d.readInt(8)),this.diskNumberStart===a.MAX_VALUE_32BITS&&(this.diskNumberStart=d.readInt(4))}},readExtraFields:function(d){var x,p,v,y=d.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});d.index+4<y;)x=d.readInt(2),p=d.readInt(2),v=d.readData(p),this.extraFields[x]={id:x,length:p,value:v};d.setIndex(y)},handleUTF8:function(){var d=h.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=f.utf8decode(this.fileName),this.fileCommentStr=f.utf8decode(this.fileComment);else{var x=this.findExtraFieldUnicodePath();if(x!==null)this.fileNameStr=x;else{var p=a.transformTo(d,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(p)}var v=this.findExtraFieldUnicodeComment();if(v!==null)this.fileCommentStr=v;else{var y=a.transformTo(d,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(y)}}},findExtraFieldUnicodePath:function(){var d=this.extraFields[28789];if(d){var x=r(d.value);return x.readInt(1)!==1||c(this.fileName)!==x.readInt(4)?null:f.utf8decode(x.readData(d.length-5))}return null},findExtraFieldUnicodeComment:function(){var d=this.extraFields[25461];if(d){var x=r(d.value);return x.readInt(1)!==1||c(this.fileComment)!==x.readInt(4)?null:f.utf8decode(x.readData(d.length-5))}return null}},s.exports=w},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(n,s,i){function r(x,p,v){this.name=x,this.dir=v.dir,this.date=v.date,this.comment=v.comment,this.unixPermissions=v.unixPermissions,this.dosPermissions=v.dosPermissions,this._data=p,this._dataBinary=v.binary,this.options={compression:v.compression,compressionOptions:v.compressionOptions}}var a=n("./stream/StreamHelper"),l=n("./stream/DataWorker"),c=n("./utf8"),f=n("./compressedObject"),_=n("./stream/GenericWorker");r.prototype={internalStream:function(x){var p=null,v="string";try{if(!x)throw new Error("No output type specified.");var y=(v=x.toLowerCase())==="string"||v==="text";v!=="binarystring"&&v!=="text"||(v="string"),p=this._decompressWorker();var k=!this._dataBinary;k&&!y&&(p=p.pipe(new c.Utf8EncodeWorker)),!k&&y&&(p=p.pipe(new c.Utf8DecodeWorker))}catch(A){(p=new _("error")).error(A)}return new a(p,v,"")},async:function(x,p){return this.internalStream(x).accumulate(p)},nodeStream:function(x,p){return this.internalStream(x||"nodebuffer").toNodejsStream(p)},_compressWorker:function(x,p){if(this._data instanceof f&&this._data.compression.magic===x.magic)return this._data.getCompressedWorker();var v=this._decompressWorker();return this._dataBinary||(v=v.pipe(new c.Utf8EncodeWorker)),f.createWorkerFrom(v,x,p)},_decompressWorker:function(){return this._data instanceof f?this._data.getContentWorker():this._data instanceof _?this._data:new l(this._data)}};for(var h=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],w=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},d=0;d<h.length;d++)r.prototype[h[d]]=w;s.exports=r},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(n,s,i){(function(r){var a,l,c=r.MutationObserver||r.WebKitMutationObserver;if(c){var f=0,_=new c(x),h=r.document.createTextNode("");_.observe(h,{characterData:!0}),a=function(){h.data=f=++f%2}}else if(r.setImmediate||r.MessageChannel===void 0)a="document"in r&&"onreadystatechange"in r.document.createElement("script")?function(){var p=r.document.createElement("script");p.onreadystatechange=function(){x(),p.onreadystatechange=null,p.parentNode.removeChild(p),p=null},r.document.documentElement.appendChild(p)}:function(){setTimeout(x,0)};else{var w=new r.MessageChannel;w.port1.onmessage=x,a=function(){w.port2.postMessage(0)}}var d=[];function x(){var p,v;l=!0;for(var y=d.length;y;){for(v=d,d=[],p=-1;++p<y;)v[p]();y=d.length}l=!1}s.exports=function(p){d.push(p)!==1||l||a()}}).call(this,typeof cn<"u"?cn:typeof self<"u"?self:typeof window<"u"?window:{})},{}],37:[function(n,s,i){var r=n("immediate");function a(){}var l={},c=["REJECTED"],f=["FULFILLED"],_=["PENDING"];function h(y){if(typeof y!="function")throw new TypeError("resolver must be a function");this.state=_,this.queue=[],this.outcome=void 0,y!==a&&p(this,y)}function w(y,k,A){this.promise=y,typeof k=="function"&&(this.onFulfilled=k,this.callFulfilled=this.otherCallFulfilled),typeof A=="function"&&(this.onRejected=A,this.callRejected=this.otherCallRejected)}function d(y,k,A){r(function(){var L;try{L=k(A)}catch(P){return l.reject(y,P)}L===y?l.reject(y,new TypeError("Cannot resolve promise with itself")):l.resolve(y,L)})}function x(y){var k=y&&y.then;if(y&&(typeof y=="object"||typeof y=="function")&&typeof k=="function")return function(){k.apply(y,arguments)}}function p(y,k){var A=!1;function L(j){A||(A=!0,l.reject(y,j))}function P(j){A||(A=!0,l.resolve(y,j))}var $=v(function(){k(P,L)});$.status==="error"&&L($.value)}function v(y,k){var A={};try{A.value=y(k),A.status="success"}catch(L){A.status="error",A.value=L}return A}(s.exports=h).prototype.finally=function(y){if(typeof y!="function")return this;var k=this.constructor;return this.then(function(A){return k.resolve(y()).then(function(){return A})},function(A){return k.resolve(y()).then(function(){throw A})})},h.prototype.catch=function(y){return this.then(null,y)},h.prototype.then=function(y,k){if(typeof y!="function"&&this.state===f||typeof k!="function"&&this.state===c)return this;var A=new this.constructor(a);return this.state!==_?d(A,this.state===f?y:k,this.outcome):this.queue.push(new w(A,y,k)),A},w.prototype.callFulfilled=function(y){l.resolve(this.promise,y)},w.prototype.otherCallFulfilled=function(y){d(this.promise,this.onFulfilled,y)},w.prototype.callRejected=function(y){l.reject(this.promise,y)},w.prototype.otherCallRejected=function(y){d(this.promise,this.onRejected,y)},l.resolve=function(y,k){var A=v(x,k);if(A.status==="error")return l.reject(y,A.value);var L=A.value;if(L)p(y,L);else{y.state=f,y.outcome=k;for(var P=-1,$=y.queue.length;++P<$;)y.queue[P].callFulfilled(k)}return y},l.reject=function(y,k){y.state=c,y.outcome=k;for(var A=-1,L=y.queue.length;++A<L;)y.queue[A].callRejected(k);return y},h.resolve=function(y){return y instanceof this?y:l.resolve(new this(a),y)},h.reject=function(y){var k=new this(a);return l.reject(k,y)},h.all=function(y){var k=this;if(Object.prototype.toString.call(y)!=="[object Array]")return this.reject(new TypeError("must be an array"));var A=y.length,L=!1;if(!A)return this.resolve([]);for(var P=new Array(A),$=0,j=-1,q=new this(a);++j<A;)M(y[j],j);return q;function M(J,rt){k.resolve(J).then(function(O){P[rt]=O,++$!==A||L||(L=!0,l.resolve(q,P))},function(O){L||(L=!0,l.reject(q,O))})}},h.race=function(y){var k=this;if(Object.prototype.toString.call(y)!=="[object Array]")return this.reject(new TypeError("must be an array"));var A=y.length,L=!1;if(!A)return this.resolve([]);for(var P=-1,$=new this(a);++P<A;)j=y[P],k.resolve(j).then(function(q){L||(L=!0,l.resolve($,q))},function(q){L||(L=!0,l.reject($,q))});var j;return $}},{immediate:36}],38:[function(n,s,i){var r={};(0,n("./lib/utils/common").assign)(r,n("./lib/deflate"),n("./lib/inflate"),n("./lib/zlib/constants")),s.exports=r},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(n,s,i){var r=n("./zlib/deflate"),a=n("./utils/common"),l=n("./utils/strings"),c=n("./zlib/messages"),f=n("./zlib/zstream"),_=Object.prototype.toString,h=0,w=-1,d=0,x=8;function p(y){if(!(this instanceof p))return new p(y);this.options=a.assign({level:w,method:x,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},y||{});var k=this.options;k.raw&&0<k.windowBits?k.windowBits=-k.windowBits:k.gzip&&0<k.windowBits&&k.windowBits<16&&(k.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var A=r.deflateInit2(this.strm,k.level,k.method,k.windowBits,k.memLevel,k.strategy);if(A!==h)throw new Error(c[A]);if(k.header&&r.deflateSetHeader(this.strm,k.header),k.dictionary){var L;if(L=typeof k.dictionary=="string"?l.string2buf(k.dictionary):_.call(k.dictionary)==="[object ArrayBuffer]"?new Uint8Array(k.dictionary):k.dictionary,(A=r.deflateSetDictionary(this.strm,L))!==h)throw new Error(c[A]);this._dict_set=!0}}function v(y,k){var A=new p(k);if(A.push(y,!0),A.err)throw A.msg||c[A.err];return A.result}p.prototype.push=function(y,k){var A,L,P=this.strm,$=this.options.chunkSize;if(this.ended)return!1;L=k===~~k?k:k===!0?4:0,typeof y=="string"?P.input=l.string2buf(y):_.call(y)==="[object ArrayBuffer]"?P.input=new Uint8Array(y):P.input=y,P.next_in=0,P.avail_in=P.input.length;do{if(P.avail_out===0&&(P.output=new a.Buf8($),P.next_out=0,P.avail_out=$),(A=r.deflate(P,L))!==1&&A!==h)return this.onEnd(A),!(this.ended=!0);P.avail_out!==0&&(P.avail_in!==0||L!==4&&L!==2)||(this.options.to==="string"?this.onData(l.buf2binstring(a.shrinkBuf(P.output,P.next_out))):this.onData(a.shrinkBuf(P.output,P.next_out)))}while((0<P.avail_in||P.avail_out===0)&&A!==1);return L===4?(A=r.deflateEnd(this.strm),this.onEnd(A),this.ended=!0,A===h):L!==2||(this.onEnd(h),!(P.avail_out=0))},p.prototype.onData=function(y){this.chunks.push(y)},p.prototype.onEnd=function(y){y===h&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=y,this.msg=this.strm.msg},i.Deflate=p,i.deflate=v,i.deflateRaw=function(y,k){return(k=k||{}).raw=!0,v(y,k)},i.gzip=function(y,k){return(k=k||{}).gzip=!0,v(y,k)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(n,s,i){var r=n("./zlib/inflate"),a=n("./utils/common"),l=n("./utils/strings"),c=n("./zlib/constants"),f=n("./zlib/messages"),_=n("./zlib/zstream"),h=n("./zlib/gzheader"),w=Object.prototype.toString;function d(p){if(!(this instanceof d))return new d(p);this.options=a.assign({chunkSize:16384,windowBits:0,to:""},p||{});var v=this.options;v.raw&&0<=v.windowBits&&v.windowBits<16&&(v.windowBits=-v.windowBits,v.windowBits===0&&(v.windowBits=-15)),!(0<=v.windowBits&&v.windowBits<16)||p&&p.windowBits||(v.windowBits+=32),15<v.windowBits&&v.windowBits<48&&!(15&v.windowBits)&&(v.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new _,this.strm.avail_out=0;var y=r.inflateInit2(this.strm,v.windowBits);if(y!==c.Z_OK)throw new Error(f[y]);this.header=new h,r.inflateGetHeader(this.strm,this.header)}function x(p,v){var y=new d(v);if(y.push(p,!0),y.err)throw y.msg||f[y.err];return y.result}d.prototype.push=function(p,v){var y,k,A,L,P,$,j=this.strm,q=this.options.chunkSize,M=this.options.dictionary,J=!1;if(this.ended)return!1;k=v===~~v?v:v===!0?c.Z_FINISH:c.Z_NO_FLUSH,typeof p=="string"?j.input=l.binstring2buf(p):w.call(p)==="[object ArrayBuffer]"?j.input=new Uint8Array(p):j.input=p,j.next_in=0,j.avail_in=j.input.length;do{if(j.avail_out===0&&(j.output=new a.Buf8(q),j.next_out=0,j.avail_out=q),(y=r.inflate(j,c.Z_NO_FLUSH))===c.Z_NEED_DICT&&M&&($=typeof M=="string"?l.string2buf(M):w.call(M)==="[object ArrayBuffer]"?new Uint8Array(M):M,y=r.inflateSetDictionary(this.strm,$)),y===c.Z_BUF_ERROR&&J===!0&&(y=c.Z_OK,J=!1),y!==c.Z_STREAM_END&&y!==c.Z_OK)return this.onEnd(y),!(this.ended=!0);j.next_out&&(j.avail_out!==0&&y!==c.Z_STREAM_END&&(j.avail_in!==0||k!==c.Z_FINISH&&k!==c.Z_SYNC_FLUSH)||(this.options.to==="string"?(A=l.utf8border(j.output,j.next_out),L=j.next_out-A,P=l.buf2string(j.output,A),j.next_out=L,j.avail_out=q-L,L&&a.arraySet(j.output,j.output,A,L,0),this.onData(P)):this.onData(a.shrinkBuf(j.output,j.next_out)))),j.avail_in===0&&j.avail_out===0&&(J=!0)}while((0<j.avail_in||j.avail_out===0)&&y!==c.Z_STREAM_END);return y===c.Z_STREAM_END&&(k=c.Z_FINISH),k===c.Z_FINISH?(y=r.inflateEnd(this.strm),this.onEnd(y),this.ended=!0,y===c.Z_OK):k!==c.Z_SYNC_FLUSH||(this.onEnd(c.Z_OK),!(j.avail_out=0))},d.prototype.onData=function(p){this.chunks.push(p)},d.prototype.onEnd=function(p){p===c.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=p,this.msg=this.strm.msg},i.Inflate=d,i.inflate=x,i.inflateRaw=function(p,v){return(v=v||{}).raw=!0,x(p,v)},i.ungzip=x},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(n,s,i){var r=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";i.assign=function(c){for(var f=Array.prototype.slice.call(arguments,1);f.length;){var _=f.shift();if(_){if(typeof _!="object")throw new TypeError(_+"must be non-object");for(var h in _)_.hasOwnProperty(h)&&(c[h]=_[h])}}return c},i.shrinkBuf=function(c,f){return c.length===f?c:c.subarray?c.subarray(0,f):(c.length=f,c)};var a={arraySet:function(c,f,_,h,w){if(f.subarray&&c.subarray)c.set(f.subarray(_,_+h),w);else for(var d=0;d<h;d++)c[w+d]=f[_+d]},flattenChunks:function(c){var f,_,h,w,d,x;for(f=h=0,_=c.length;f<_;f++)h+=c[f].length;for(x=new Uint8Array(h),f=w=0,_=c.length;f<_;f++)d=c[f],x.set(d,w),w+=d.length;return x}},l={arraySet:function(c,f,_,h,w){for(var d=0;d<h;d++)c[w+d]=f[_+d]},flattenChunks:function(c){return[].concat.apply([],c)}};i.setTyped=function(c){c?(i.Buf8=Uint8Array,i.Buf16=Uint16Array,i.Buf32=Int32Array,i.assign(i,a)):(i.Buf8=Array,i.Buf16=Array,i.Buf32=Array,i.assign(i,l))},i.setTyped(r)},{}],42:[function(n,s,i){var r=n("./common"),a=!0,l=!0;try{String.fromCharCode.apply(null,[0])}catch{a=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{l=!1}for(var c=new r.Buf8(256),f=0;f<256;f++)c[f]=252<=f?6:248<=f?5:240<=f?4:224<=f?3:192<=f?2:1;function _(h,w){if(w<65537&&(h.subarray&&l||!h.subarray&&a))return String.fromCharCode.apply(null,r.shrinkBuf(h,w));for(var d="",x=0;x<w;x++)d+=String.fromCharCode(h[x]);return d}c[254]=c[254]=1,i.string2buf=function(h){var w,d,x,p,v,y=h.length,k=0;for(p=0;p<y;p++)(64512&(d=h.charCodeAt(p)))==55296&&p+1<y&&(64512&(x=h.charCodeAt(p+1)))==56320&&(d=65536+(d-55296<<10)+(x-56320),p++),k+=d<128?1:d<2048?2:d<65536?3:4;for(w=new r.Buf8(k),p=v=0;v<k;p++)(64512&(d=h.charCodeAt(p)))==55296&&p+1<y&&(64512&(x=h.charCodeAt(p+1)))==56320&&(d=65536+(d-55296<<10)+(x-56320),p++),d<128?w[v++]=d:(d<2048?w[v++]=192|d>>>6:(d<65536?w[v++]=224|d>>>12:(w[v++]=240|d>>>18,w[v++]=128|d>>>12&63),w[v++]=128|d>>>6&63),w[v++]=128|63&d);return w},i.buf2binstring=function(h){return _(h,h.length)},i.binstring2buf=function(h){for(var w=new r.Buf8(h.length),d=0,x=w.length;d<x;d++)w[d]=h.charCodeAt(d);return w},i.buf2string=function(h,w){var d,x,p,v,y=w||h.length,k=new Array(2*y);for(d=x=0;d<y;)if((p=h[d++])<128)k[x++]=p;else if(4<(v=c[p]))k[x++]=65533,d+=v-1;else{for(p&=v===2?31:v===3?15:7;1<v&&d<y;)p=p<<6|63&h[d++],v--;1<v?k[x++]=65533:p<65536?k[x++]=p:(p-=65536,k[x++]=55296|p>>10&1023,k[x++]=56320|1023&p)}return _(k,x)},i.utf8border=function(h,w){var d;for((w=w||h.length)>h.length&&(w=h.length),d=w-1;0<=d&&(192&h[d])==128;)d--;return d<0||d===0?w:d+c[h[d]]>w?d:w}},{"./common":41}],43:[function(n,s,i){s.exports=function(r,a,l,c){for(var f=65535&r|0,_=r>>>16&65535|0,h=0;l!==0;){for(l-=h=2e3<l?2e3:l;_=_+(f=f+a[c++]|0)|0,--h;);f%=65521,_%=65521}return f|_<<16|0}},{}],44:[function(n,s,i){s.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(n,s,i){var r=function(){for(var a,l=[],c=0;c<256;c++){a=c;for(var f=0;f<8;f++)a=1&a?3988292384^a>>>1:a>>>1;l[c]=a}return l}();s.exports=function(a,l,c,f){var _=r,h=f+c;a^=-1;for(var w=f;w<h;w++)a=a>>>8^_[255&(a^l[w])];return-1^a}},{}],46:[function(n,s,i){var r,a=n("../utils/common"),l=n("./trees"),c=n("./adler32"),f=n("./crc32"),_=n("./messages"),h=0,w=4,d=0,x=-2,p=-1,v=4,y=2,k=8,A=9,L=286,P=30,$=19,j=2*L+1,q=15,M=3,J=258,rt=J+M+1,O=42,V=113,u=1,K=2,st=3,Z=4;function tt(o,I){return o.msg=_[I],I}function Y(o){return(o<<1)-(4<o?9:0)}function et(o){for(var I=o.length;0<=--I;)o[I]=0}function F(o){var I=o.state,E=I.pending;E>o.avail_out&&(E=o.avail_out),E!==0&&(a.arraySet(o.output,I.pending_buf,I.pending_out,E,o.next_out),o.next_out+=E,I.pending_out+=E,o.total_out+=E,o.avail_out-=E,I.pending-=E,I.pending===0&&(I.pending_out=0))}function R(o,I){l._tr_flush_block(o,0<=o.block_start?o.block_start:-1,o.strstart-o.block_start,I),o.block_start=o.strstart,F(o.strm)}function lt(o,I){o.pending_buf[o.pending++]=I}function nt(o,I){o.pending_buf[o.pending++]=I>>>8&255,o.pending_buf[o.pending++]=255&I}function Q(o,I){var E,g,m=o.max_chain_length,C=o.strstart,B=o.prev_length,D=o.nice_match,T=o.strstart>o.w_size-rt?o.strstart-(o.w_size-rt):0,U=o.window,G=o.w_mask,W=o.prev,X=o.strstart+J,it=U[C+B-1],ot=U[C+B];o.prev_length>=o.good_match&&(m>>=2),D>o.lookahead&&(D=o.lookahead);do if(U[(E=I)+B]===ot&&U[E+B-1]===it&&U[E]===U[C]&&U[++E]===U[C+1]){C+=2,E++;do;while(U[++C]===U[++E]&&U[++C]===U[++E]&&U[++C]===U[++E]&&U[++C]===U[++E]&&U[++C]===U[++E]&&U[++C]===U[++E]&&U[++C]===U[++E]&&U[++C]===U[++E]&&C<X);if(g=J-(X-C),C=X-J,B<g){if(o.match_start=I,D<=(B=g))break;it=U[C+B-1],ot=U[C+B]}}while((I=W[I&G])>T&&--m!=0);return B<=o.lookahead?B:o.lookahead}function ht(o){var I,E,g,m,C,B,D,T,U,G,W=o.w_size;do{if(m=o.window_size-o.lookahead-o.strstart,o.strstart>=W+(W-rt)){for(a.arraySet(o.window,o.window,W,W,0),o.match_start-=W,o.strstart-=W,o.block_start-=W,I=E=o.hash_size;g=o.head[--I],o.head[I]=W<=g?g-W:0,--E;);for(I=E=W;g=o.prev[--I],o.prev[I]=W<=g?g-W:0,--E;);m+=W}if(o.strm.avail_in===0)break;if(B=o.strm,D=o.window,T=o.strstart+o.lookahead,U=m,G=void 0,G=B.avail_in,U<G&&(G=U),E=G===0?0:(B.avail_in-=G,a.arraySet(D,B.input,B.next_in,G,T),B.state.wrap===1?B.adler=c(B.adler,D,G,T):B.state.wrap===2&&(B.adler=f(B.adler,D,G,T)),B.next_in+=G,B.total_in+=G,G),o.lookahead+=E,o.lookahead+o.insert>=M)for(C=o.strstart-o.insert,o.ins_h=o.window[C],o.ins_h=(o.ins_h<<o.hash_shift^o.window[C+1])&o.hash_mask;o.insert&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[C+M-1])&o.hash_mask,o.prev[C&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=C,C++,o.insert--,!(o.lookahead+o.insert<M)););}while(o.lookahead<rt&&o.strm.avail_in!==0)}function yt(o,I){for(var E,g;;){if(o.lookahead<rt){if(ht(o),o.lookahead<rt&&I===h)return u;if(o.lookahead===0)break}if(E=0,o.lookahead>=M&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+M-1])&o.hash_mask,E=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart),E!==0&&o.strstart-E<=o.w_size-rt&&(o.match_length=Q(o,E)),o.match_length>=M)if(g=l._tr_tally(o,o.strstart-o.match_start,o.match_length-M),o.lookahead-=o.match_length,o.match_length<=o.max_lazy_match&&o.lookahead>=M){for(o.match_length--;o.strstart++,o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+M-1])&o.hash_mask,E=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart,--o.match_length!=0;);o.strstart++}else o.strstart+=o.match_length,o.match_length=0,o.ins_h=o.window[o.strstart],o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+1])&o.hash_mask;else g=l._tr_tally(o,0,o.window[o.strstart]),o.lookahead--,o.strstart++;if(g&&(R(o,!1),o.strm.avail_out===0))return u}return o.insert=o.strstart<M-1?o.strstart:M-1,I===w?(R(o,!0),o.strm.avail_out===0?st:Z):o.last_lit&&(R(o,!1),o.strm.avail_out===0)?u:K}function dt(o,I){for(var E,g,m;;){if(o.lookahead<rt){if(ht(o),o.lookahead<rt&&I===h)return u;if(o.lookahead===0)break}if(E=0,o.lookahead>=M&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+M-1])&o.hash_mask,E=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart),o.prev_length=o.match_length,o.prev_match=o.match_start,o.match_length=M-1,E!==0&&o.prev_length<o.max_lazy_match&&o.strstart-E<=o.w_size-rt&&(o.match_length=Q(o,E),o.match_length<=5&&(o.strategy===1||o.match_length===M&&4096<o.strstart-o.match_start)&&(o.match_length=M-1)),o.prev_length>=M&&o.match_length<=o.prev_length){for(m=o.strstart+o.lookahead-M,g=l._tr_tally(o,o.strstart-1-o.prev_match,o.prev_length-M),o.lookahead-=o.prev_length-1,o.prev_length-=2;++o.strstart<=m&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+M-1])&o.hash_mask,E=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart),--o.prev_length!=0;);if(o.match_available=0,o.match_length=M-1,o.strstart++,g&&(R(o,!1),o.strm.avail_out===0))return u}else if(o.match_available){if((g=l._tr_tally(o,0,o.window[o.strstart-1]))&&R(o,!1),o.strstart++,o.lookahead--,o.strm.avail_out===0)return u}else o.match_available=1,o.strstart++,o.lookahead--}return o.match_available&&(g=l._tr_tally(o,0,o.window[o.strstart-1]),o.match_available=0),o.insert=o.strstart<M-1?o.strstart:M-1,I===w?(R(o,!0),o.strm.avail_out===0?st:Z):o.last_lit&&(R(o,!1),o.strm.avail_out===0)?u:K}function pt(o,I,E,g,m){this.good_length=o,this.max_lazy=I,this.nice_length=E,this.max_chain=g,this.func=m}function N(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=k,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new a.Buf16(2*j),this.dyn_dtree=new a.Buf16(2*(2*P+1)),this.bl_tree=new a.Buf16(2*(2*$+1)),et(this.dyn_ltree),et(this.dyn_dtree),et(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new a.Buf16(q+1),this.heap=new a.Buf16(2*L+1),et(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new a.Buf16(2*L+1),et(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function z(o){var I;return o&&o.state?(o.total_in=o.total_out=0,o.data_type=y,(I=o.state).pending=0,I.pending_out=0,I.wrap<0&&(I.wrap=-I.wrap),I.status=I.wrap?O:V,o.adler=I.wrap===2?0:1,I.last_flush=h,l._tr_init(I),d):tt(o,x)}function H(o){var I=z(o);return I===d&&function(E){E.window_size=2*E.w_size,et(E.head),E.max_lazy_match=r[E.level].max_lazy,E.good_match=r[E.level].good_length,E.nice_match=r[E.level].nice_length,E.max_chain_length=r[E.level].max_chain,E.strstart=0,E.block_start=0,E.lookahead=0,E.insert=0,E.match_length=E.prev_length=M-1,E.match_available=0,E.ins_h=0}(o.state),I}function S(o,I,E,g,m,C){if(!o)return x;var B=1;if(I===p&&(I=6),g<0?(B=0,g=-g):15<g&&(B=2,g-=16),m<1||A<m||E!==k||g<8||15<g||I<0||9<I||C<0||v<C)return tt(o,x);g===8&&(g=9);var D=new N;return(o.state=D).strm=o,D.wrap=B,D.gzhead=null,D.w_bits=g,D.w_size=1<<D.w_bits,D.w_mask=D.w_size-1,D.hash_bits=m+7,D.hash_size=1<<D.hash_bits,D.hash_mask=D.hash_size-1,D.hash_shift=~~((D.hash_bits+M-1)/M),D.window=new a.Buf8(2*D.w_size),D.head=new a.Buf16(D.hash_size),D.prev=new a.Buf16(D.w_size),D.lit_bufsize=1<<m+6,D.pending_buf_size=4*D.lit_bufsize,D.pending_buf=new a.Buf8(D.pending_buf_size),D.d_buf=1*D.lit_bufsize,D.l_buf=3*D.lit_bufsize,D.level=I,D.strategy=C,D.method=E,H(o)}r=[new pt(0,0,0,0,function(o,I){var E=65535;for(E>o.pending_buf_size-5&&(E=o.pending_buf_size-5);;){if(o.lookahead<=1){if(ht(o),o.lookahead===0&&I===h)return u;if(o.lookahead===0)break}o.strstart+=o.lookahead,o.lookahead=0;var g=o.block_start+E;if((o.strstart===0||o.strstart>=g)&&(o.lookahead=o.strstart-g,o.strstart=g,R(o,!1),o.strm.avail_out===0)||o.strstart-o.block_start>=o.w_size-rt&&(R(o,!1),o.strm.avail_out===0))return u}return o.insert=0,I===w?(R(o,!0),o.strm.avail_out===0?st:Z):(o.strstart>o.block_start&&(R(o,!1),o.strm.avail_out),u)}),new pt(4,4,8,4,yt),new pt(4,5,16,8,yt),new pt(4,6,32,32,yt),new pt(4,4,16,16,dt),new pt(8,16,32,32,dt),new pt(8,16,128,128,dt),new pt(8,32,128,256,dt),new pt(32,128,258,1024,dt),new pt(32,258,258,4096,dt)],i.deflateInit=function(o,I){return S(o,I,k,15,8,0)},i.deflateInit2=S,i.deflateReset=H,i.deflateResetKeep=z,i.deflateSetHeader=function(o,I){return o&&o.state?o.state.wrap!==2?x:(o.state.gzhead=I,d):x},i.deflate=function(o,I){var E,g,m,C;if(!o||!o.state||5<I||I<0)return o?tt(o,x):x;if(g=o.state,!o.output||!o.input&&o.avail_in!==0||g.status===666&&I!==w)return tt(o,o.avail_out===0?-5:x);if(g.strm=o,E=g.last_flush,g.last_flush=I,g.status===O)if(g.wrap===2)o.adler=0,lt(g,31),lt(g,139),lt(g,8),g.gzhead?(lt(g,(g.gzhead.text?1:0)+(g.gzhead.hcrc?2:0)+(g.gzhead.extra?4:0)+(g.gzhead.name?8:0)+(g.gzhead.comment?16:0)),lt(g,255&g.gzhead.time),lt(g,g.gzhead.time>>8&255),lt(g,g.gzhead.time>>16&255),lt(g,g.gzhead.time>>24&255),lt(g,g.level===9?2:2<=g.strategy||g.level<2?4:0),lt(g,255&g.gzhead.os),g.gzhead.extra&&g.gzhead.extra.length&&(lt(g,255&g.gzhead.extra.length),lt(g,g.gzhead.extra.length>>8&255)),g.gzhead.hcrc&&(o.adler=f(o.adler,g.pending_buf,g.pending,0)),g.gzindex=0,g.status=69):(lt(g,0),lt(g,0),lt(g,0),lt(g,0),lt(g,0),lt(g,g.level===9?2:2<=g.strategy||g.level<2?4:0),lt(g,3),g.status=V);else{var B=k+(g.w_bits-8<<4)<<8;B|=(2<=g.strategy||g.level<2?0:g.level<6?1:g.level===6?2:3)<<6,g.strstart!==0&&(B|=32),B+=31-B%31,g.status=V,nt(g,B),g.strstart!==0&&(nt(g,o.adler>>>16),nt(g,65535&o.adler)),o.adler=1}if(g.status===69)if(g.gzhead.extra){for(m=g.pending;g.gzindex<(65535&g.gzhead.extra.length)&&(g.pending!==g.pending_buf_size||(g.gzhead.hcrc&&g.pending>m&&(o.adler=f(o.adler,g.pending_buf,g.pending-m,m)),F(o),m=g.pending,g.pending!==g.pending_buf_size));)lt(g,255&g.gzhead.extra[g.gzindex]),g.gzindex++;g.gzhead.hcrc&&g.pending>m&&(o.adler=f(o.adler,g.pending_buf,g.pending-m,m)),g.gzindex===g.gzhead.extra.length&&(g.gzindex=0,g.status=73)}else g.status=73;if(g.status===73)if(g.gzhead.name){m=g.pending;do{if(g.pending===g.pending_buf_size&&(g.gzhead.hcrc&&g.pending>m&&(o.adler=f(o.adler,g.pending_buf,g.pending-m,m)),F(o),m=g.pending,g.pending===g.pending_buf_size)){C=1;break}C=g.gzindex<g.gzhead.name.length?255&g.gzhead.name.charCodeAt(g.gzindex++):0,lt(g,C)}while(C!==0);g.gzhead.hcrc&&g.pending>m&&(o.adler=f(o.adler,g.pending_buf,g.pending-m,m)),C===0&&(g.gzindex=0,g.status=91)}else g.status=91;if(g.status===91)if(g.gzhead.comment){m=g.pending;do{if(g.pending===g.pending_buf_size&&(g.gzhead.hcrc&&g.pending>m&&(o.adler=f(o.adler,g.pending_buf,g.pending-m,m)),F(o),m=g.pending,g.pending===g.pending_buf_size)){C=1;break}C=g.gzindex<g.gzhead.comment.length?255&g.gzhead.comment.charCodeAt(g.gzindex++):0,lt(g,C)}while(C!==0);g.gzhead.hcrc&&g.pending>m&&(o.adler=f(o.adler,g.pending_buf,g.pending-m,m)),C===0&&(g.status=103)}else g.status=103;if(g.status===103&&(g.gzhead.hcrc?(g.pending+2>g.pending_buf_size&&F(o),g.pending+2<=g.pending_buf_size&&(lt(g,255&o.adler),lt(g,o.adler>>8&255),o.adler=0,g.status=V)):g.status=V),g.pending!==0){if(F(o),o.avail_out===0)return g.last_flush=-1,d}else if(o.avail_in===0&&Y(I)<=Y(E)&&I!==w)return tt(o,-5);if(g.status===666&&o.avail_in!==0)return tt(o,-5);if(o.avail_in!==0||g.lookahead!==0||I!==h&&g.status!==666){var D=g.strategy===2?function(T,U){for(var G;;){if(T.lookahead===0&&(ht(T),T.lookahead===0)){if(U===h)return u;break}if(T.match_length=0,G=l._tr_tally(T,0,T.window[T.strstart]),T.lookahead--,T.strstart++,G&&(R(T,!1),T.strm.avail_out===0))return u}return T.insert=0,U===w?(R(T,!0),T.strm.avail_out===0?st:Z):T.last_lit&&(R(T,!1),T.strm.avail_out===0)?u:K}(g,I):g.strategy===3?function(T,U){for(var G,W,X,it,ot=T.window;;){if(T.lookahead<=J){if(ht(T),T.lookahead<=J&&U===h)return u;if(T.lookahead===0)break}if(T.match_length=0,T.lookahead>=M&&0<T.strstart&&(W=ot[X=T.strstart-1])===ot[++X]&&W===ot[++X]&&W===ot[++X]){it=T.strstart+J;do;while(W===ot[++X]&&W===ot[++X]&&W===ot[++X]&&W===ot[++X]&&W===ot[++X]&&W===ot[++X]&&W===ot[++X]&&W===ot[++X]&&X<it);T.match_length=J-(it-X),T.match_length>T.lookahead&&(T.match_length=T.lookahead)}if(T.match_length>=M?(G=l._tr_tally(T,1,T.match_length-M),T.lookahead-=T.match_length,T.strstart+=T.match_length,T.match_length=0):(G=l._tr_tally(T,0,T.window[T.strstart]),T.lookahead--,T.strstart++),G&&(R(T,!1),T.strm.avail_out===0))return u}return T.insert=0,U===w?(R(T,!0),T.strm.avail_out===0?st:Z):T.last_lit&&(R(T,!1),T.strm.avail_out===0)?u:K}(g,I):r[g.level].func(g,I);if(D!==st&&D!==Z||(g.status=666),D===u||D===st)return o.avail_out===0&&(g.last_flush=-1),d;if(D===K&&(I===1?l._tr_align(g):I!==5&&(l._tr_stored_block(g,0,0,!1),I===3&&(et(g.head),g.lookahead===0&&(g.strstart=0,g.block_start=0,g.insert=0))),F(o),o.avail_out===0))return g.last_flush=-1,d}return I!==w?d:g.wrap<=0?1:(g.wrap===2?(lt(g,255&o.adler),lt(g,o.adler>>8&255),lt(g,o.adler>>16&255),lt(g,o.adler>>24&255),lt(g,255&o.total_in),lt(g,o.total_in>>8&255),lt(g,o.total_in>>16&255),lt(g,o.total_in>>24&255)):(nt(g,o.adler>>>16),nt(g,65535&o.adler)),F(o),0<g.wrap&&(g.wrap=-g.wrap),g.pending!==0?d:1)},i.deflateEnd=function(o){var I;return o&&o.state?(I=o.state.status)!==O&&I!==69&&I!==73&&I!==91&&I!==103&&I!==V&&I!==666?tt(o,x):(o.state=null,I===V?tt(o,-3):d):x},i.deflateSetDictionary=function(o,I){var E,g,m,C,B,D,T,U,G=I.length;if(!o||!o.state||(C=(E=o.state).wrap)===2||C===1&&E.status!==O||E.lookahead)return x;for(C===1&&(o.adler=c(o.adler,I,G,0)),E.wrap=0,G>=E.w_size&&(C===0&&(et(E.head),E.strstart=0,E.block_start=0,E.insert=0),U=new a.Buf8(E.w_size),a.arraySet(U,I,G-E.w_size,E.w_size,0),I=U,G=E.w_size),B=o.avail_in,D=o.next_in,T=o.input,o.avail_in=G,o.next_in=0,o.input=I,ht(E);E.lookahead>=M;){for(g=E.strstart,m=E.lookahead-(M-1);E.ins_h=(E.ins_h<<E.hash_shift^E.window[g+M-1])&E.hash_mask,E.prev[g&E.w_mask]=E.head[E.ins_h],E.head[E.ins_h]=g,g++,--m;);E.strstart=g,E.lookahead=M-1,ht(E)}return E.strstart+=E.lookahead,E.block_start=E.strstart,E.insert=E.lookahead,E.lookahead=0,E.match_length=E.prev_length=M-1,E.match_available=0,o.next_in=D,o.input=T,o.avail_in=B,E.wrap=C,d},i.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(n,s,i){s.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(n,s,i){s.exports=function(r,a){var l,c,f,_,h,w,d,x,p,v,y,k,A,L,P,$,j,q,M,J,rt,O,V,u,K;l=r.state,c=r.next_in,u=r.input,f=c+(r.avail_in-5),_=r.next_out,K=r.output,h=_-(a-r.avail_out),w=_+(r.avail_out-257),d=l.dmax,x=l.wsize,p=l.whave,v=l.wnext,y=l.window,k=l.hold,A=l.bits,L=l.lencode,P=l.distcode,$=(1<<l.lenbits)-1,j=(1<<l.distbits)-1;t:do{A<15&&(k+=u[c++]<<A,A+=8,k+=u[c++]<<A,A+=8),q=L[k&$];e:for(;;){if(k>>>=M=q>>>24,A-=M,(M=q>>>16&255)===0)K[_++]=65535&q;else{if(!(16&M)){if(!(64&M)){q=L[(65535&q)+(k&(1<<M)-1)];continue e}if(32&M){l.mode=12;break t}r.msg="invalid literal/length code",l.mode=30;break t}J=65535&q,(M&=15)&&(A<M&&(k+=u[c++]<<A,A+=8),J+=k&(1<<M)-1,k>>>=M,A-=M),A<15&&(k+=u[c++]<<A,A+=8,k+=u[c++]<<A,A+=8),q=P[k&j];n:for(;;){if(k>>>=M=q>>>24,A-=M,!(16&(M=q>>>16&255))){if(!(64&M)){q=P[(65535&q)+(k&(1<<M)-1)];continue n}r.msg="invalid distance code",l.mode=30;break t}if(rt=65535&q,A<(M&=15)&&(k+=u[c++]<<A,(A+=8)<M&&(k+=u[c++]<<A,A+=8)),d<(rt+=k&(1<<M)-1)){r.msg="invalid distance too far back",l.mode=30;break t}if(k>>>=M,A-=M,(M=_-h)<rt){if(p<(M=rt-M)&&l.sane){r.msg="invalid distance too far back",l.mode=30;break t}if(V=y,(O=0)===v){if(O+=x-M,M<J){for(J-=M;K[_++]=y[O++],--M;);O=_-rt,V=K}}else if(v<M){if(O+=x+v-M,(M-=v)<J){for(J-=M;K[_++]=y[O++],--M;);if(O=0,v<J){for(J-=M=v;K[_++]=y[O++],--M;);O=_-rt,V=K}}}else if(O+=v-M,M<J){for(J-=M;K[_++]=y[O++],--M;);O=_-rt,V=K}for(;2<J;)K[_++]=V[O++],K[_++]=V[O++],K[_++]=V[O++],J-=3;J&&(K[_++]=V[O++],1<J&&(K[_++]=V[O++]))}else{for(O=_-rt;K[_++]=K[O++],K[_++]=K[O++],K[_++]=K[O++],2<(J-=3););J&&(K[_++]=K[O++],1<J&&(K[_++]=K[O++]))}break}}break}}while(c<f&&_<w);c-=J=A>>3,k&=(1<<(A-=J<<3))-1,r.next_in=c,r.next_out=_,r.avail_in=c<f?f-c+5:5-(c-f),r.avail_out=_<w?w-_+257:257-(_-w),l.hold=k,l.bits=A}},{}],49:[function(n,s,i){var r=n("../utils/common"),a=n("./adler32"),l=n("./crc32"),c=n("./inffast"),f=n("./inftrees"),_=1,h=2,w=0,d=-2,x=1,p=852,v=592;function y(O){return(O>>>24&255)+(O>>>8&65280)+((65280&O)<<8)+((255&O)<<24)}function k(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function A(O){var V;return O&&O.state?(V=O.state,O.total_in=O.total_out=V.total=0,O.msg="",V.wrap&&(O.adler=1&V.wrap),V.mode=x,V.last=0,V.havedict=0,V.dmax=32768,V.head=null,V.hold=0,V.bits=0,V.lencode=V.lendyn=new r.Buf32(p),V.distcode=V.distdyn=new r.Buf32(v),V.sane=1,V.back=-1,w):d}function L(O){var V;return O&&O.state?((V=O.state).wsize=0,V.whave=0,V.wnext=0,A(O)):d}function P(O,V){var u,K;return O&&O.state?(K=O.state,V<0?(u=0,V=-V):(u=1+(V>>4),V<48&&(V&=15)),V&&(V<8||15<V)?d:(K.window!==null&&K.wbits!==V&&(K.window=null),K.wrap=u,K.wbits=V,L(O))):d}function $(O,V){var u,K;return O?(K=new k,(O.state=K).window=null,(u=P(O,V))!==w&&(O.state=null),u):d}var j,q,M=!0;function J(O){if(M){var V;for(j=new r.Buf32(512),q=new r.Buf32(32),V=0;V<144;)O.lens[V++]=8;for(;V<256;)O.lens[V++]=9;for(;V<280;)O.lens[V++]=7;for(;V<288;)O.lens[V++]=8;for(f(_,O.lens,0,288,j,0,O.work,{bits:9}),V=0;V<32;)O.lens[V++]=5;f(h,O.lens,0,32,q,0,O.work,{bits:5}),M=!1}O.lencode=j,O.lenbits=9,O.distcode=q,O.distbits=5}function rt(O,V,u,K){var st,Z=O.state;return Z.window===null&&(Z.wsize=1<<Z.wbits,Z.wnext=0,Z.whave=0,Z.window=new r.Buf8(Z.wsize)),K>=Z.wsize?(r.arraySet(Z.window,V,u-Z.wsize,Z.wsize,0),Z.wnext=0,Z.whave=Z.wsize):(K<(st=Z.wsize-Z.wnext)&&(st=K),r.arraySet(Z.window,V,u-K,st,Z.wnext),(K-=st)?(r.arraySet(Z.window,V,u-K,K,0),Z.wnext=K,Z.whave=Z.wsize):(Z.wnext+=st,Z.wnext===Z.wsize&&(Z.wnext=0),Z.whave<Z.wsize&&(Z.whave+=st))),0}i.inflateReset=L,i.inflateReset2=P,i.inflateResetKeep=A,i.inflateInit=function(O){return $(O,15)},i.inflateInit2=$,i.inflate=function(O,V){var u,K,st,Z,tt,Y,et,F,R,lt,nt,Q,ht,yt,dt,pt,N,z,H,S,o,I,E,g,m=0,C=new r.Buf8(4),B=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!O||!O.state||!O.output||!O.input&&O.avail_in!==0)return d;(u=O.state).mode===12&&(u.mode=13),tt=O.next_out,st=O.output,et=O.avail_out,Z=O.next_in,K=O.input,Y=O.avail_in,F=u.hold,R=u.bits,lt=Y,nt=et,I=w;t:for(;;)switch(u.mode){case x:if(u.wrap===0){u.mode=13;break}for(;R<16;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if(2&u.wrap&&F===35615){C[u.check=0]=255&F,C[1]=F>>>8&255,u.check=l(u.check,C,2,0),R=F=0,u.mode=2;break}if(u.flags=0,u.head&&(u.head.done=!1),!(1&u.wrap)||(((255&F)<<8)+(F>>8))%31){O.msg="incorrect header check",u.mode=30;break}if((15&F)!=8){O.msg="unknown compression method",u.mode=30;break}if(R-=4,o=8+(15&(F>>>=4)),u.wbits===0)u.wbits=o;else if(o>u.wbits){O.msg="invalid window size",u.mode=30;break}u.dmax=1<<o,O.adler=u.check=1,u.mode=512&F?10:12,R=F=0;break;case 2:for(;R<16;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if(u.flags=F,(255&u.flags)!=8){O.msg="unknown compression method",u.mode=30;break}if(57344&u.flags){O.msg="unknown header flags set",u.mode=30;break}u.head&&(u.head.text=F>>8&1),512&u.flags&&(C[0]=255&F,C[1]=F>>>8&255,u.check=l(u.check,C,2,0)),R=F=0,u.mode=3;case 3:for(;R<32;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}u.head&&(u.head.time=F),512&u.flags&&(C[0]=255&F,C[1]=F>>>8&255,C[2]=F>>>16&255,C[3]=F>>>24&255,u.check=l(u.check,C,4,0)),R=F=0,u.mode=4;case 4:for(;R<16;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}u.head&&(u.head.xflags=255&F,u.head.os=F>>8),512&u.flags&&(C[0]=255&F,C[1]=F>>>8&255,u.check=l(u.check,C,2,0)),R=F=0,u.mode=5;case 5:if(1024&u.flags){for(;R<16;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}u.length=F,u.head&&(u.head.extra_len=F),512&u.flags&&(C[0]=255&F,C[1]=F>>>8&255,u.check=l(u.check,C,2,0)),R=F=0}else u.head&&(u.head.extra=null);u.mode=6;case 6:if(1024&u.flags&&(Y<(Q=u.length)&&(Q=Y),Q&&(u.head&&(o=u.head.extra_len-u.length,u.head.extra||(u.head.extra=new Array(u.head.extra_len)),r.arraySet(u.head.extra,K,Z,Q,o)),512&u.flags&&(u.check=l(u.check,K,Q,Z)),Y-=Q,Z+=Q,u.length-=Q),u.length))break t;u.length=0,u.mode=7;case 7:if(2048&u.flags){if(Y===0)break t;for(Q=0;o=K[Z+Q++],u.head&&o&&u.length<65536&&(u.head.name+=String.fromCharCode(o)),o&&Q<Y;);if(512&u.flags&&(u.check=l(u.check,K,Q,Z)),Y-=Q,Z+=Q,o)break t}else u.head&&(u.head.name=null);u.length=0,u.mode=8;case 8:if(4096&u.flags){if(Y===0)break t;for(Q=0;o=K[Z+Q++],u.head&&o&&u.length<65536&&(u.head.comment+=String.fromCharCode(o)),o&&Q<Y;);if(512&u.flags&&(u.check=l(u.check,K,Q,Z)),Y-=Q,Z+=Q,o)break t}else u.head&&(u.head.comment=null);u.mode=9;case 9:if(512&u.flags){for(;R<16;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if(F!==(65535&u.check)){O.msg="header crc mismatch",u.mode=30;break}R=F=0}u.head&&(u.head.hcrc=u.flags>>9&1,u.head.done=!0),O.adler=u.check=0,u.mode=12;break;case 10:for(;R<32;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}O.adler=u.check=y(F),R=F=0,u.mode=11;case 11:if(u.havedict===0)return O.next_out=tt,O.avail_out=et,O.next_in=Z,O.avail_in=Y,u.hold=F,u.bits=R,2;O.adler=u.check=1,u.mode=12;case 12:if(V===5||V===6)break t;case 13:if(u.last){F>>>=7&R,R-=7&R,u.mode=27;break}for(;R<3;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}switch(u.last=1&F,R-=1,3&(F>>>=1)){case 0:u.mode=14;break;case 1:if(J(u),u.mode=20,V!==6)break;F>>>=2,R-=2;break t;case 2:u.mode=17;break;case 3:O.msg="invalid block type",u.mode=30}F>>>=2,R-=2;break;case 14:for(F>>>=7&R,R-=7&R;R<32;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if((65535&F)!=(F>>>16^65535)){O.msg="invalid stored block lengths",u.mode=30;break}if(u.length=65535&F,R=F=0,u.mode=15,V===6)break t;case 15:u.mode=16;case 16:if(Q=u.length){if(Y<Q&&(Q=Y),et<Q&&(Q=et),Q===0)break t;r.arraySet(st,K,Z,Q,tt),Y-=Q,Z+=Q,et-=Q,tt+=Q,u.length-=Q;break}u.mode=12;break;case 17:for(;R<14;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if(u.nlen=257+(31&F),F>>>=5,R-=5,u.ndist=1+(31&F),F>>>=5,R-=5,u.ncode=4+(15&F),F>>>=4,R-=4,286<u.nlen||30<u.ndist){O.msg="too many length or distance symbols",u.mode=30;break}u.have=0,u.mode=18;case 18:for(;u.have<u.ncode;){for(;R<3;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}u.lens[B[u.have++]]=7&F,F>>>=3,R-=3}for(;u.have<19;)u.lens[B[u.have++]]=0;if(u.lencode=u.lendyn,u.lenbits=7,E={bits:u.lenbits},I=f(0,u.lens,0,19,u.lencode,0,u.work,E),u.lenbits=E.bits,I){O.msg="invalid code lengths set",u.mode=30;break}u.have=0,u.mode=19;case 19:for(;u.have<u.nlen+u.ndist;){for(;pt=(m=u.lencode[F&(1<<u.lenbits)-1])>>>16&255,N=65535&m,!((dt=m>>>24)<=R);){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if(N<16)F>>>=dt,R-=dt,u.lens[u.have++]=N;else{if(N===16){for(g=dt+2;R<g;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if(F>>>=dt,R-=dt,u.have===0){O.msg="invalid bit length repeat",u.mode=30;break}o=u.lens[u.have-1],Q=3+(3&F),F>>>=2,R-=2}else if(N===17){for(g=dt+3;R<g;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}R-=dt,o=0,Q=3+(7&(F>>>=dt)),F>>>=3,R-=3}else{for(g=dt+7;R<g;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}R-=dt,o=0,Q=11+(127&(F>>>=dt)),F>>>=7,R-=7}if(u.have+Q>u.nlen+u.ndist){O.msg="invalid bit length repeat",u.mode=30;break}for(;Q--;)u.lens[u.have++]=o}}if(u.mode===30)break;if(u.lens[256]===0){O.msg="invalid code -- missing end-of-block",u.mode=30;break}if(u.lenbits=9,E={bits:u.lenbits},I=f(_,u.lens,0,u.nlen,u.lencode,0,u.work,E),u.lenbits=E.bits,I){O.msg="invalid literal/lengths set",u.mode=30;break}if(u.distbits=6,u.distcode=u.distdyn,E={bits:u.distbits},I=f(h,u.lens,u.nlen,u.ndist,u.distcode,0,u.work,E),u.distbits=E.bits,I){O.msg="invalid distances set",u.mode=30;break}if(u.mode=20,V===6)break t;case 20:u.mode=21;case 21:if(6<=Y&&258<=et){O.next_out=tt,O.avail_out=et,O.next_in=Z,O.avail_in=Y,u.hold=F,u.bits=R,c(O,nt),tt=O.next_out,st=O.output,et=O.avail_out,Z=O.next_in,K=O.input,Y=O.avail_in,F=u.hold,R=u.bits,u.mode===12&&(u.back=-1);break}for(u.back=0;pt=(m=u.lencode[F&(1<<u.lenbits)-1])>>>16&255,N=65535&m,!((dt=m>>>24)<=R);){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if(pt&&!(240&pt)){for(z=dt,H=pt,S=N;pt=(m=u.lencode[S+((F&(1<<z+H)-1)>>z)])>>>16&255,N=65535&m,!(z+(dt=m>>>24)<=R);){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}F>>>=z,R-=z,u.back+=z}if(F>>>=dt,R-=dt,u.back+=dt,u.length=N,pt===0){u.mode=26;break}if(32&pt){u.back=-1,u.mode=12;break}if(64&pt){O.msg="invalid literal/length code",u.mode=30;break}u.extra=15&pt,u.mode=22;case 22:if(u.extra){for(g=u.extra;R<g;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}u.length+=F&(1<<u.extra)-1,F>>>=u.extra,R-=u.extra,u.back+=u.extra}u.was=u.length,u.mode=23;case 23:for(;pt=(m=u.distcode[F&(1<<u.distbits)-1])>>>16&255,N=65535&m,!((dt=m>>>24)<=R);){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if(!(240&pt)){for(z=dt,H=pt,S=N;pt=(m=u.distcode[S+((F&(1<<z+H)-1)>>z)])>>>16&255,N=65535&m,!(z+(dt=m>>>24)<=R);){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}F>>>=z,R-=z,u.back+=z}if(F>>>=dt,R-=dt,u.back+=dt,64&pt){O.msg="invalid distance code",u.mode=30;break}u.offset=N,u.extra=15&pt,u.mode=24;case 24:if(u.extra){for(g=u.extra;R<g;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}u.offset+=F&(1<<u.extra)-1,F>>>=u.extra,R-=u.extra,u.back+=u.extra}if(u.offset>u.dmax){O.msg="invalid distance too far back",u.mode=30;break}u.mode=25;case 25:if(et===0)break t;if(Q=nt-et,u.offset>Q){if((Q=u.offset-Q)>u.whave&&u.sane){O.msg="invalid distance too far back",u.mode=30;break}ht=Q>u.wnext?(Q-=u.wnext,u.wsize-Q):u.wnext-Q,Q>u.length&&(Q=u.length),yt=u.window}else yt=st,ht=tt-u.offset,Q=u.length;for(et<Q&&(Q=et),et-=Q,u.length-=Q;st[tt++]=yt[ht++],--Q;);u.length===0&&(u.mode=21);break;case 26:if(et===0)break t;st[tt++]=u.length,et--,u.mode=21;break;case 27:if(u.wrap){for(;R<32;){if(Y===0)break t;Y--,F|=K[Z++]<<R,R+=8}if(nt-=et,O.total_out+=nt,u.total+=nt,nt&&(O.adler=u.check=u.flags?l(u.check,st,nt,tt-nt):a(u.check,st,nt,tt-nt)),nt=et,(u.flags?F:y(F))!==u.check){O.msg="incorrect data check",u.mode=30;break}R=F=0}u.mode=28;case 28:if(u.wrap&&u.flags){for(;R<32;){if(Y===0)break t;Y--,F+=K[Z++]<<R,R+=8}if(F!==(4294967295&u.total)){O.msg="incorrect length check",u.mode=30;break}R=F=0}u.mode=29;case 29:I=1;break t;case 30:I=-3;break t;case 31:return-4;case 32:default:return d}return O.next_out=tt,O.avail_out=et,O.next_in=Z,O.avail_in=Y,u.hold=F,u.bits=R,(u.wsize||nt!==O.avail_out&&u.mode<30&&(u.mode<27||V!==4))&&rt(O,O.output,O.next_out,nt-O.avail_out)?(u.mode=31,-4):(lt-=O.avail_in,nt-=O.avail_out,O.total_in+=lt,O.total_out+=nt,u.total+=nt,u.wrap&&nt&&(O.adler=u.check=u.flags?l(u.check,st,nt,O.next_out-nt):a(u.check,st,nt,O.next_out-nt)),O.data_type=u.bits+(u.last?64:0)+(u.mode===12?128:0)+(u.mode===20||u.mode===15?256:0),(lt==0&&nt===0||V===4)&&I===w&&(I=-5),I)},i.inflateEnd=function(O){if(!O||!O.state)return d;var V=O.state;return V.window&&(V.window=null),O.state=null,w},i.inflateGetHeader=function(O,V){var u;return O&&O.state&&2&(u=O.state).wrap?((u.head=V).done=!1,w):d},i.inflateSetDictionary=function(O,V){var u,K=V.length;return O&&O.state?(u=O.state).wrap!==0&&u.mode!==11?d:u.mode===11&&a(1,V,K,0)!==u.check?-3:rt(O,V,K,K)?(u.mode=31,-4):(u.havedict=1,w):d},i.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(n,s,i){var r=n("../utils/common"),a=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],l=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],c=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],f=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];s.exports=function(_,h,w,d,x,p,v,y){var k,A,L,P,$,j,q,M,J,rt=y.bits,O=0,V=0,u=0,K=0,st=0,Z=0,tt=0,Y=0,et=0,F=0,R=null,lt=0,nt=new r.Buf16(16),Q=new r.Buf16(16),ht=null,yt=0;for(O=0;O<=15;O++)nt[O]=0;for(V=0;V<d;V++)nt[h[w+V]]++;for(st=rt,K=15;1<=K&&nt[K]===0;K--);if(K<st&&(st=K),K===0)return x[p++]=20971520,x[p++]=20971520,y.bits=1,0;for(u=1;u<K&&nt[u]===0;u++);for(st<u&&(st=u),O=Y=1;O<=15;O++)if(Y<<=1,(Y-=nt[O])<0)return-1;if(0<Y&&(_===0||K!==1))return-1;for(Q[1]=0,O=1;O<15;O++)Q[O+1]=Q[O]+nt[O];for(V=0;V<d;V++)h[w+V]!==0&&(v[Q[h[w+V]]++]=V);if(j=_===0?(R=ht=v,19):_===1?(R=a,lt-=257,ht=l,yt-=257,256):(R=c,ht=f,-1),O=u,$=p,tt=V=F=0,L=-1,P=(et=1<<(Z=st))-1,_===1&&852<et||_===2&&592<et)return 1;for(;;){for(q=O-tt,J=v[V]<j?(M=0,v[V]):v[V]>j?(M=ht[yt+v[V]],R[lt+v[V]]):(M=96,0),k=1<<O-tt,u=A=1<<Z;x[$+(F>>tt)+(A-=k)]=q<<24|M<<16|J|0,A!==0;);for(k=1<<O-1;F&k;)k>>=1;if(k!==0?(F&=k-1,F+=k):F=0,V++,--nt[O]==0){if(O===K)break;O=h[w+v[V]]}if(st<O&&(F&P)!==L){for(tt===0&&(tt=st),$+=u,Y=1<<(Z=O-tt);Z+tt<K&&!((Y-=nt[Z+tt])<=0);)Z++,Y<<=1;if(et+=1<<Z,_===1&&852<et||_===2&&592<et)return 1;x[L=F&P]=st<<24|Z<<16|$-p|0}}return F!==0&&(x[$+F]=O-tt<<24|64<<16|0),y.bits=st,0}},{"../utils/common":41}],51:[function(n,s,i){s.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(n,s,i){var r=n("../utils/common"),a=0,l=1;function c(m){for(var C=m.length;0<=--C;)m[C]=0}var f=0,_=29,h=256,w=h+1+_,d=30,x=19,p=2*w+1,v=15,y=16,k=7,A=256,L=16,P=17,$=18,j=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],q=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],M=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],J=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],rt=new Array(2*(w+2));c(rt);var O=new Array(2*d);c(O);var V=new Array(512);c(V);var u=new Array(256);c(u);var K=new Array(_);c(K);var st,Z,tt,Y=new Array(d);function et(m,C,B,D,T){this.static_tree=m,this.extra_bits=C,this.extra_base=B,this.elems=D,this.max_length=T,this.has_stree=m&&m.length}function F(m,C){this.dyn_tree=m,this.max_code=0,this.stat_desc=C}function R(m){return m<256?V[m]:V[256+(m>>>7)]}function lt(m,C){m.pending_buf[m.pending++]=255&C,m.pending_buf[m.pending++]=C>>>8&255}function nt(m,C,B){m.bi_valid>y-B?(m.bi_buf|=C<<m.bi_valid&65535,lt(m,m.bi_buf),m.bi_buf=C>>y-m.bi_valid,m.bi_valid+=B-y):(m.bi_buf|=C<<m.bi_valid&65535,m.bi_valid+=B)}function Q(m,C,B){nt(m,B[2*C],B[2*C+1])}function ht(m,C){for(var B=0;B|=1&m,m>>>=1,B<<=1,0<--C;);return B>>>1}function yt(m,C,B){var D,T,U=new Array(v+1),G=0;for(D=1;D<=v;D++)U[D]=G=G+B[D-1]<<1;for(T=0;T<=C;T++){var W=m[2*T+1];W!==0&&(m[2*T]=ht(U[W]++,W))}}function dt(m){var C;for(C=0;C<w;C++)m.dyn_ltree[2*C]=0;for(C=0;C<d;C++)m.dyn_dtree[2*C]=0;for(C=0;C<x;C++)m.bl_tree[2*C]=0;m.dyn_ltree[2*A]=1,m.opt_len=m.static_len=0,m.last_lit=m.matches=0}function pt(m){8<m.bi_valid?lt(m,m.bi_buf):0<m.bi_valid&&(m.pending_buf[m.pending++]=m.bi_buf),m.bi_buf=0,m.bi_valid=0}function N(m,C,B,D){var T=2*C,U=2*B;return m[T]<m[U]||m[T]===m[U]&&D[C]<=D[B]}function z(m,C,B){for(var D=m.heap[B],T=B<<1;T<=m.heap_len&&(T<m.heap_len&&N(C,m.heap[T+1],m.heap[T],m.depth)&&T++,!N(C,D,m.heap[T],m.depth));)m.heap[B]=m.heap[T],B=T,T<<=1;m.heap[B]=D}function H(m,C,B){var D,T,U,G,W=0;if(m.last_lit!==0)for(;D=m.pending_buf[m.d_buf+2*W]<<8|m.pending_buf[m.d_buf+2*W+1],T=m.pending_buf[m.l_buf+W],W++,D===0?Q(m,T,C):(Q(m,(U=u[T])+h+1,C),(G=j[U])!==0&&nt(m,T-=K[U],G),Q(m,U=R(--D),B),(G=q[U])!==0&&nt(m,D-=Y[U],G)),W<m.last_lit;);Q(m,A,C)}function S(m,C){var B,D,T,U=C.dyn_tree,G=C.stat_desc.static_tree,W=C.stat_desc.has_stree,X=C.stat_desc.elems,it=-1;for(m.heap_len=0,m.heap_max=p,B=0;B<X;B++)U[2*B]!==0?(m.heap[++m.heap_len]=it=B,m.depth[B]=0):U[2*B+1]=0;for(;m.heap_len<2;)U[2*(T=m.heap[++m.heap_len]=it<2?++it:0)]=1,m.depth[T]=0,m.opt_len--,W&&(m.static_len-=G[2*T+1]);for(C.max_code=it,B=m.heap_len>>1;1<=B;B--)z(m,U,B);for(T=X;B=m.heap[1],m.heap[1]=m.heap[m.heap_len--],z(m,U,1),D=m.heap[1],m.heap[--m.heap_max]=B,m.heap[--m.heap_max]=D,U[2*T]=U[2*B]+U[2*D],m.depth[T]=(m.depth[B]>=m.depth[D]?m.depth[B]:m.depth[D])+1,U[2*B+1]=U[2*D+1]=T,m.heap[1]=T++,z(m,U,1),2<=m.heap_len;);m.heap[--m.heap_max]=m.heap[1],function(ot,mt){var St,Ot,Kt,Tt,Xt,Te,Et=mt.dyn_tree,Zt=mt.max_code,tn=mt.stat_desc.static_tree,yi=mt.stat_desc.has_stree,bi=mt.stat_desc.extra_bits,Ls=mt.stat_desc.extra_base,$e=mt.stat_desc.max_length,en=0;for(Tt=0;Tt<=v;Tt++)ot.bl_count[Tt]=0;for(Et[2*ot.heap[ot.heap_max]+1]=0,St=ot.heap_max+1;St<p;St++)$e<(Tt=Et[2*Et[2*(Ot=ot.heap[St])+1]+1]+1)&&(Tt=$e,en++),Et[2*Ot+1]=Tt,Zt<Ot||(ot.bl_count[Tt]++,Xt=0,Ls<=Ot&&(Xt=bi[Ot-Ls]),Te=Et[2*Ot],ot.opt_len+=Te*(Tt+Xt),yi&&(ot.static_len+=Te*(tn[2*Ot+1]+Xt)));if(en!==0){do{for(Tt=$e-1;ot.bl_count[Tt]===0;)Tt--;ot.bl_count[Tt]--,ot.bl_count[Tt+1]+=2,ot.bl_count[$e]--,en-=2}while(0<en);for(Tt=$e;Tt!==0;Tt--)for(Ot=ot.bl_count[Tt];Ot!==0;)Zt<(Kt=ot.heap[--St])||(Et[2*Kt+1]!==Tt&&(ot.opt_len+=(Tt-Et[2*Kt+1])*Et[2*Kt],Et[2*Kt+1]=Tt),Ot--)}}(m,C),yt(U,it,m.bl_count)}function o(m,C,B){var D,T,U=-1,G=C[1],W=0,X=7,it=4;for(G===0&&(X=138,it=3),C[2*(B+1)+1]=65535,D=0;D<=B;D++)T=G,G=C[2*(D+1)+1],++W<X&&T===G||(W<it?m.bl_tree[2*T]+=W:T!==0?(T!==U&&m.bl_tree[2*T]++,m.bl_tree[2*L]++):W<=10?m.bl_tree[2*P]++:m.bl_tree[2*$]++,U=T,it=(W=0)===G?(X=138,3):T===G?(X=6,3):(X=7,4))}function I(m,C,B){var D,T,U=-1,G=C[1],W=0,X=7,it=4;for(G===0&&(X=138,it=3),D=0;D<=B;D++)if(T=G,G=C[2*(D+1)+1],!(++W<X&&T===G)){if(W<it)for(;Q(m,T,m.bl_tree),--W!=0;);else T!==0?(T!==U&&(Q(m,T,m.bl_tree),W--),Q(m,L,m.bl_tree),nt(m,W-3,2)):W<=10?(Q(m,P,m.bl_tree),nt(m,W-3,3)):(Q(m,$,m.bl_tree),nt(m,W-11,7));U=T,it=(W=0)===G?(X=138,3):T===G?(X=6,3):(X=7,4)}}c(Y);var E=!1;function g(m,C,B,D){nt(m,(f<<1)+(D?1:0),3),function(T,U,G,W){pt(T),W&&(lt(T,G),lt(T,~G)),r.arraySet(T.pending_buf,T.window,U,G,T.pending),T.pending+=G}(m,C,B,!0)}i._tr_init=function(m){E||(function(){var C,B,D,T,U,G=new Array(v+1);for(T=D=0;T<_-1;T++)for(K[T]=D,C=0;C<1<<j[T];C++)u[D++]=T;for(u[D-1]=T,T=U=0;T<16;T++)for(Y[T]=U,C=0;C<1<<q[T];C++)V[U++]=T;for(U>>=7;T<d;T++)for(Y[T]=U<<7,C=0;C<1<<q[T]-7;C++)V[256+U++]=T;for(B=0;B<=v;B++)G[B]=0;for(C=0;C<=143;)rt[2*C+1]=8,C++,G[8]++;for(;C<=255;)rt[2*C+1]=9,C++,G[9]++;for(;C<=279;)rt[2*C+1]=7,C++,G[7]++;for(;C<=287;)rt[2*C+1]=8,C++,G[8]++;for(yt(rt,w+1,G),C=0;C<d;C++)O[2*C+1]=5,O[2*C]=ht(C,5);st=new et(rt,j,h+1,w,v),Z=new et(O,q,0,d,v),tt=new et(new Array(0),M,0,x,k)}(),E=!0),m.l_desc=new F(m.dyn_ltree,st),m.d_desc=new F(m.dyn_dtree,Z),m.bl_desc=new F(m.bl_tree,tt),m.bi_buf=0,m.bi_valid=0,dt(m)},i._tr_stored_block=g,i._tr_flush_block=function(m,C,B,D){var T,U,G=0;0<m.level?(m.strm.data_type===2&&(m.strm.data_type=function(W){var X,it=4093624447;for(X=0;X<=31;X++,it>>>=1)if(1&it&&W.dyn_ltree[2*X]!==0)return a;if(W.dyn_ltree[18]!==0||W.dyn_ltree[20]!==0||W.dyn_ltree[26]!==0)return l;for(X=32;X<h;X++)if(W.dyn_ltree[2*X]!==0)return l;return a}(m)),S(m,m.l_desc),S(m,m.d_desc),G=function(W){var X;for(o(W,W.dyn_ltree,W.l_desc.max_code),o(W,W.dyn_dtree,W.d_desc.max_code),S(W,W.bl_desc),X=x-1;3<=X&&W.bl_tree[2*J[X]+1]===0;X--);return W.opt_len+=3*(X+1)+5+5+4,X}(m),T=m.opt_len+3+7>>>3,(U=m.static_len+3+7>>>3)<=T&&(T=U)):T=U=B+5,B+4<=T&&C!==-1?g(m,C,B,D):m.strategy===4||U===T?(nt(m,2+(D?1:0),3),H(m,rt,O)):(nt(m,4+(D?1:0),3),function(W,X,it,ot){var mt;for(nt(W,X-257,5),nt(W,it-1,5),nt(W,ot-4,4),mt=0;mt<ot;mt++)nt(W,W.bl_tree[2*J[mt]+1],3);I(W,W.dyn_ltree,X-1),I(W,W.dyn_dtree,it-1)}(m,m.l_desc.max_code+1,m.d_desc.max_code+1,G+1),H(m,m.dyn_ltree,m.dyn_dtree)),dt(m),D&&pt(m)},i._tr_tally=function(m,C,B){return m.pending_buf[m.d_buf+2*m.last_lit]=C>>>8&255,m.pending_buf[m.d_buf+2*m.last_lit+1]=255&C,m.pending_buf[m.l_buf+m.last_lit]=255&B,m.last_lit++,C===0?m.dyn_ltree[2*B]++:(m.matches++,C--,m.dyn_ltree[2*(u[B]+h+1)]++,m.dyn_dtree[2*R(C)]++),m.last_lit===m.lit_bufsize-1},i._tr_align=function(m){nt(m,2,3),Q(m,A,rt),function(C){C.bi_valid===16?(lt(C,C.bi_buf),C.bi_buf=0,C.bi_valid=0):8<=C.bi_valid&&(C.pending_buf[C.pending++]=255&C.bi_buf,C.bi_buf>>=8,C.bi_valid-=8)}(m)}},{"../utils/common":41}],53:[function(n,s,i){s.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(n,s,i){(function(r){(function(a,l){if(!a.setImmediate){var c,f,_,h,w=1,d={},x=!1,p=a.document,v=Object.getPrototypeOf&&Object.getPrototypeOf(a);v=v&&v.setTimeout?v:a,c={}.toString.call(a.process)==="[object process]"?function(L){process.nextTick(function(){k(L)})}:function(){if(a.postMessage&&!a.importScripts){var L=!0,P=a.onmessage;return a.onmessage=function(){L=!1},a.postMessage("","*"),a.onmessage=P,L}}()?(h="setImmediate$"+Math.random()+"$",a.addEventListener?a.addEventListener("message",A,!1):a.attachEvent("onmessage",A),function(L){a.postMessage(h+L,"*")}):a.MessageChannel?((_=new MessageChannel).port1.onmessage=function(L){k(L.data)},function(L){_.port2.postMessage(L)}):p&&"onreadystatechange"in p.createElement("script")?(f=p.documentElement,function(L){var P=p.createElement("script");P.onreadystatechange=function(){k(L),P.onreadystatechange=null,f.removeChild(P),P=null},f.appendChild(P)}):function(L){setTimeout(k,0,L)},v.setImmediate=function(L){typeof L!="function"&&(L=new Function(""+L));for(var P=new Array(arguments.length-1),$=0;$<P.length;$++)P[$]=arguments[$+1];var j={callback:L,args:P};return d[w]=j,c(w),w++},v.clearImmediate=y}function y(L){delete d[L]}function k(L){if(x)setTimeout(k,0,L);else{var P=d[L];if(P){x=!0;try{(function($){var j=$.callback,q=$.args;switch(q.length){case 0:j();break;case 1:j(q[0]);break;case 2:j(q[0],q[1]);break;case 3:j(q[0],q[1],q[2]);break;default:j.apply(l,q)}})(P)}finally{y(L),x=!1}}}}function A(L){L.source===a&&typeof L.data=="string"&&L.data.indexOf(h)===0&&k(+L.data.slice(h.length))}})(typeof self>"u"?r===void 0?this:r:self)}).call(this,typeof cn<"u"?cn:typeof self<"u"?self:typeof window<"u"?window:{})},{}]},{},[10])(10)})})(wi);var Sn=wi.exports;class zs{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Se(n.token)}async getPluginUrl(e,n){const s=Date.now(),i=localStorage.getItem("pluginUrl");if(console.log(i,"cachedPluginUrl"),i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&s<c.expiryTime)return c.url}const r=await this.getPluginDownloadUrl(e,n),a=s+15*60*1e3,l={name:e,version:n,url:r,expiryTime:a};return localStorage.setItem("pluginUrl",JSON.stringify(l)),r}async getPluginDownloadUrl(e,n){const s=await this.api.getDownloadUrl(e,n);if(s.startsWith("http"))return s;throw new at.Notice(`${JSON.parse(s).message}`),new Error(`${JSON.parse(s).message}`)}async downloadPluginToPluginFolder(e,n){const s=await this.getPluginUrl(e,n);if(!s)return new at.Notice(`获取${e}插件下载地址失败！`),!1;if(app.plugins.manifests[e])return new at.Notice(`插件${e}已经安装，无需重复安装！`),!1;try{const i=await at.requestUrl({url:s,method:"GET"}),r=at.normalizePath(app.vault.configDir+"/plugins/"+e)+"/",a=this.app.vault.adapter,l=await Sn.loadAsync(i.arrayBuffer);(await a.exists(r)===!1||!await a.exists(r+"manifest.json"))&&await a.mkdir(r);try{for(const[c,f]of Object.entries(l.files)){const _=r+c,h=_.substring(0,_.lastIndexOf("/"));if(await a.mkdir(h),!f.dir){const w=await f.async("string");await a.write(_,w)}}}catch{throw new at.Notice(`插件${e}解压失败！请联系开发者处理！`,5e3),a.rmdir(r,!0),Error(`插件${e}解压失败！`)}return new at.Notice(`插件${e}安装成功！
请在插件列表中启用`,5e3),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new at.Notice(`插件${e}安装失败！${i}`,5e3),!1}}async updatePluginToExistPluginFolder(e,n){const s=await this.getPluginDownloadUrl(e,n);if(!s)throw new at.Notice(`获取${e}插件下载地址失败！`),new Error(`获取${e}插件下载地址失败！`);if(e!="obsidian-pkmer"&&!app.plugins.manifests[e])return new at.Notice(`插件${e}未安装！`),!1;try{let i=at.normalizePath(app.vault.configDir+"/plugins/"+e)+"/";e=="obsidian-pkmer"&&(i=at.normalizePath(app.vault.configDir+"/plugins/")+"/");const r=this.app.vault.adapter;if(await r.exists(i)===!1&&!await r.exists(i+"manifest.json"))throw new Error(`插件${e}未安装！`);const a=await at.requestUrl({url:s,method:"GET"}),l=await Sn.loadAsync(a.arrayBuffer);try{for(const[c,f]of Object.entries(l.files)){const _=i+c,h=_.substring(0,_.lastIndexOf("/"));if(await r.mkdir(h),!f.dir){const w=await f.async("string");await r.write(_,w)}}}catch{throw new at.Notice(`插件${e}解压失败！得手动清除残留文件！`),Error(`插件${e}解压失败！`)}return new at.Notice(`插件${e}更新成功！
 请在插件列表中重新启用`),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new at.Notice(`插件${e}更新失败！${i}`),!1}}}const Vl={class:"text-right pkmer-toolbar"},Kl={class:"z-10 flex w-3/4 p-4 m-auto my-4 top-20 bg-yellow-200/50"},Gl=b("div",{class:"mr-2"},"⚠️",-1),ql=b("span",{class:"font-bold"},"提示：",-1),vi=ge({__name:"Head",props:{isLogin:{type:Boolean},settings:{},app:{}},async setup(t){let e,n;const s=t,i=ft(0),r=ft(""),a=ft(),l=s.isLogin,c=new Se(s.settings.token),f=new zs(s.app,s.settings);a.value=([e,n]=yn(()=>c.getPkmerVersion()),e=await e,n(),e),l&&(i.value=([e,n]=yn(()=>c.getDownloadCount()),e=await e,n(),e)),r.value=s.app.plugins.manifests.pkmer.version;const _=Pt(()=>{if(a.value!=r.value)return"发现新版本:"+a.value;if(a.value==r.value)return"Ver:"+r.value}),h=async()=>{a.value==r.value||(new at.Notice("正在更新插件，请稍后...",3e3),!await f.updatePluginToExistPluginFolder("obsidian-pkmer",a.value))||s.app.workspace.activeLeaf.rebuildView()},w=async()=>{l&&(localStorage.removeItem("pluginList"),localStorage.removeItem("pluginListExpiry"),localStorage.removeItem("themeList"),localStorage.removeItem("themeListExpiry")),s.app.workspace.activeLeaf.rebuildView()},d=()=>{s.app.setting.open(),s.app.setting.openTabById("pkmer")};return(x,p)=>(gt(),wt(Dt,null,[b("div",Vl,[b("span",{onClick:h,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"},kt(_.value),1),xt(b("span",{class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"}," 剩余次数 "+kt(i.value),513),[[It,Rt(l)]]),b("span",{onClick:w,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-green-500 text-white shadow-xl shadow-primary-500/20"}," 刷新 "),b("span",{class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20",onClick:d}," 设置 ")]),xt(b("div",Kl,[b("div",{class:"flex items-center"},[Gl,b("div",null,[ql,b("span",null,[$t("当前是未登录状态，仅展示下载前20的热门内容，请"),b("button",{class:"bg-yellow-600 w-20 h-6 inline-block px-1 py-1 m-1 font-sans text-xs rounded-lg",onClick:d}," 点此登录"),$t("后获取全部内容。")])])])],512),[[It,!Rt(l)]])],64))}}),Jl={"data-pagefind-body":"",class:"w-full"},Yl={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Xl={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},Ql={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},tc={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},ec={class:"widget-item"},nc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[b("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[b("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),b("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),sc=[nc],rc={class:"widget-item"},ic=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[b("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),oc=[ic],ac={class:"widget-item"},lc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),cc=[lc],uc={class:"widget-item"},dc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),fc=[dc],hc={class:"widget-item"},pc=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),mc={class:"num"},gc=["tooltip"],wc=b("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"default"}," 默认 ",-1),vc=b("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"mobile"}," 移动端 ",-1),_c=b("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"desktop"}," 仅桌面端 ",-1),yc=[wc,vc,_c],bc={class:"relative w-full"},xc={class:"relative group"},kc=["value"],Cc=b("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[b("circle",{cx:"11",cy:"11",r:"8"}),b("path",{d:"m21 21l-4.3-4.3"})])])],-1),Sc={class:"text-right"},Tc=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[b("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),Ic=[Tc],Ec={class:"w-full bg-muted-100 dark:bg-muted-1000"},Ac={class:"w-full mx-auto max-w-7xl"},Oc={class:"flex items-center w-full overflow-hidden"},Pc={class:"flex flex-col justify-between w-full h-full md:px-6 pt-4 pb-16"},zc={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},Lc={class:"flex flex-col gap-12 py-12"},Bc={class:"flex items-center justify-center w-full p-6 -m-3"},Dc={class:"w-full max-w-[210px] pt-16"},$c=b("div",null,"Load More",-1),Rc=[$c],Uc={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},Mc={class:"flex items-center justify-between"},Fc=b("h5",{class:"mr-3 max-w-none"},null,-1),Nc=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[b("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),jc=[Nc],Hc={class:"body-font"},Wc={class:"container px-5 py-4 mx-auto"},Zc={class:"mb-6 text-2xl font-medium text-center title-font"},Vc=b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[b("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[b("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),b("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),b("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),b("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),Kc={class:"mb-2"},Gc={class:"bolder"},qc=b("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ",-1),Jc={class:"flex-wrap block -mx-4 -mt-4 space-y-6 md:flex sm:-m-4 md:-mb-10 md:space-y-0"},Yc={class:"flex md:p-4 md:w-1/2"},Xc={class:"flex-grow"},Qc=ge({__name:"PluginMarket",props:{settings:{},app:{},tab:{}},async setup(t){let e,n;const s=t,i=ft(""),r=ft(""),a=ft(!1),l=ft();let c=ft(24),f=ft(1);const _=ft(!0),h=ft("default"),w=new Se(s.settings.token),d=new zs(s.app,s.settings),x=ft(!1),p=([e,n]=yn(()=>w.isUserLogin()),e=await e,n(),e),v=async()=>{const N=await w.getPkmerDocs();if(p)try{l.value=await w.getPluginList(),Array.isArray(l.value)?l.value.forEach(z=>{const H=N.find(I=>I.slug==z.id);H&&(z.contentUrl=`https://pkmer.cn/show/${H.uid}`,z.tags=H.tags,z.chineseDescription=H.description,z.authorAvatar=H.authorAvatar);const S=N.find(I=>I.slug.includes(z.id+"_readme"));S&&(z.readme_zh=`https://pkmer.cn/show/${S.uid}`);const o=s.app.plugins.manifests;z.isInstalled=o[z.id]!==void 0,z.isOutdated=z.isInstalled&&o[z.id].version!==z.version}):l.value=[]}catch(z){console.error("Error loading plugins:",z)}else l.value=await w.getTop20Plugins(),Array.isArray(l.value)?l.value.forEach(z=>{const H=N.find(I=>I.slug==z.id);H&&(z.contentUrl=`https://pkmer.cn/show/${H.uid}`,z.tags=H.tags,z.chineseDescription=H.description,z.authorAvatar=H.authorAvatar);const S=N.find(I=>I.slug.includes(z.id+"_readme"));S&&(z.readme_zh=`https://pkmer.cn/show/${S.uid}`);const o=s.app.plugins.manifests[z.id];z.isInstalled=o!==void 0,z.isOutdated=o?.version!==z.version}):l.value=[]},y=Pt(()=>{if(l.value)return l.value.filter(H=>H.isInstalled===!0).length}),k=Pt(()=>l.value?l.value.filter(H=>H.isOutdated===!0).length:!1),A=()=>{x.value=!0,R()},L=ft(""),P=ft("all"),$=ft(""),j=ft(""),q=ft(""),M=async()=>{a.value=!1,new at.Notice("正在下载插件，请稍后...",3e3),await d.downloadPluginToPluginFolder($.value,j.value)&&(l.value=l.value.map(z=>(z.id==$.value&&(z.isInstalled=!0),z)))},J=async()=>{a.value=!1,new at.Notice("正在更新插件，请稍后...",3e3),await d.updatePluginToExistPluginFolder($.value,j.value)&&(l.value=l.value.map(z=>(z.id==$.value&&(z.isOutdated=!1),z)))},rt=()=>{a.value=!1},O=N=>{P.value=N},V=(N,z,H,S)=>{a.value=!0,$.value=z,j.value=H,q.value=S,N==="download"?_.value=!0:_.value=!1},u=()=>{const N=window.location.hash.slice(1);if(N){const z=decodeURIComponent(N);P.value=z}},K=ft();Bn(async()=>{if(x.value=!1,u(),await v(),i.value="pkmerDownloadCount",r.value="asc",app.workspace.on("resize",st),K.value=s.app.workspace.activeLeaf.view.leaf.width,s.tab){const N=JSON.parse(s.tab);N.type=="updated"&&ht(),N.type=="installed"&&Q()}});const st=()=>{K.value=s.app.workspace.activeLeaf.view.leaf.width};Xe(()=>{localStorage.removeItem("pkmer-update-tab")});const Z=N=>{at.debounce(()=>{L.value=N.target.value},800)()},tt=Pt(()=>{const N=L.value.toLowerCase().trim();let z=l.value;return h.value==="mobile"?z=z.filter(H=>!H.isDesktopOnly):h.value==="desktop"&&(z=z.filter(H=>H.isDesktopOnly)),N.length<1?z:z.filter(H=>H.id.toLowerCase().includes(N)||H.name.toLowerCase().includes(N)||H.author.toLowerCase().includes(N)||H.description?.toLowerCase().includes(N)||H.chineseDescription?.toLowerCase().includes(N)||H.tags?.toLowerCase().includes(N))}),Y=Pt(()=>Math.ceil(tt.value?.length/c.value)),et=Pt(()=>f.value<Y.value);function F(){i.value="pkmerDownloadCount",r.value=r.value==="asc"?"desc":"asc"}function R(){i.value="downloadCount",r.value=r.value==="asc"?"desc":"asc"}function lt(){i.value="updateTime",r.value=r.value==="asc"?"desc":"asc"}function nt(){i.value="fileName",r.value=r.value==="asc"?"desc":"asc"}function Q(){i.value="installed",r.value=r.value==="asc"?"desc":"asc"}function ht(){i.value="updated",r.value=r.value==="asc"?"desc":"asc"}const yt=Pt(()=>{let N=[];return P.value=="all"?i.value==="downloadCount"?r.value==="asc"?N=tt.value.sort((z,H)=>z.downloadCount-H.downloadCount):N=tt.value.sort((z,H)=>H.downloadCount-z.downloadCount):i.value==="updateTime"?r.value==="asc"?N=tt.value.sort((z,H)=>new Date(z.pluginUpdatedTime).getTime()-new Date(H.pluginUpdatedTime).getTime()):N=tt.value.sort((z,H)=>new Date(H.pluginUpdatedTime).getTime()-new Date(z.pluginUpdatedTime).getTime()):i.value==="fileName"?r.value==="asc"?N=tt.value.sort((z,H)=>z.name.localeCompare(H.name)):N=tt.value.sort((z,H)=>H.name.localeCompare(z.name)):i.value==="installed"?N=tt.value.filter(z=>z.isInstalled):i.value==="updated"?N=tt.value.filter(z=>z.isOutdated):i.value==="pkmerDownloadCount"?r.value==="asc"?N=tt.value.sort((z,H)=>z.id==="obsidian-memos"?-1:H.id==="obsidian-memos"?1:z.source==="community"&&H.source!=="community"?-1:z.source!=="community"&&H.source==="community"?1:H.pkmerDownloadCount-z.pkmerDownloadCount):N=tt.value.sort((z,H)=>z.source==="community"&&H.source!=="community"?-1:z.source!=="community"&&H.source==="community"?1:z.pkmerDownloadCount-H.pkmerDownloadCount):N=tt.value?.slice(0,f.value*c.value):(N=tt.value.filter(z=>z.tags?.includes(P.value)),i.value==="downloadCount"?r.value==="asc"?N=N.sort((z,H)=>z.downloadCount-H.downloadCount):N=N.sort((z,H)=>H.downloadCount-z.downloadCount):i.value==="updateTime"?r.value==="asc"?N=N.sort((z,H)=>new Date(z.pluginUpdatedTime).getTime()-new Date(H.pluginUpdatedTime).getTime()):N=N.sort((z,H)=>new Date(H.pluginUpdatedTime).getTime()-new Date(z.pluginUpdatedTime).getTime()):i.value==="fileName"?r.value==="asc"?N=N.sort((z,H)=>z.name.localeCompare(H.name)):N=N.sort((z,H)=>H.name.localeCompare(z.name)):i.value==="pkmerDownloadCount"&&(r.value==="asc"?N=N.sort((z,H)=>z.pkmerDownloadCount-H.pkmerDownloadCount):N=N.sort((z,H)=>H.pkmerDownloadCount-z.pkmerDownloadCount))),N?.slice(0,f.value*c.value)}),dt=Pt(()=>Array.isArray(tt.value)?tt.value:[]),pt=()=>{const N=f.value*c.value,z=N+c.value,H=yt.value?.slice(N,z);f.value++,l.value=[...l.value,...H]};return(N,z)=>(gt(),wt(Dt,null,[Lt(vi,{settings:s.settings,isLogin:Rt(p),app:s.app},null,8,["settings","isLogin","app"]),b("main",Jl,[b("div",Yl,[b("div",Xl,[b("div",Ql,[b("div",tc,[b("div",ec,[b("button",{class:At([{active:i.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:R},sc,2)]),b("div",rc,[b("button",{class:At([{active:i.value=="updateTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:lt},oc,2)]),b("div",ac,[b("button",{class:At([{active:i.value=="fileName"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:nt},cc,2)]),b("div",uc,[b("button",{class:At(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:i.value=="pkmerDownloadCount"}]),tooltip:"按插件热度",flow:"down",onClick:F},fc,2)]),b("div",hc,[b("button",{class:At([{active:i.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装插件",flow:"down",onClick:Q},[pc,b("span",mc,kt(y.value),1)],2)]),b("div",{class:"widget-item",tooltip:h.value=="mobile"?"支持移动端的插件":h.value=="desktop"?"仅支持桌面端的插件":"所有终端"},[xt(b("select",{"onUpdate:modelValue":z[0]||(z[0]=H=>h.value=H),class:"block border px-2 w-18 text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800 rounded-md shadow-sm focus:outline-none"},yc,512),[[Ha,h.value]])],8,gc),b("div",bc,[b("div",xc,[b("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search plugins...",onInput:Z,value:L.value},null,40,kc),Cc])])])])])]),b("div",Sc,[xt(b("button",{onClick:ht,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[$t(" 发现 "+kt(k.value)+" 个插件更新！【点我查看】 ",1),b("button",{onClick:Mn(A,["stop"]),class:"ml-2 px-3 shadow-none"},Ic)],512),[[It,k.value&&!x.value]])]),b("section",Ec,[b("div",Ac,[b("div",Oc,[b("div",Pc,[b("div",zc,[Lt(tl,{"active-category":P.value,pluginList:dt.value,onUpdateActiveCategory:O},null,8,["active-category","pluginList","onUpdateActiveCategory"])]),b("div",Lc,[b("div",{class:At(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":K.value<=768&&K.value>0,"!grid-cols-2":K.value>768&&K.value<1024,"!grid-cols-3":K.value>1024}])},[(gt(!0),wt(Dt,null,Dn(yt.value,H=>(gt(),wt("div",{key:H.id},[Lt(Zl,{app:s.app,"plugin-info":H,isLogin:Rt(p),onDownloadUpdatePlugin:V},null,8,["app","plugin-info","isLogin","onDownloadUpdatePlugin"])]))),128))],2),b("div",Bc,[b("div",Dc,[et.value?(gt(),wt("button",{key:0,onClick:pt,class:"relative inline-flex items-center justify-center w-full gap-2 px-6 py-4 font-sans font-semibold transition-all duration-300 border rounded-lg dark:bg-muted-700 text-muted-800 dark:text-white border-muted-300 dark:border-muted-600 tw-accessibility hover:shadow-xl hover:shadow-muted-400/20"},Rc)):Qe("",!0)])])])])])])])]),xt(b("div",Uc,[b("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:z[2]||(z[2]=H=>a.value=!1),"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[b("div",Mc,[Fc,b("button",{type:"button",class:"z-50 cursor-pointer",onClick:z[1]||(z[1]=H=>a.value=!1)},jc)]),b("section",Hc,[b("div",Wc,[b("h3",Zc,[Vc,$t(" 即将安装...."+kt($.value.toUpperCase()),1)]),b("div",null,[b("p",Kc,[$t(" 插件来源： "),b("span",Gc,kt(q.value==="official"?"Obsidian官方商城":"社区专供"),1)]),qc]),b("div",Jc,[b("div",Yc,[b("div",Xc,[_.value?(gt(),wt("h2",{key:0,onClick:M,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(gt(),wt("h2",{key:1,onClick:J,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))])]),b("div",{class:"flex md:p-4 md:w-1/2"},[b("div",{class:"flex-grow"},[b("h2",{onClick:rt,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[It,a.value]])],64))}});const De=t=>(Hr("data-v-1a6e40f1"),t=t(),Wr(),t),tu={class:"relative"},eu={class:"h-full flex flex-col items-start gap-4 p-6"},nu={class:"relative w-full space-y-2"},su={class:"relative"},ru={class:"mark"},iu=De(()=>b("span",{class:"learn"},"Tips ",-1)),ou=[iu],au=["data-name"],lu=["src","alt"],cu=["src"],uu={class:"plugin_name relative flex items-center h-10 overflow-hidden"},du={"data-pagefind-meta":"title",class:"flex items-center font-heading text-lg font-medium text-muted-800 dark:text-white leading-6"},fu=["src"],hu={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},pu=De(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[b("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),mu={class:"flex items-center flex-wrap leading-6 text-muted-600 dark:text-muted-400"},gu=["src"],wu=["src"],vu=["href"],_u=De(()=>b("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),yu=[_u],bu={class:"w-full mt-auto space-y-6"},xu={class:"flex items-center justify-start w-full relative"},ku=["src","onerror"],Cu=["href"],Su={class:"pl-2"},Tu=["tooltip"],Iu={class:"block ml-auto font-sans text-sm text-muted-400"},Eu=De(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[b("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),b("polyline",{points:"7 10 12 15 17 10"}),b("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),Au=De(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[b("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),Ou=De(()=>b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 48 48","data-v-5ade68da":"","data-icon":"icon-park-outline:link-cloud-sucess",class:"block w-4 h-4 mx-auto iconify iconify--icon-park-outline"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"4"},[b("path",{d:"M12 33c-3.333 0-8-1.5-8-7.5c0-7 7-8.5 9-8.5c1-3.5 3-9 11-9c7 0 10 4 11 7.5c0 0 9 1 9 9.5c0 6-4 8-8 8"}),b("path",{d:"m18 33l6 5l8-10"})])],-1)),Pu=ge({__name:"ThemeCard",props:{app:{},themeInfo:{},isLogin:{type:Boolean}},emits:["download-update-theme"],setup(t){const e=t,n=e.isLogin;function s(){return e.themeInfo.authorAvatar&&e.themeInfo.authorAvatar.length>0?e.themeInfo.authorAvatar:c(e.themeInfo.author)}const i=ft(!1);let r=[];e.themeInfo.tags&&e.themeInfo.tags.length>0&&(r=e.themeInfo.tags.split(","));function a(w){return w>=1e6?(w/1e6).toFixed(0)+"M":w>=1e3?(w/1e3).toFixed(0)+"K":w.toString()}function l(w){return(w.match(/\b\w/g)||[]).join("").toUpperCase()}function c(w){let d="";if(w){const x=l(w);/^[a-zA-Z]+$/.test(x)?d=`https://dummyimage.com/100x100/555/fff&text=${x.toUpperCase()}`:d=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(x)}`}else d="https://cdn.pkmer.cn/covers/logo.png!nomark";return d}const f=async w=>{await e.app.customCss.setTheme(w)},_=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,h=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(w,d)=>(gt(),wt("div",tu,[b("div",eu,[b("div",nu,[b("div",su,[xt(b("span",{class:"absolute top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},kt(Rt(r)[0]),513),[[It,Rt(r)[0]]]),xt(b("view",ru,ou,512),[[It,w.themeInfo.contentUrl]]),xt(b("div",{class:"noimg h-40 md:h-52","data-name":w.themeInfo.name,style:Je(_())},null,12,au),[[It,!w.themeInfo.banner]]),xt(b("img",{class:"w-full h-52 object-contain aspect-video rounded-xl cursor-pointer",src:w.themeInfo.banner?.replace("gif!pkmer","gif").replace("!pkmer","!nomark"),alt:w.themeInfo.name,width:"348",height:"208",onerror:"javascript:this.src='https://cdn.pkmer.cn/covers/pkmer2.png!nomark';this.οnerrοr=null;",onClick:d[0]||(d[0]=x=>i.value=!0)},null,8,lu),[[It,w.themeInfo.banner]]),i.value?(gt(),wt("div",{key:0,class:"overlay",onClick:d[2]||(d[2]=x=>i.value=!1)},[b("img",{src:w.themeInfo.banner?.replace("!nomark","!pkmer"),alt:"原图",onClick:d[1]||(d[1]=Mn(()=>{},["stop"]))},null,8,cu)])):Qe("",!0)]),b("div",uu,[b("h3",du,[$t(kt(w.themeInfo.name)+" ",1),b("img",{class:"-mt-2 ml-2",alt:"version",src:`https://img.shields.io/badge/${w.themeInfo.version}-brightgreen`},null,8,fu),b("span",hu,kt(a(w.themeInfo.pkmerDownloadCount)),1),pu])]),b("p",mu,[b("img",{class:"h-ful",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${w.themeInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,gu),b("img",{class:"h-ful ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${a(w.themeInfo.downloadCount)}-yellow`},null,8,wu),b("a",{class:At(["ml-2",{visible:w.themeInfo.contentUrl,invisible:!w.themeInfo.contentUrl}]),href:w.themeInfo.contentUrl?w.themeInfo.contentUrl:"javascript:void(0)"},yu,10,vu)]),xt(b("p",{class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},kt(w.themeInfo.chineseDescription?.replace("【机翻】","")||w.themeInfo.description),513),[[It,w.themeInfo.description]])]),b("div",bu,[b("div",xu,[b("img",{class:"w-12 mask mask-blob",src:s(),onerror:`javascript:this.src='${c(w.themeInfo.author)}'`,alt:"avatar"},null,8,ku),b("a",{href:"https://github.com/"+w.themeInfo.repo},[b("div",Su,[b("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:w.themeInfo.author},kt(w.themeInfo.author),9,Tu)])],8,Cu),b("div",Iu,[xt(b("button",{onClick:h,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[It,!Rt(n)]]),xt(b("div",null,[w.themeInfo.isInstalled?w.themeInfo.isInstalled&&w.themeInfo.isOutdated?(gt(),wt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:d[4]||(d[4]=x=>w.$emit("download-update-theme","update",w.themeInfo.name,w.themeInfo.version))},[Au,$t(" 更新 ")])):(gt(),wt("button",{key:2,onClick:d[5]||(d[5]=x=>f(w.themeInfo.name)),tooltip:"主题已安装，应用当前主题",flow:"down",class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[Ou,$t(" 应用 ")])):xt((gt(),wt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:d[3]||(d[3]=x=>w.$emit("download-update-theme","download",w.themeInfo.name,w.themeInfo.version))},[Eu,$t(" 下载 ")],512)),[[It,Rt(n)]])],512),[[It,Rt(n)]])])])])])]))}});const zu=gi(Pu,[["__scopeId","data-v-1a6e40f1"]]),Lu={class:"relative w-full flex justify-center gap-2 flex-wrap"},Bu=["onClick"],Du=ge({__name:"ThemeToolbar",props:{themeList:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t;let n=[];const s=Pt(()=>{Array.isArray(e.themeList)&&e.themeList.forEach(a=>{if(a.tags&&typeof a.tags=="string"){let l=a.tags.split(",").map(c=>c.trim());l=l.filter(c=>c!==""),l.length>0&&n.push(l[0])}});let r=[];return Array.isArray(e.themeList)&&e.themeList.forEach(a=>{if(a.modes&&typeof a.modes=="string"){let l=a.modes.split(",").map(c=>c.trim());l=l.filter(c=>c!==""),l.length>0&&r.push(l[0])}}),n.concat(r)}),i=Pt(()=>Array.from(new Set(s.value)));return(r,a)=>(gt(),wt("div",Lu,[b("button",{class:At(["h-6 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",r.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:a[0]||(a[0]=l=>r.$emit("update-active-category","all"))}," All ",2),(gt(!0),wt(Dt,null,Dn(i.value,l=>(gt(),wt("div",{class:"plugin-item",key:l},[b("button",{class:At(["flex-1 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",r.activeCategory===l?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{r.$emit("update-active-category",l)}},kt(l),11,Bu)]))),128))]))}});class _i{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Se(n.token)}async getThemeUrl(e,n){const s=Date.now(),i=localStorage.getItem("themeUrl");if(i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&s<c.expiryTime)return c.url}const r=await this.getThemeDownloadUrl(e,n),a=s+15*60*1e3,l={name:e,version:n,url:r,expiryTime:a};return localStorage.setItem("themeUrl",JSON.stringify(l)),r}async getThemeDownloadUrl(e,n){const s=await this.api.getThemeDownloadUrl(e,n);if(s.startsWith("http"))return s;throw new at.Notice(`${JSON.parse(s).message}`),new Error(`${JSON.parse(s).message}`)}async downloadThemeToThemeFolder(e,n){const s=await this.getThemeUrl(e,n);if(!s)return new at.Notice(`获取${e}主题下载地址失败！`),!1;if(app.customCss.themes[e])return new at.Notice(`主题${e}已经安装，无需重复安装！`),!1;try{const i=await at.requestUrl({url:s,method:"GET"}),r=at.normalizePath(app.vault.configDir+"/themes/"+e)+"/",a=this.app.vault.adapter,l=await Sn.loadAsync(i.arrayBuffer);(await a.exists(r)===!1||!await a.exists(r+"manifest.json"))&&await a.mkdir(r);try{l.forEach(async(c,f)=>{const _=r+c,h=await f.async("string");await a.write(_,h)})}catch{throw new at.Notice(`主题${e}解压失败！得手动清除残留文件！`,5e3),a.rmdir(r,!0),Error(`主题${e}解压失败！`)}return new at.Notice(`主题${e}安装并启用成功！
`,5e3),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new at.Notice(`主题${e}安装失败！${i}`,5e3),!1}}async updateThemeToExistThemeFolder(e,n){const s=await this.getThemeDownloadUrl(e,n);if(!s)throw new at.Notice(`获取${e}主题下载地址失败！`),new Error(`获取${e}主题下载地址失败！`);if(!app.customCss.themes[e])return new at.Notice(`主题${e}未安装！`),!1;try{const i=at.normalizePath(app.vault.configDir+"/themes/"+e)+"/",r=this.app.vault.adapter;if(await r.exists(i)===!1&&!await r.exists(i+"manifest.json"))throw new Error(`主题${e}未安装！`);const a=await at.requestUrl({url:s,method:"GET"}),l=await Sn.loadAsync(a.arrayBuffer);try{l.forEach(async(c,f)=>{const _=i+c,h=await f.async("string");await r.write(_,h)})}catch{throw new at.Notice(`主题${e}解压失败！得手动清除残留文件！`),Error(`主题${e}解压失败！`)}return new at.Notice(`主题${e}更新成功！
 新主题已生效`),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new at.Notice(`主题${e}更新失败！${i}`),!1}}}const $u={"data-pagefind-body":"",class:"w-full"},Ru={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Uu={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},Mu={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},Fu={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},Nu={class:"widget-item"},ju=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[b("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[b("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),b("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),Hu=[ju],Wu={class:"widget-item"},Zu=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[b("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),Vu=[Zu],Ku={class:"widget-item"},Gu=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),qu=[Gu],Ju={class:"widget-item"},Yu=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),Xu=[Yu],Qu={class:"widget-item"},td=b("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[b("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),ed={class:"num"},nd={class:"relative w-full"},sd={class:"relative group"},rd=["value"],id=b("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[b("circle",{cx:"11",cy:"11",r:"8"}),b("path",{d:"m21 21l-4.3-4.3"})])])],-1),od={class:"text-right"},ad=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[b("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),ld=[ad],cd={class:"w-full bg-muted-100 dark:bg-muted-1000"},ud={class:"w-full max-w-7xl mx-auto"},dd={class:"w-full flex items-center overflow-hidden"},fd={class:"w-full h-full flex flex-col justify-between md:px-6 pb-16 pt-4"},hd={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},pd={class:"flex flex-col gap-12 py-12"},md={class:"w-full flex items-center justify-center p-6 -m-3"},gd={class:"w-full max-w-[210px] pt-16"},wd=b("div",null,"Load More",-1),vd=[wd],_d={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},yd=b("h5",{class:"mr-3 max-w-none"},null,-1),bd=b("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[b("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),xd=[bd],kd={class:"body-font"},Cd={class:"container md:px-5 py-4 mx-auto"},Sd={class:"text-2xl font-medium title-font text-center mb-6"},Td=b("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[b("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[b("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[b("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),b("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),b("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),b("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[b("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),Id=b("div",null,[b("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ")],-1),Ed={class:"block md:flex flex-wrap sm:-m-4 -mx-4 md:-mb-10 md:-mt-4 md:space-y-0"},Ad={class:"md:p-4 md:w-1/2 flex"},Od={class:"flex-grow"},Pd=ge({__name:"ThemeMarket",props:{settings:{},app:{},tab:{}},async setup(t){let e,n;const s=t,i=ft(""),r=ft(!1),a=ft([]);let l=ft(24),c=ft(1);const f=ft(!1),_=ft(!0),h=new Se(s.settings.token),w=new _i(s.app,s.settings),d=([e,n]=yn(()=>h.isUserLogin()),e=await e,n(),e),x=()=>{f.value=!0,R()},p=async()=>{const N=await h.getPkmerDocs();if(d)try{a.value=await h.getThemeList(),a.value=a.value.sort((z,H)=>H.downloadCount-z.downloadCount),Array.isArray(a.value)?a.value.forEach(z=>{const H=N.find(o=>o.slug==z.name.replace(/\s+/g,"-").toLowerCase());H&&(z.contentUrl=`https://pkmer.cn/show/${H.uid}`);const S=s.app.customCss.themes;z.isInstalled=S[z.name]!==void 0,z.isOutdated=z.isInstalled&&S[z.name].version!==z.version}):a.value=[]}catch(z){console.error("Error loading themes:",z)}else a.value=await h.getTop20Themes(),Array.isArray(a.value)?a.value.forEach(z=>{const H=N.find(o=>o.slug==z.name.replace(/\s+/g,"-").toLowerCase());H&&(z.contentUrl=`https://pkmer.cn/show/${H.uid}`);const S=s.app.customCss.themes;z.isInstalled=S[z.name]!==void 0,z.isOutdated=z.isInstalled&&S[z.name].version!==z.version}):a.value=[]},v=Pt(()=>{if(a.value)return a.value.filter(H=>H.isInstalled===!0).length}),y=Pt(()=>a.value?a.value.filter(H=>H.isOutdated===!0).length:!1),k=ft(""),A=ft("all"),L=ft(""),P=ft(""),$=ft(0),j=N=>{at.debounce(()=>{k.value=N.target.value},800)()},q=()=>{r.value=!1},M=N=>{A.value=N},J=(N,z,H)=>{r.value=!0,L.value=z,P.value=H,N==="download"?_.value=!0:_.value=!1},rt=async()=>{r.value=!1,new at.Notice("正在更新主题，请稍后...",3e3),await w.updateThemeToExistThemeFolder(L.value,P.value)&&(a.value=a.value.map(z=>(z.name==L.value&&(z.isOutdated=!1),z)))},O=async()=>{r.value=!1,new at.Notice("正在下载主题，请稍后...",3e3),await w.downloadThemeToThemeFolder(L.value,P.value)&&(a.value=a.value.map(z=>(z.name==L.value&&(z.isInstalled=!0),z)))},V=()=>{r.value=!1},u=()=>{const N=window.location.hash.slice(1);if(N){const z=decodeURIComponent(N);A.value=z}},K=ft();Bn(async()=>{if(u(),await p(),i.value="pkmerDownloadCount",et.value="asc",app.workspace.on("resize",st),K.value=s.app.workspace.activeLeaf.view.leaf.width,d&&($.value=await h.getDownloadCount()),s.tab){const N=JSON.parse(s.tab);N.type=="tupdated"&&ht(),N.type=="tupdated"&&Q()}});const st=()=>{K.value=s.app.workspace.activeLeaf.view.leaf.width};Xe(()=>{window.removeEventListener("resize",st)});const Z=Pt(()=>{const N=k.value.toLowerCase().trim();return N.length<1?a.value:a.value.filter(z=>z.name.toLowerCase().includes(N)||z.author.toLowerCase().includes(N)||z.chineseDescription?.toLowerCase().includes(N)||z.tags?.toLowerCase().includes(N))}),tt=Pt(()=>Math.ceil(Z.value?.length/l.value)),Y=Pt(()=>c.value<tt.value),et=ft("");function F(){i.value="pkmerDownloadCount",et.value=et.value==="asc"?"desc":"asc"}function R(){i.value="downloadCount",et.value=et.value==="asc"?"desc":"asc"}function lt(){i.value="updateTime",et.value=et.value==="asc"?"desc":"asc"}function nt(){i.value="fileName",et.value=et.value==="asc"?"desc":"asc"}function Q(){i.value="installed",et.value=et.value==="asc"?"desc":"asc"}function ht(){i.value="updated",et.value=et.value==="asc"?"desc":"asc"}const yt=Pt(()=>{let N=[];return A.value=="all"?i.value==="downloadCount"?et.value==="asc"?N=Z.value.sort((z,H)=>z.downloadCount-H.downloadCount):N=Z.value.sort((z,H)=>H.downloadCount-z.downloadCount):i.value==="updateTime"?et.value==="asc"?N=Z.value.sort((z,H)=>new Date(z.updatedTime).getTime()-new Date(H.updatedTime).getTime()):N=Z.value.sort((z,H)=>new Date(H.updatedTime).getTime()-new Date(z.updatedTime).getTime()):i.value==="fileName"?et.value==="asc"?N=Z.value.sort((z,H)=>z.name.localeCompare(H.name)):N=Z.value.sort((z,H)=>H.name.localeCompare(z.name)):i.value==="pkmerDownloadCount"?et.value==="asc"?N=Z.value.sort((z,H)=>H.pkmerDownloadCount-z.pkmerDownloadCount):N=Z.value.sort((z,H)=>z.pkmerDownloadCount-H.pkmerDownloadCount):i.value==="installed"?N=Z.value.filter(z=>z.isInstalled):i.value==="updated"?N=Z.value.filter(z=>z.isOutdated):N=Z.value?.slice(0,c.value*l.value):(N=Z.value.filter(z=>z.tags?.toLowerCase().includes(A.value)||z.modes?.toLowerCase().includes(A.value)),i.value==="downloadCount"?et.value==="asc"?N=N.sort((z,H)=>z.downloadCount-H.downloadCount):N=N.sort((z,H)=>H.downloadCount-z.downloadCount):i.value==="updateTime"?et.value==="asc"?N=N.sort((z,H)=>new Date(z.updatedTime).getTime()-new Date(H.updatedTime).getTime()):N=N.sort((z,H)=>new Date(H.updatedTime).getTime()-new Date(z.updatedTime).getTime()):i.value==="fileName"?et.value==="asc"?N=N.sort((z,H)=>z.name.localeCompare(H.name)):N=N.sort((z,H)=>H.name.localeCompare(z.name)):i.value==="pkmerDownloadCount"&&(et.value==="asc"?N=N.sort((z,H)=>z.pkmerDownloadCount-H.pkmerDownloadCount):N=N.sort((z,H)=>H.pkmerDownloadCount-z.pkmerDownloadCount))),N?.slice(0,c.value*l.value)}),dt=Pt(()=>Array.isArray(Z.value)?Z.value:[]),pt=()=>{const N=c.value*l.value,z=N+l.value,H=yt.value?.slice(N,z);c.value++,a.value=[...a.value,...H]};return(N,z)=>(gt(),wt(Dt,null,[Lt(vi,{settings:s.settings,isLogin:Rt(d),app:s.app},null,8,["settings","isLogin","app"]),b("main",$u,[b("div",Ru,[b("div",Uu,[b("div",Mu,[b("div",Fu,[b("div",Nu,[b("button",{class:At([{active:i.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:R},Hu,2)]),b("div",Wu,[b("button",{class:At([{active:i.value=="updateTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:lt},Vu,2)]),b("div",Ku,[b("button",{class:At([{active:i.value=="fileName"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:nt},qu,2)]),b("div",Ju,[b("button",{class:At(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:i.value=="pkmerDownloadCount"}]),tooltip:"按主题热度",flow:"down",onClick:F},Xu,2)]),b("div",Qu,[b("button",{class:At([{active:i.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装主题",flow:"down",onClick:Q},[td,b("span",ed,kt(v.value),1)],2)]),b("div",nd,[b("div",sd,[b("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search themes...",onInput:j,value:k.value},null,40,rd),id])])])])])]),b("div",od,[xt(b("button",{onClick:ht,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[$t(" 发现 "+kt(y.value)+" 个主题更新！【点我查看】 ",1),b("button",{onClick:Mn(x,["stop"]),class:"ml-2 px-3 shadow-none"},ld)],512),[[It,y.value]])]),b("section",cd,[b("div",ud,[b("div",dd,[b("div",fd,[b("div",hd,[Lt(Du,{"active-category":A.value,themeList:dt.value,onUpdateActiveCategory:M},null,8,["active-category","themeList","onUpdateActiveCategory"])]),b("div",pd,[b("div",{class:At(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":K.value<=768&&K.value>0,"!grid-cols-2":K.value>768&&K.value<1024,"!grid-cols-3":K.value>1024}])},[(gt(!0),wt(Dt,null,Dn(yt.value,H=>(gt(),wt("div",{key:H.id},[Lt(zu,{app:s.app,"theme-info":H,isLogin:Rt(d),onDownloadUpdateTheme:J},null,8,["app","theme-info","isLogin","onDownloadUpdateTheme"])]))),128))],2),b("div",md,[b("div",gd,[Y.value?(gt(),wt("button",{key:0,onClick:pt,class:"w-full inline-flex items-center justify-center gap-2 font-sans font-semibold bg-white dark:bg-muted-700 text-muted-800 dark:text-white border border-muted-300 dark:border-muted-600 relative px-6 py-4 rounded-lg tw-accessibility hover:shadow-xl hover:shadow-muted-400/20 transition-all duration-300"},vd)):Qe("",!0)])])])])])])])]),xt(b("div",_d,[b("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:V,"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[b("div",{class:"flex items-center justify-between"},[yd,b("button",{type:"button",class:"z-50 cursor-pointer",onClick:V},xd)]),b("section",kd,[b("div",Cd,[b("h3",Sd,[Td,$t(" 即将安装...."+kt(L.value.toUpperCase()),1)]),Id,b("div",Ed,[b("div",Ad,[b("div",Od,[_.value?(gt(),wt("h2",{key:0,onClick:O,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(gt(),wt("h2",{key:1,onClick:rt,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))])]),b("div",{class:"md:p-4 md:w-1/2 flex"},[b("div",{class:"flex-grow"},[b("h2",{onClick:q,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[It,r.value]])],64))}});const zd={class:"w-full"},Ld={class:"flex flex-wrap md:content-center"},Bd={class:"flex items-center justify-between md:px-8 mx-auto font-sans logo scale-90 md:scale-125 max-w-7xl"},Dd={class:"flex flex-wrap items-center justify-center w-full mx-auto max-w-7xl"},$d={class:"items-center w-auto gap-6 basis-0"},Rd={href:"https://pkmer.cn",class:"flex items-center gap-3 no-underline text-inherit"},Ud={class:"transition-all duration-300 text-primary-600"},Md=da('<g><path d="M395.631 98.837C358.783 45.867 309.195 16.696 256 16.696S153.217 45.867 116.369 98.837c-35.565 51.124-55.151 118.797-55.151 190.554 0 113.54 87.379 205.913 194.783 205.913s194.783-92.373 194.783-205.913c-.001-71.756-19.588-139.43-55.153-190.554z" style="" fill="#ffc170" class=""></path><path d="M256 495.304c107.403 0 194.783-92.373 194.783-205.913 0-71.757-19.586-139.43-55.151-190.554C358.783 45.867 309.195 16.696 256 16.696" style="" fill="#e1a05a" data-original="#ffd6a0" class=""></path><path d="M0 128h55.652v33.391H0z" style="" fill="#a0bdd4" class=""></path><path d="M13.053 51.94h55.65v33.391h-55.65z" style="" transform="rotate(-160.527 40.878 68.636)" fill="#a0bdd4" class=""></path><path d="M456.348 128H512v33.391h-55.652z" style="" fill="#a0bdd4" class=""></path><path d="M454.411 40.807h33.391v55.65h-33.391z" style="" transform="rotate(-109.469 471.111 68.636)" fill="#a0bdd4" class=""></path><path d="m187.719 277.315 14.949-29.896-47.598-21.154-93.659 51.085c-.124 4-.194 8.013-.194 12.041 0 8.564.505 17.005 1.471 25.298l93.892-51.214 31.139 13.84zM450.63 278.997l-105.587-52.794-89.463 44.731-22.369-9.942-14.948 29.896 38.155 16.958 88.625-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228c.001-3.476-.059-6.938-.152-10.394z" style="" fill="#f8f8f8" class=""></path><path d="m450.63 278.997-105.587-52.794-89.463 44.731.839 36.913 88.624-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228 382.07 382.07 0 0 0-.152-10.395z" style="" fill="#fef5ea" class=""></path></g>',1),Fd=[Md],Nd=b("span",{class:"font-sans text-lg font-extrabold tracking-widest uppercase whitespace-nowrap feat dark:text-muted-100"},"Obsidian PKMer Market",-1),jd={class:"pkmer-tab-container"},Hd={class:"mb-5 flex list-none flex-row flex-wrap border-b-0 pl-0"},Wd={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Zd={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Vd={class:"pkmer-tab-content"},Kd={key:0,class:"opacity-100 transition-opacity duration-150 ease-linear"},Gd={key:1,class:"opacity-100 transition-opacity duration-150 ease-linear"},qd=b("h1",null,"Loading...",-1),Jd=b("h2",null,"如果长时间加载，请确保网络通常，并关闭网络代理。",-1),Yd=ge({__name:"PluginMarketView",props:{settings:{},app:{}},setup(t){const e=t,n=ft("plugin"),s=ft(),i=ft({type:"",count:0}),r=a=>{n.value=a};return Bn(()=>{s.value=localStorage.getItem("pkmer-update-tab"),s.value!==null&&s.value!==""&&(i.value=JSON.parse(s.value),i.value.type=="tupdated"&&r("theme"))}),Xe(()=>{localStorage.removeItem("pkmer-update-tab")}),(a,l)=>(gt(),wt(Dt,null,[b("div",zd,[b("div",Ld,[b("div",Bd,[b("div",Dd,[b("div",$d,[b("a",Rd,[b("div",Ud,[(gt(),wt("svg",{class:At(["fill-current w-7 h-7","w-7 h-7"]),width:"1.75rem",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs",viewBox:"0 0 512 512","xml:space":"preserve"},Fd))]),Nd])])])])])]),b("div",jd,[b("ul",Hd,[b("li",{class:At(["flex-auto text-center",{active:n.value==="plugin"}]),onClick:l[0]||(l[0]=c=>r("plugin"))},[b("span",Wd,[$t(" 插件市场 "),xt(b("span",{class:"num bradge"},kt(i.value.count),513),[[It,i.value.type=="updated"&&i.value.count>0]])])],2),b("li",{class:At(["flex-auto text-center relative",{active:n.value==="theme"}]),onClick:l[1]||(l[1]=c=>r("theme"))},[b("span",Zd,[$t(" 主题市场 "),xt(b("span",{class:"num bradge"},kt(i.value.count),513),[[It,i.value.type=="tupdated"&&i.value.count>0]])])],2)]),b("div",Vd,[(gt(),ci(ko,null,{default:es(()=>[n.value==="plugin"?(gt(),wt("div",Kd,[Lt(Qc,{settings:e.settings,app:e.app,tab:s.value},null,8,["settings","app","tab"])])):n.value==="theme"?(gt(),wt("div",Gd,[Lt(Pd,{settings:e.settings,app:e.app,tab:s.value},null,8,["settings","app","tab"])])):Qe("",!0)]),fallback:es(()=>[qd,Jd]),_:1}))])])],64))}});const ds="pkmer-downloader";class Xd extends at.ItemView{plugin;settings;constructor(e,n){super(e),this.plugin=n,this.settings=n.settings}getIcon(){return"bookmark"}getDisplayText(){return"Pkmer Market"}getViewType(){return ds}async onOpen(){const{contentEl:e}=this;console.log("welcome Pkmer Market"),Ga(Yd,{settings:this.settings,app:this.app}).mount(e)}}class fr{modal;settingTab;constructor(e){this.settingTab=e;const{remote:n}=require("electron"),{BrowserWindow:s}=n;this.modal=new s({parent:n.getCurrentWindow(),width:630,height:840,show:!1}),this.modal.once("ready-to-show",()=>{this.modal.setTitle("登录Pkmer~"),this.modal.setMenu(null),this.modal.show()}),this.modal.webContents.on("will-navigate",()=>{this.modal.webContents.executeJavaScript("localStorage.getItem('pkmer-token')").then(i=>{i&&(this.settingTab.saveToken(i),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView())})})}async doLogin(){try{await this.modal.loadURL("https://pkmer.cn/products/signIn/")}catch(e){console.log(e)}}async Loginout(){try{await this.modal.loadURL("https://pkmer.cn/products/UserProfile/"),this.modal.webContents.executeJavaScript("localStorage.removeItem('pkmer-token')").then(()=>{this.settingTab.saveToken(""),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView()})}catch(e){console.log(e),new at.Notice("你没登录咋退出？")}}onClose(){this.modal.close()}}class Qd extends at.PluginSettingTab{plugin;constructor(e,n){super(e,n),this.plugin=n}display(){const{containerEl:e}=this;e.empty(),e.createEl("h1",{text:"Obsidian PKMer Market"}),e.setAttribute("data-type","pkmer-downloader"),at.Platform.isDesktopApp&&(this.plugin.settings.token?this.showLoginOut():this.showLogin()),new at.Setting(e).setName("Token").setDesc("Default token for pkmer downloader").addText(s=>s.setPlaceholder("登录获取token").setValue(this.plugin.settings.token).setDisabled(!1).onChange(async i=>{this.plugin.settings.token=i,await this.plugin.saveSettings()})),at.Platform.isDesktopApp&&new at.Setting(e).setName("Tips").setDesc("如果登录后，仍然提示登录，请退出重新登录PKMER "),at.Platform.isMobileApp&&new at.Setting(e).setName("Tips").setDesc("移动端需要您手动在电脑端登录获取token后复制到输入框中 "),new at.Setting(e).setName("🥚打开PKMer Market").setDesc("点击开始挑选心爱的插件和主题吧").addButton(s=>{s.setIcon("download").setButtonText("进入").setClass("px-5").setCta().onClick(()=>{app.setting.close(),setTimeout(()=>{this.plugin.openView("")},100)})}),e.createEl("hr",{cls:"mt-2"});const n=e.createEl("div",{cls:"mt-4"});n.createEl("a",{text:"🥚PKMer.cn",href:"https://pkmer.cn"}),n.createEl("span",{text:" | "}),n.createEl("a",{text:"👤个人中心",href:"https://pkmer.cn/products/UserProfile/"})}showLogin(){new at.Setting(this.containerEl).setName("登录Pkmer").addButton(e=>e.setButtonText("登录").setCta().onClick(async()=>{e.setDisabled(!0),await new fr(this).doLogin(),this.display()}))}showLoginOut(){new at.Setting(this.containerEl).setName("退出登录").addButton(e=>e.setButtonText("退出").setCta().onClick(async()=>{e.setDisabled(!0),await new fr(this).Loginout(),this.display()}))}saveToken(e){this.plugin.settings.token=e,this.plugin.saveSettings()}}let tf=class{constructor(e,n){this.app=e,this.settings=n,this.api=new Se(this.settings.token),this.isUserLogin=!1,this.allPluginList=[],this.loadAllPlugins()}api;isUserLogin;allPluginList;async loadAllPlugins(){try{if(this.isUserLogin=await this.api.isUserLogin(),this.isUserLogin){const e=await this.api.getPluginList();this.allPluginList=Array.isArray(e)?e:[],await this.updatePluginStatus()}}catch(e){throw console.error("Error loading plugins:",e),new Error("Failed to load plugins")}}async updatePluginStatus(){const e=this.app.plugins.manifests;this.allPluginList.forEach(n=>{n.isInstalled=!!e[n.id],n.isOutdated=n.isInstalled&&e[n.id].version!==n.version})}async getPluginStatus(){await this.loadAllPlugins();const e=this.allPluginList.filter(s=>s.isInstalled).length,n=this.allPluginList.filter(s=>s.isOutdated).length;return{installedCount:e,updatedCount:n}}};class ef{constructor(e,n){this.app=e,this.settings=n,this.api=new Se(this.settings.token),this.isUserLogin=!1,this.allThemeList=[],this.loadAllThemes()}api;isUserLogin;allThemeList;async loadAllThemes(){try{if(this.isUserLogin=await this.api.isUserLogin(),this.isUserLogin){const e=await this.api.getThemeList();this.allThemeList=Array.isArray(e)?e:[],await this.updateThemeStatus()}}catch(e){console.error("Error loading themes:",e)}}async updateThemeStatus(){const e=this.app.customCss.themes;this.allThemeList.forEach(n=>{n.isInstalled=e[n.name]!==void 0,n.isOutdated=n.isInstalled&&e[n.name].version!==n.version})}async getThemeStatus(){await this.loadAllThemes();const e=this.allThemeList.filter(s=>s.isInstalled).length,n=this.allThemeList.filter(s=>s.isOutdated).length;return{tinstalledCount:e,tupdatedCount:n}}}const nf={token:""};class sf extends at.Plugin{settings;statusBarIconEl;async onload(){await this.loadSettings(),localStorage.removeItem("pkmer-update-tab"),this.registerCustomURI(),this.registerCustomCommands(),this.registerCustomRibbon(),this.addStatusBarIcon(),await this.reloadStatusBarHandler(),this.addSettingTab(new Qd(this.app,this)),this.registerView(ds,e=>new Xd(e,this)),addEventListener("reload-statusbar",async()=>{this.reloadStatusBarHandler()})}reloadStatusBarHandler=async()=>{await this.updateStatusBar("")};onunload(){removeEventListener("reload-statusbar",this.reloadStatusBarHandler)}async loadSettings(){this.settings=Object.assign({},nf,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}registerCustomURI(){this.registerObsidianProtocolHandler("pkmer-installer",async e=>{const n=e.pluginID,s=e.themeID,i=e.version;if(!this.settings.token){new at.Notice("请先登录获取token",5e3),app.setting.open(),app.setting.openTabById("PKMer");return}if(n)try{new at.Notice("正在下载插件，请稍后...",3e3),await new zs(app,this.settings).downloadPluginToPluginFolder(n,i)}catch{new at.Notice("下载失败，请检查网络")}if(s)try{new at.Notice("正在安装主题，请稍后...",3e3),await new _i(app,this.settings).downloadThemeToThemeFolder(s,i)}catch{new at.Notice("下载失败，请检查网络")}})}registerCustomCommands(){this.addCommand({id:"open-pkmer-market-view",name:"Open Pkmer Market View",callback:()=>{this.openView("")}})}registerCustomRibbon(){this.addRibbonIcon("download","Open Pkmer Market",()=>{this.openView("")})}addStatusBarIcon(){this.statusBarIconEl=this.addStatusBarItem(),this.statusBarIconEl.addClass("pkmer-statusbar"),this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.registerDomEvent(this.statusBarIconEl,"click",()=>{this.updateStatusBar("statusbar")})}async updateStatusBar(e){const n=new tf(app,this.settings),s=new ef(app,this.settings),{installedCount:i,updatedCount:r}=await n.getPluginStatus(),{tinstalledCount:a,tupdatedCount:l}=await s.getThemeStatus();if(r>0||l>0){if(this.statusBarIconEl.setAttribute("aria-label-position","top"),this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+r+"/"+i+", Themes: "+l+"/"+a),this.statusBarIconEl.innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>
            <svg xmlns="http://www.w3.org/2000/svg"  style="margin-top: -12px;margin-left: -3px;"  width="1em" height="1em" viewBox="0 0 15 15"><path fill="orange" d="M9.875 7.5a2.375 2.375 0 1 1-4.75 0a2.375 2.375 0 0 1 4.75 0"/></svg> `,e==="statusbar")if(r>0){const c={type:"updated",count:r};this.openView(JSON.stringify(c))}else{const c={type:"tupdated",count:l};this.openView(JSON.stringify(c))}}else this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+r+"/"+i+", Themes: "+l+"/"+a),e==="statusbar"&&this.openView("")}openView(e){let n=!1;app.workspace.iterateAllLeaves(s=>{try{if(s.getViewState().type==="pkmer-downloader"){n=!0,localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace.setActiveLeaf(s),this.app.workspace.activeLeaf.rebuildView()},300);return}}catch(i){console.error("Error occurred while processing leaf:",i)}}),n||(localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace?.getLeaf()?.setViewState({active:!0,type:ds})},300))}}module.exports=sf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
